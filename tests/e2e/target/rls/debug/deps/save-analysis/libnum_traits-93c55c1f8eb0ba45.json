{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15","program":"/home/johnmorrisett/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","num_traits","/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=93c55c1f8eb0ba45","-C","extra-filename=-93c55c1f8eb0ba45","--out-dir","/home/johnmorrisett/Documents/mini-kvvm-rs/mini-kvvm-rs/tests/e2e/target/rls/debug/deps","-L","dependency=/home/johnmorrisett/Documents/mini-kvvm-rs/mini-kvvm-rs/tests/e2e/target/rls/debug/deps","--cap-lints","allow","--cfg","has_i128","--cfg","has_to_int_unchecked","--cfg","has_reverse_bits","--cfg","has_leading_trailing_ones","--cfg","has_int_assignop_ref","--cfg","has_div_euclid","--error-format=json","--sysroot","/home/johnmorrisett/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/johnmorrisett/Documents/mini-kvvm-rs/mini-kvvm-rs/tests/e2e/target/rls/debug/deps/libnum_traits-93c55c1f8eb0ba45.rmeta"},"prelude":{"crate_id":{"name":"num_traits","disambiguator":[15405743614165532183,0]},"crate_root":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src","external_crates":[{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[11763967750977672065,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[10106063140927293834,0]}},{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[7335734036341381276,0]}}],"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":472,"byte_end":21804,"line_start":11,"line_end":640,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":233},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1043,"byte_end":1050,"line_start":32,"line_end":32,"column_start":17,"column_end":24},"alias_span":null,"name":"Bounded","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2232},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1136,"byte_end":1146,"line_start":35,"line_end":35,"column_start":16,"column_end":26},"alias_span":null,"name":"FloatConst","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":355},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1255,"byte_end":1259,"line_start":37,"line_end":37,"column_start":16,"column_end":20},"alias_span":null,"name":"cast","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":366},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1261,"byte_end":1272,"line_start":37,"line_end":37,"column_start":22,"column_end":33},"alias_span":null,"name":"AsPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":333},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1274,"byte_end":1287,"line_start":37,"line_end":37,"column_start":35,"column_end":48},"alias_span":null,"name":"FromPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":358},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1289,"byte_end":1296,"line_start":37,"line_end":37,"column_start":50,"column_end":57},"alias_span":null,"name":"NumCast","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":307},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1298,"byte_end":1309,"line_start":37,"line_end":37,"column_start":59,"column_end":70},"alias_span":null,"name":"ToPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":487},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1333,"byte_end":1336,"line_start":38,"line_end":38,"column_start":22,"column_end":25},"alias_span":null,"name":"one","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":485},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1338,"byte_end":1342,"line_start":38,"line_end":38,"column_start":27,"column_end":31},"alias_span":null,"name":"zero","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":476},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1344,"byte_end":1347,"line_start":38,"line_end":38,"column_start":33,"column_end":36},"alias_span":null,"name":"One","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":466},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1349,"byte_end":1353,"line_start":38,"line_end":38,"column_start":38,"column_end":42},"alias_span":null,"name":"Zero","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":523},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1369,"byte_end":1376,"line_start":39,"line_end":39,"column_start":14,"column_end":21},"alias_span":null,"name":"PrimInt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":572},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1406,"byte_end":1416,"line_start":41,"line_end":41,"column_start":5,"column_end":15},"alias_span":null,"name":"CheckedAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":579},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1418,"byte_end":1428,"line_start":41,"line_end":41,"column_start":17,"column_end":27},"alias_span":null,"name":"CheckedDiv","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":577},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1430,"byte_end":1440,"line_start":41,"line_end":41,"column_start":29,"column_end":39},"alias_span":null,"name":"CheckedMul","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":584},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1442,"byte_end":1452,"line_start":41,"line_end":41,"column_start":41,"column_end":51},"alias_span":null,"name":"CheckedNeg","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":581},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1454,"byte_end":1464,"line_start":41,"line_end":41,"column_start":53,"column_end":63},"alias_span":null,"name":"CheckedRem","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":586},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1466,"byte_end":1476,"line_start":41,"line_end":41,"column_start":65,"column_end":75},"alias_span":null,"name":"CheckedShl","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":589},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1478,"byte_end":1488,"line_start":41,"line_end":41,"column_start":77,"column_end":87},"alias_span":null,"name":"CheckedShr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":575},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1490,"byte_end":1500,"line_start":41,"line_end":41,"column_start":89,"column_end":99},"alias_span":null,"name":"CheckedSub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":611},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1527,"byte_end":1540,"line_start":43,"line_end":43,"column_start":23,"column_end":36},"alias_span":null,"name":"CheckedEuclid","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":599},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1542,"byte_end":1548,"line_start":43,"line_end":43,"column_start":38,"column_end":44},"alias_span":null,"name":"Euclid","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":618},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1569,"byte_end":1572,"line_start":44,"line_end":44,"column_start":19,"column_end":22},"alias_span":null,"name":"Inv","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":636},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1597,"byte_end":1603,"line_start":45,"line_end":45,"column_start":24,"column_end":30},"alias_span":null,"name":"MulAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":641},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1605,"byte_end":1617,"line_start":45,"line_end":45,"column_start":32,"column_end":44},"alias_span":null,"name":"MulAddAssign","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":715},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1646,"byte_end":1656,"line_start":46,"line_end":46,"column_start":27,"column_end":37},"alias_span":null,"name":"Saturating","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":720},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1658,"byte_end":1671,"line_start":46,"line_end":46,"column_start":39,"column_end":52},"alias_span":null,"name":"SaturatingAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":724},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1673,"byte_end":1686,"line_start":46,"line_end":46,"column_start":54,"column_end":67},"alias_span":null,"name":"SaturatingMul","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":722},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1688,"byte_end":1701,"line_start":46,"line_end":46,"column_start":69,"column_end":82},"alias_span":null,"name":"SaturatingSub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":750},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1733,"byte_end":1744,"line_start":48,"line_end":48,"column_start":5,"column_end":16},"alias_span":null,"name":"WrappingAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":754},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1746,"byte_end":1757,"line_start":48,"line_end":48,"column_start":18,"column_end":29},"alias_span":null,"name":"WrappingMul","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":757},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1759,"byte_end":1770,"line_start":48,"line_end":48,"column_start":31,"column_end":42},"alias_span":null,"name":"WrappingNeg","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":760},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1772,"byte_end":1783,"line_start":48,"line_end":48,"column_start":44,"column_end":55},"alias_span":null,"name":"WrappingShl","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":762},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1785,"byte_end":1796,"line_start":48,"line_end":48,"column_start":57,"column_end":68},"alias_span":null,"name":"WrappingShr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":752},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1798,"byte_end":1809,"line_start":48,"line_end":48,"column_start":70,"column_end":81},"alias_span":null,"name":"WrappingSub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":803},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1828,"byte_end":1839,"line_start":50,"line_end":50,"column_start":15,"column_end":26},"alias_span":null,"name":"checked_pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":801},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1841,"byte_end":1844,"line_start":50,"line_end":50,"column_start":28,"column_end":31},"alias_span":null,"name":"pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":796},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1846,"byte_end":1849,"line_start":50,"line_end":50,"column_start":33,"column_end":36},"alias_span":null,"name":"Pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":834},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1867,"byte_end":1870,"line_start":51,"line_end":51,"column_start":16,"column_end":19},"alias_span":null,"name":"abs","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":836},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1872,"byte_end":1879,"line_start":51,"line_end":51,"column_start":21,"column_end":28},"alias_span":null,"name":"abs_sub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":838},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1881,"byte_end":1887,"line_start":51,"line_end":51,"column_start":30,"column_end":36},"alias_span":null,"name":"signum","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":819},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1889,"byte_end":1895,"line_start":51,"line_end":51,"column_start":38,"column_end":44},"alias_span":null,"name":"Signed","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":840},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1897,"byte_end":1905,"line_start":51,"line_end":51,"column_start":46,"column_end":54},"alias_span":null,"name":"Unsigned","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":472,"byte_end":21804,"line_start":11,"line_end":640,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":71},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":87},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":96},{"krate":0,"index":99},{"krate":0,"index":102},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":112},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":132},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":139},{"krate":0,"index":142},{"krate":0,"index":145},{"krate":0,"index":148},{"krate":0,"index":151},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":158},{"krate":0,"index":161},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":168},{"krate":0,"index":171},{"krate":0,"index":174},{"krate":0,"index":177},{"krate":0,"index":180},{"krate":0,"index":183},{"krate":0,"index":254},{"krate":0,"index":370},{"krate":0,"index":455},{"krate":0,"index":489},{"krate":0,"index":548},{"krate":0,"index":782},{"krate":0,"index":806},{"krate":0,"index":844},{"krate":0,"index":847},{"krate":0,"index":850},{"krate":0,"index":854},{"krate":0,"index":856},{"krate":0,"index":859},{"krate":0,"index":862},{"krate":0,"index":866},{"krate":0,"index":868},{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":874},{"krate":0,"index":876},{"krate":0,"index":879},{"krate":0,"index":4470},{"krate":0,"index":4473},{"krate":0,"index":4476},{"krate":0,"index":4479},{"krate":0,"index":4482},{"krate":0,"index":4485},{"krate":0,"index":4488},{"krate":0,"index":4491},{"krate":0,"index":4494},{"krate":0,"index":4497},{"krate":0,"index":4500},{"krate":0,"index":4503},{"krate":0,"index":880},{"krate":0,"index":4506},{"krate":0,"index":4511},{"krate":0,"index":4513},{"krate":0,"index":4515},{"krate":0,"index":884},{"krate":0,"index":886},{"krate":0,"index":888},{"krate":0,"index":4517},{"krate":0,"index":4526},{"krate":0,"index":889},{"krate":0,"index":891},{"krate":0,"index":893}],"decl_id":null,"docs":" Numeric traits for generic mathematics","sig":null,"attributes":[{"value":"/ Numeric traits for generic mathematics","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":472,"byte_end":514,"line_start":11,"line_end":11,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":515,"byte_end":518,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ## Compatibility","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":519,"byte_end":539,"line_start":13,"line_end":13,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":540,"byte_end":543,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The `num-traits` crate is tested for rustc 1.8 and greater.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":544,"byte_end":607,"line_start":15,"line_end":15,"column_start":1,"column_end":64}},{"value":"deny(unconditional_recursion)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":667,"byte_end":700,"line_start":18,"line_end":18,"column_start":1,"column_end":34}},{"value":"no_std","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":701,"byte_end":711,"line_start":19,"line_end":19,"column_start":1,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":183},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/bounds.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bounds","qualname":"::bounds","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/bounds.rs","parent":null,"children":[{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":191},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":198},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":205},{"krate":0,"index":208},{"krate":0,"index":211},{"krate":0,"index":214},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":221},{"krate":0,"index":224},{"krate":0,"index":227},{"krate":0,"index":230},{"krate":0,"index":233},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":241},{"krate":0,"index":243},{"krate":0,"index":246},{"krate":0,"index":895},{"krate":0,"index":898},{"krate":0,"index":901},{"krate":0,"index":904},{"krate":0,"index":907},{"krate":0,"index":910},{"krate":0,"index":913},{"krate":0,"index":916},{"krate":0,"index":919},{"krate":0,"index":922},{"krate":0,"index":925},{"krate":0,"index":928},{"krate":0,"index":247},{"krate":0,"index":931},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":934},{"krate":0,"index":957},{"krate":0,"index":979},{"krate":0,"index":1000},{"krate":0,"index":1020},{"krate":0,"index":1039},{"krate":0,"index":1057},{"krate":0,"index":1074},{"krate":0,"index":1090},{"krate":0,"index":1105},{"krate":0,"index":1119},{"krate":0,"index":1132},{"krate":0,"index":1144},{"krate":0,"index":1155},{"krate":0,"index":1165},{"krate":0,"index":1174},{"krate":0,"index":1182},{"krate":0,"index":1189},{"krate":0,"index":1195},{"krate":0,"index":1200},{"krate":0,"index":1204},{"krate":0,"index":1207}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":233},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/bounds.rs","byte_start":23425,"byte_end":23432,"line_start":9,"line_end":9,"column_start":11,"column_end":18},"name":"Bounded","qualname":"::bounds::Bounded","value":"Bounded","parent":null,"children":[{"krate":0,"index":234},{"krate":0,"index":235}],"decl_id":null,"docs":" Numbers which have upper and lower bounds\n","sig":null,"attributes":[{"value":"/ Numbers which have upper and lower bounds","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/bounds.rs","byte_start":23369,"byte_end":23414,"line_start":8,"line_end":8,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/bounds.rs","byte_start":23568,"byte_end":23577,"line_start":12,"line_end":12,"column_start":8,"column_end":17},"name":"min_value","qualname":"::bounds::Bounded::min_value","value":"pub fn min_value() -> Self","parent":{"krate":0,"index":233},"children":[],"decl_id":null,"docs":" Returns the smallest finite number this type can represent\n","sig":null,"attributes":[{"value":"/ Returns the smallest finite number this type can represent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/bounds.rs","byte_start":23498,"byte_end":23560,"line_start":11,"line_end":11,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/bounds.rs","byte_start":23662,"byte_end":23671,"line_start":14,"line_end":14,"column_start":8,"column_end":17},"name":"max_value","qualname":"::bounds::Bounded::max_value","value":"pub fn max_value() -> Self","parent":{"krate":0,"index":233},"children":[],"decl_id":null,"docs":" Returns the largest finite number this type can represent\n","sig":null,"attributes":[{"value":"/ Returns the largest finite number this type can represent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/bounds.rs","byte_start":23593,"byte_end":23654,"line_start":13,"line_end":13,"column_start":5,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":236},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/bounds.rs","byte_start":23732,"byte_end":23744,"line_start":18,"line_end":18,"column_start":11,"column_end":23},"name":"LowerBounded","qualname":"::bounds::LowerBounded","value":"LowerBounded","parent":null,"children":[{"krate":0,"index":237}],"decl_id":null,"docs":" Numbers which have lower bounds\n","sig":null,"attributes":[{"value":"/ Numbers which have lower bounds","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/bounds.rs","byte_start":23686,"byte_end":23721,"line_start":17,"line_end":17,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/bounds.rs","byte_start":23821,"byte_end":23830,"line_start":20,"line_end":20,"column_start":8,"column_end":17},"name":"min_value","qualname":"::bounds::LowerBounded::min_value","value":"pub fn min_value() -> Self","parent":{"krate":0,"index":236},"children":[],"decl_id":null,"docs":" Returns the smallest finite number this type can represent\n","sig":null,"attributes":[{"value":"/ Returns the smallest finite number this type can represent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/bounds.rs","byte_start":23751,"byte_end":23813,"line_start":19,"line_end":19,"column_start":5,"column_end":67}}]},{"kind":"Trait","id":{"krate":0,"index":241},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/bounds.rs","byte_start":24066,"byte_end":24078,"line_start":31,"line_end":31,"column_start":11,"column_end":23},"name":"UpperBounded","qualname":"::bounds::UpperBounded","value":"UpperBounded","parent":null,"children":[{"krate":0,"index":242}],"decl_id":null,"docs":" Numbers which have upper bounds\n","sig":null,"attributes":[{"value":"/ Numbers which have upper bounds","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/bounds.rs","byte_start":24020,"byte_end":24055,"line_start":30,"line_end":30,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/bounds.rs","byte_start":24154,"byte_end":24163,"line_start":33,"line_end":33,"column_start":8,"column_end":17},"name":"max_value","qualname":"::bounds::UpperBounded::max_value","value":"pub fn max_value() -> Self","parent":{"krate":0,"index":241},"children":[],"decl_id":null,"docs":" Returns the largest finite number this type can represent\n","sig":null,"attributes":[{"value":"/ Returns the largest finite number this type can represent","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/bounds.rs","byte_start":24085,"byte_end":24146,"line_start":32,"line_end":32,"column_start":5,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":254},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cast","qualname":"::cast","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","parent":null,"children":[{"krate":0,"index":255},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":265},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":272},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":279},{"krate":0,"index":282},{"krate":0,"index":285},{"krate":0,"index":288},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":295},{"krate":0,"index":298},{"krate":0,"index":301},{"krate":0,"index":304},{"krate":0,"index":307},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":1210},{"krate":0,"index":1225},{"krate":0,"index":1240},{"krate":0,"index":1255},{"krate":0,"index":1270},{"krate":0,"index":1285},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":1300},{"krate":0,"index":1315},{"krate":0,"index":1330},{"krate":0,"index":1345},{"krate":0,"index":1360},{"krate":0,"index":1375},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":1390},{"krate":0,"index":1441},{"krate":0,"index":333},{"krate":0,"index":348},{"krate":0,"index":1492},{"krate":0,"index":1507},{"krate":0,"index":1522},{"krate":0,"index":1537},{"krate":0,"index":1552},{"krate":0,"index":1567},{"krate":0,"index":1582},{"krate":0,"index":1597},{"krate":0,"index":1612},{"krate":0,"index":1627},{"krate":0,"index":1642},{"krate":0,"index":1657},{"krate":0,"index":1672},{"krate":0,"index":1687},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":355},{"krate":0,"index":358},{"krate":0,"index":361},{"krate":0,"index":1730},{"krate":0,"index":1733},{"krate":0,"index":1736},{"krate":0,"index":1739},{"krate":0,"index":1742},{"krate":0,"index":1745},{"krate":0,"index":1748},{"krate":0,"index":1751},{"krate":0,"index":1754},{"krate":0,"index":1757},{"krate":0,"index":1760},{"krate":0,"index":1763},{"krate":0,"index":1766},{"krate":0,"index":1769},{"krate":0,"index":362},{"krate":0,"index":366},{"krate":0,"index":369},{"krate":0,"index":1772},{"krate":0,"index":1774},{"krate":0,"index":1776},{"krate":0,"index":1778},{"krate":0,"index":1780},{"krate":0,"index":1782},{"krate":0,"index":1784},{"krate":0,"index":1786},{"krate":0,"index":1788},{"krate":0,"index":1790},{"krate":0,"index":1792},{"krate":0,"index":1794},{"krate":0,"index":1796},{"krate":0,"index":1798},{"krate":0,"index":1800},{"krate":0,"index":1802},{"krate":0,"index":1804},{"krate":0,"index":1806},{"krate":0,"index":1808},{"krate":0,"index":1810},{"krate":0,"index":1812},{"krate":0,"index":1814},{"krate":0,"index":1816},{"krate":0,"index":1818},{"krate":0,"index":1820},{"krate":0,"index":1822},{"krate":0,"index":1824},{"krate":0,"index":1826},{"krate":0,"index":1828},{"krate":0,"index":1830},{"krate":0,"index":1832},{"krate":0,"index":1834},{"krate":0,"index":1836},{"krate":0,"index":1838},{"krate":0,"index":1840},{"krate":0,"index":1842},{"krate":0,"index":1844},{"krate":0,"index":1846},{"krate":0,"index":1848},{"krate":0,"index":1850},{"krate":0,"index":1852},{"krate":0,"index":1854},{"krate":0,"index":1856},{"krate":0,"index":1858},{"krate":0,"index":1860},{"krate":0,"index":1862},{"krate":0,"index":1864},{"krate":0,"index":1866},{"krate":0,"index":1868},{"krate":0,"index":1870},{"krate":0,"index":1872},{"krate":0,"index":1874},{"krate":0,"index":1876},{"krate":0,"index":1878},{"krate":0,"index":1880},{"krate":0,"index":1882},{"krate":0,"index":1884},{"krate":0,"index":1886},{"krate":0,"index":1888},{"krate":0,"index":1890},{"krate":0,"index":1892},{"krate":0,"index":1894},{"krate":0,"index":1896},{"krate":0,"index":1898},{"krate":0,"index":1900},{"krate":0,"index":1902},{"krate":0,"index":1904},{"krate":0,"index":1906},{"krate":0,"index":1908},{"krate":0,"index":1910},{"krate":0,"index":1912},{"krate":0,"index":1914},{"krate":0,"index":1916},{"krate":0,"index":1918},{"krate":0,"index":1920},{"krate":0,"index":1922},{"krate":0,"index":1924},{"krate":0,"index":1926},{"krate":0,"index":1928},{"krate":0,"index":1930},{"krate":0,"index":1932},{"krate":0,"index":1934},{"krate":0,"index":1936},{"krate":0,"index":1938},{"krate":0,"index":1940},{"krate":0,"index":1942},{"krate":0,"index":1944},{"krate":0,"index":1946},{"krate":0,"index":1948},{"krate":0,"index":1950},{"krate":0,"index":1952},{"krate":0,"index":1954},{"krate":0,"index":1956},{"krate":0,"index":1958},{"krate":0,"index":1960},{"krate":0,"index":1962},{"krate":0,"index":1964},{"krate":0,"index":1966},{"krate":0,"index":1968},{"krate":0,"index":1970},{"krate":0,"index":1972},{"krate":0,"index":1974},{"krate":0,"index":1976},{"krate":0,"index":1978},{"krate":0,"index":1980},{"krate":0,"index":1982},{"krate":0,"index":1984},{"krate":0,"index":1986},{"krate":0,"index":1988},{"krate":0,"index":1990},{"krate":0,"index":1992},{"krate":0,"index":1994},{"krate":0,"index":1996},{"krate":0,"index":1998},{"krate":0,"index":2000},{"krate":0,"index":2002},{"krate":0,"index":2004},{"krate":0,"index":2006},{"krate":0,"index":2008},{"krate":0,"index":2010},{"krate":0,"index":2012},{"krate":0,"index":2014},{"krate":0,"index":2016},{"krate":0,"index":2018},{"krate":0,"index":2020},{"krate":0,"index":2022},{"krate":0,"index":2024},{"krate":0,"index":2026},{"krate":0,"index":2028},{"krate":0,"index":2030},{"krate":0,"index":2032},{"krate":0,"index":2034},{"krate":0,"index":2036},{"krate":0,"index":2038},{"krate":0,"index":2040},{"krate":0,"index":2042},{"krate":0,"index":2044},{"krate":0,"index":2046},{"krate":0,"index":2048},{"krate":0,"index":2050},{"krate":0,"index":2052},{"krate":0,"index":2054},{"krate":0,"index":2056},{"krate":0,"index":2058},{"krate":0,"index":2060},{"krate":0,"index":2062},{"krate":0,"index":2064},{"krate":0,"index":2066},{"krate":0,"index":2068},{"krate":0,"index":2070},{"krate":0,"index":2072},{"krate":0,"index":2074},{"krate":0,"index":2076},{"krate":0,"index":2078},{"krate":0,"index":2080},{"krate":0,"index":2082},{"krate":0,"index":2084},{"krate":0,"index":2086},{"krate":0,"index":2088},{"krate":0,"index":2090},{"krate":0,"index":2092},{"krate":0,"index":2094},{"krate":0,"index":2096},{"krate":0,"index":2098},{"krate":0,"index":2100},{"krate":0,"index":2102},{"krate":0,"index":2104},{"krate":0,"index":2106},{"krate":0,"index":2108},{"krate":0,"index":2110},{"krate":0,"index":2112},{"krate":0,"index":2114},{"krate":0,"index":2116},{"krate":0,"index":2118},{"krate":0,"index":2120},{"krate":0,"index":2122},{"krate":0,"index":2124},{"krate":0,"index":2126},{"krate":0,"index":2128},{"krate":0,"index":2130},{"krate":0,"index":2132},{"krate":0,"index":2134},{"krate":0,"index":2136},{"krate":0,"index":2138},{"krate":0,"index":2140},{"krate":0,"index":2142},{"krate":0,"index":2144},{"krate":0,"index":2146},{"krate":0,"index":2148},{"krate":0,"index":2150},{"krate":0,"index":2152},{"krate":0,"index":2154},{"krate":0,"index":2156},{"krate":0,"index":2158},{"krate":0,"index":2160},{"krate":0,"index":2162},{"krate":0,"index":2164},{"krate":0,"index":2166},{"krate":0,"index":2168},{"krate":0,"index":2170},{"krate":0,"index":2172},{"krate":0,"index":2174},{"krate":0,"index":2176},{"krate":0,"index":2178},{"krate":0,"index":2180},{"krate":0,"index":2182},{"krate":0,"index":2184},{"krate":0,"index":2186},{"krate":0,"index":2188},{"krate":0,"index":2190},{"krate":0,"index":2192},{"krate":0,"index":2194},{"krate":0,"index":2196},{"krate":0,"index":2198},{"krate":0,"index":2200},{"krate":0,"index":2202},{"krate":0,"index":2204},{"krate":0,"index":2206},{"krate":0,"index":2208},{"krate":0,"index":2210},{"krate":0,"index":2212},{"krate":0,"index":2214}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":307},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":27918,"byte_end":27929,"line_start":19,"line_end":19,"column_start":11,"column_end":22},"name":"ToPrimitive","qualname":"::cast::ToPrimitive","value":"ToPrimitive","parent":null,"children":[{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321}],"decl_id":null,"docs":" A generic trait for converting a value to a number.","sig":null,"attributes":[{"value":"/ A generic trait for converting a value to a number.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":27344,"byte_end":27399,"line_start":9,"line_end":9,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":27400,"byte_end":27403,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ A value can be represented by the target type when it lies within","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":27404,"byte_end":27473,"line_start":11,"line_end":11,"column_start":1,"column_end":70}},{"value":"/ the range of scalars supported by the target type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":27474,"byte_end":27528,"line_start":12,"line_end":12,"column_start":1,"column_end":55}},{"value":"/ For example, a negative integer cannot be represented by an unsigned","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":27529,"byte_end":27601,"line_start":13,"line_end":13,"column_start":1,"column_end":73}},{"value":"/ integer type, and an `i64` with a very high magnitude might not be","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":27602,"byte_end":27672,"line_start":14,"line_end":14,"column_start":1,"column_end":71}},{"value":"/ convertible to an `i32`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":27673,"byte_end":27701,"line_start":15,"line_end":15,"column_start":1,"column_end":29}},{"value":"/ On the other hand, conversions with possible precision loss or truncation","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":27702,"byte_end":27779,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"/ are admitted, like an `f32` with a decimal part to an integer type, or","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":27780,"byte_end":27854,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ even a large `f64` saturating to `f32` infinity.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":27855,"byte_end":27907,"line_start":18,"line_end":18,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":28088,"byte_end":28096,"line_start":23,"line_end":23,"column_start":8,"column_end":16},"name":"to_isize","qualname":"::cast::ToPrimitive::to_isize","value":"pub fn to_isize(&Self) -> Option<isize>","parent":{"krate":0,"index":307},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `isize`. If the value cannot be\n represented by an `isize`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `isize`. If the value cannot be","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":27936,"byte_end":28006,"line_start":20,"line_end":20,"column_start":5,"column_end":75}},{"value":"/ represented by an `isize`, then `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":28011,"byte_end":28066,"line_start":21,"line_end":21,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":28071,"byte_end":28080,"line_start":22,"line_end":22,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":28343,"byte_end":28348,"line_start":30,"line_end":30,"column_start":8,"column_end":13},"name":"to_i8","qualname":"::cast::ToPrimitive::to_i8","value":"pub fn to_i8(&Self) -> Option<i8>","parent":{"krate":0,"index":307},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i8`. If the value cannot be\n represented by an `i8`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `i8`. If the value cannot be","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":28197,"byte_end":28264,"line_start":27,"line_end":27,"column_start":5,"column_end":72}},{"value":"/ represented by an `i8`, then `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":28269,"byte_end":28321,"line_start":28,"line_end":28,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":28326,"byte_end":28335,"line_start":29,"line_end":29,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":28591,"byte_end":28597,"line_start":37,"line_end":37,"column_start":8,"column_end":14},"name":"to_i16","qualname":"::cast::ToPrimitive::to_i16","value":"pub fn to_i16(&Self) -> Option<i16>","parent":{"krate":0,"index":307},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i16`. If the value cannot be\n represented by an `i16`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `i16`. If the value cannot be","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":28443,"byte_end":28511,"line_start":34,"line_end":34,"column_start":5,"column_end":73}},{"value":"/ represented by an `i16`, then `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":28516,"byte_end":28569,"line_start":35,"line_end":35,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":28574,"byte_end":28583,"line_start":36,"line_end":36,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":28842,"byte_end":28848,"line_start":44,"line_end":44,"column_start":8,"column_end":14},"name":"to_i32","qualname":"::cast::ToPrimitive::to_i32","value":"pub fn to_i32(&Self) -> Option<i32>","parent":{"krate":0,"index":307},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i32`. If the value cannot be\n represented by an `i32`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `i32`. If the value cannot be","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":28694,"byte_end":28762,"line_start":41,"line_end":41,"column_start":5,"column_end":73}},{"value":"/ represented by an `i32`, then `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":28767,"byte_end":28820,"line_start":42,"line_end":42,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":28825,"byte_end":28834,"line_start":43,"line_end":43,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":29079,"byte_end":29085,"line_start":50,"line_end":50,"column_start":8,"column_end":14},"name":"to_i64","qualname":"::cast::ToPrimitive::to_i64","value":"pub fn to_i64(&Self) -> Option<i64>","parent":{"krate":0,"index":307},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i64`. If the value cannot be\n represented by an `i64`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `i64`. If the value cannot be","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":28945,"byte_end":29013,"line_start":48,"line_end":48,"column_start":5,"column_end":73}},{"value":"/ represented by an `i64`, then `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":29018,"byte_end":29071,"line_start":49,"line_end":49,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":29602,"byte_end":29609,"line_start":62,"line_end":62,"column_start":8,"column_end":15},"name":"to_i128","qualname":"::cast::ToPrimitive::to_i128","value":"pub fn to_i128(&Self) -> Option<i128>","parent":{"krate":0,"index":307},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i128`. If the value cannot be\n represented by an `i128` (`i64` under the default implementation), then\n `None` is returned.","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `i128`. If the value cannot be","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":29114,"byte_end":29183,"line_start":52,"line_end":52,"column_start":5,"column_end":74}},{"value":"/ represented by an `i128` (`i64` under the default implementation), then","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":29188,"byte_end":29263,"line_start":53,"line_end":53,"column_start":5,"column_end":80}},{"value":"/ `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":29268,"byte_end":29291,"line_start":54,"line_end":54,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":29296,"byte_end":29299,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ This method is only available with feature `i128` enabled on Rust >= 1.26.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":29304,"byte_end":29382,"line_start":56,"line_end":56,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":29387,"byte_end":29390,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ The default implementation converts through `to_i64()`. Types implementing","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":29395,"byte_end":29473,"line_start":58,"line_end":58,"column_start":5,"column_end":83}},{"value":"/ this trait should override this method if they can represent a greater range.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":29478,"byte_end":29559,"line_start":59,"line_end":59,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":29564,"byte_end":29573,"line_start":60,"line_end":60,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":29578,"byte_end":29594,"line_start":61,"line_end":61,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":29834,"byte_end":29842,"line_start":69,"line_end":69,"column_start":8,"column_end":16},"name":"to_usize","qualname":"::cast::ToPrimitive::to_usize","value":"pub fn to_usize(&Self) -> Option<usize>","parent":{"krate":0,"index":307},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `usize`. If the value cannot be\n represented by a `usize`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to a `usize`. If the value cannot be","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":29684,"byte_end":29753,"line_start":66,"line_end":66,"column_start":5,"column_end":74}},{"value":"/ represented by a `usize`, then `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":29758,"byte_end":29812,"line_start":67,"line_end":67,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":29817,"byte_end":29826,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":30087,"byte_end":30092,"line_start":76,"line_end":76,"column_start":8,"column_end":13},"name":"to_u8","qualname":"::cast::ToPrimitive::to_u8","value":"pub fn to_u8(&Self) -> Option<u8>","parent":{"krate":0,"index":307},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `u8`. If the value cannot be\n represented by a `u8`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to a `u8`. If the value cannot be","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":29943,"byte_end":30009,"line_start":73,"line_end":73,"column_start":5,"column_end":71}},{"value":"/ represented by a `u8`, then `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":30014,"byte_end":30065,"line_start":74,"line_end":74,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":30070,"byte_end":30079,"line_start":75,"line_end":75,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":30333,"byte_end":30339,"line_start":83,"line_end":83,"column_start":8,"column_end":14},"name":"to_u16","qualname":"::cast::ToPrimitive::to_u16","value":"pub fn to_u16(&Self) -> Option<u16>","parent":{"krate":0,"index":307},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `u16`. If the value cannot be\n represented by a `u16`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to a `u16`. If the value cannot be","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":30187,"byte_end":30254,"line_start":80,"line_end":80,"column_start":5,"column_end":72}},{"value":"/ represented by a `u16`, then `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":30259,"byte_end":30311,"line_start":81,"line_end":81,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":30316,"byte_end":30325,"line_start":82,"line_end":82,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":30582,"byte_end":30588,"line_start":90,"line_end":90,"column_start":8,"column_end":14},"name":"to_u32","qualname":"::cast::ToPrimitive::to_u32","value":"pub fn to_u32(&Self) -> Option<u32>","parent":{"krate":0,"index":307},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `u32`. If the value cannot be\n represented by a `u32`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to a `u32`. If the value cannot be","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":30436,"byte_end":30503,"line_start":87,"line_end":87,"column_start":5,"column_end":72}},{"value":"/ represented by a `u32`, then `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":30508,"byte_end":30560,"line_start":88,"line_end":88,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":30565,"byte_end":30574,"line_start":89,"line_end":89,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":30817,"byte_end":30823,"line_start":96,"line_end":96,"column_start":8,"column_end":14},"name":"to_u64","qualname":"::cast::ToPrimitive::to_u64","value":"pub fn to_u64(&Self) -> Option<u64>","parent":{"krate":0,"index":307},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `u64`. If the value cannot be\n represented by a `u64`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to a `u64`. If the value cannot be","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":30685,"byte_end":30752,"line_start":94,"line_end":94,"column_start":5,"column_end":72}},{"value":"/ represented by a `u64`, then `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":30757,"byte_end":30809,"line_start":95,"line_end":95,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":31338,"byte_end":31345,"line_start":108,"line_end":108,"column_start":8,"column_end":15},"name":"to_u128","qualname":"::cast::ToPrimitive::to_u128","value":"pub fn to_u128(&Self) -> Option<u128>","parent":{"krate":0,"index":307},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `u128`. If the value cannot be\n represented by a `u128` (`u64` under the default implementation), then\n `None` is returned.","sig":null,"attributes":[{"value":"/ Converts the value of `self` to a `u128`. If the value cannot be","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":30852,"byte_end":30920,"line_start":98,"line_end":98,"column_start":5,"column_end":73}},{"value":"/ represented by a `u128` (`u64` under the default implementation), then","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":30925,"byte_end":30999,"line_start":99,"line_end":99,"column_start":5,"column_end":79}},{"value":"/ `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":31004,"byte_end":31027,"line_start":100,"line_end":100,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":31032,"byte_end":31035,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ This method is only available with feature `i128` enabled on Rust >= 1.26.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":31040,"byte_end":31118,"line_start":102,"line_end":102,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":31123,"byte_end":31126,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ The default implementation converts through `to_u64()`. Types implementing","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":31131,"byte_end":31209,"line_start":104,"line_end":104,"column_start":5,"column_end":83}},{"value":"/ this trait should override this method if they can represent a greater range.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":31214,"byte_end":31295,"line_start":105,"line_end":105,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":31300,"byte_end":31309,"line_start":106,"line_end":106,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":31314,"byte_end":31330,"line_start":107,"line_end":107,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":31633,"byte_end":31639,"line_start":116,"line_end":116,"column_start":8,"column_end":14},"name":"to_f32","qualname":"::cast::ToPrimitive::to_f32","value":"pub fn to_f32(&Self) -> Option<f32>","parent":{"krate":0,"index":307},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `f32`. Overflows may map to positive\n or negative inifinity, otherwise `None` is returned if the value cannot\n be represented by an `f32`.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `f32`. Overflows may map to positive","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":31420,"byte_end":31495,"line_start":112,"line_end":112,"column_start":5,"column_end":80}},{"value":"/ or negative inifinity, otherwise `None` is returned if the value cannot","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":31500,"byte_end":31575,"line_start":113,"line_end":113,"column_start":5,"column_end":80}},{"value":"/ be represented by an `f32`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":31580,"byte_end":31611,"line_start":114,"line_end":114,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":31616,"byte_end":31625,"line_start":115,"line_end":115,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":32179,"byte_end":32185,"line_start":128,"line_end":128,"column_start":8,"column_end":14},"name":"to_f64","qualname":"::cast::ToPrimitive::to_f64","value":"pub fn to_f64(&Self) -> Option<f64>","parent":{"krate":0,"index":307},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `f64`. Overflows may map to positive\n or negative inifinity, otherwise `None` is returned if the value cannot\n be represented by an `f64`.","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `f64`. Overflows may map to positive","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":31736,"byte_end":31811,"line_start":120,"line_end":120,"column_start":5,"column_end":80}},{"value":"/ or negative inifinity, otherwise `None` is returned if the value cannot","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":31816,"byte_end":31891,"line_start":121,"line_end":121,"column_start":5,"column_end":80}},{"value":"/ be represented by an `f64`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":31896,"byte_end":31927,"line_start":122,"line_end":122,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":31932,"byte_end":31935,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ The default implementation tries to convert through `to_i64()`, and","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":31940,"byte_end":32011,"line_start":124,"line_end":124,"column_start":5,"column_end":76}},{"value":"/ failing that through `to_u64()`. Types implementing this trait should","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":32016,"byte_end":32089,"line_start":125,"line_end":125,"column_start":5,"column_end":78}},{"value":"/ override this method if they can represent a greater range.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":32094,"byte_end":32157,"line_start":126,"line_end":126,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":32162,"byte_end":32171,"line_start":127,"line_end":127,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":333},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":41410,"byte_end":41423,"line_start":411,"line_end":411,"column_start":11,"column_end":24},"name":"FromPrimitive","qualname":"::cast::FromPrimitive","value":"FromPrimitive: Sized","parent":null,"children":[{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347}],"decl_id":null,"docs":" A generic trait for converting a number to a value.","sig":null,"attributes":[{"value":"/ A generic trait for converting a number to a value.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":40836,"byte_end":40891,"line_start":401,"line_end":401,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":40892,"byte_end":40895,"line_start":402,"line_end":402,"column_start":1,"column_end":4}},{"value":"/ A value can be represented by the target type when it lies within","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":40896,"byte_end":40965,"line_start":403,"line_end":403,"column_start":1,"column_end":70}},{"value":"/ the range of scalars supported by the target type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":40966,"byte_end":41020,"line_start":404,"line_end":404,"column_start":1,"column_end":55}},{"value":"/ For example, a negative integer cannot be represented by an unsigned","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":41021,"byte_end":41093,"line_start":405,"line_end":405,"column_start":1,"column_end":73}},{"value":"/ integer type, and an `i64` with a very high magnitude might not be","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":41094,"byte_end":41164,"line_start":406,"line_end":406,"column_start":1,"column_end":71}},{"value":"/ convertible to an `i32`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":41165,"byte_end":41193,"line_start":407,"line_end":407,"column_start":1,"column_end":29}},{"value":"/ On the other hand, conversions with possible precision loss or truncation","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":41194,"byte_end":41271,"line_start":408,"line_end":408,"column_start":1,"column_end":78}},{"value":"/ are admitted, like an `f32` with a decimal part to an integer type, or","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":41272,"byte_end":41346,"line_start":409,"line_end":409,"column_start":1,"column_end":75}},{"value":"/ even a large `f64` saturating to `f32` infinity.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":41347,"byte_end":41399,"line_start":410,"line_end":410,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":41606,"byte_end":41616,"line_start":415,"line_end":415,"column_start":8,"column_end":18},"name":"from_isize","qualname":"::cast::FromPrimitive::from_isize","value":"pub fn from_isize(isize) -> Option<Self>","parent":{"krate":0,"index":333},"children":[],"decl_id":null,"docs":" Converts an `isize` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `isize` to return an optional value of this type. If the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":41437,"byte_end":41509,"line_start":412,"line_end":412,"column_start":5,"column_end":77}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":41514,"byte_end":41584,"line_start":413,"line_end":413,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":41589,"byte_end":41598,"line_start":414,"line_end":414,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":41875,"byte_end":41882,"line_start":422,"line_end":422,"column_start":8,"column_end":15},"name":"from_i8","qualname":"::cast::FromPrimitive::from_i8","value":"pub fn from_i8(i8) -> Option<Self>","parent":{"krate":0,"index":333},"children":[],"decl_id":null,"docs":" Converts an `i8` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `i8` to return an optional value of this type. If the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":41709,"byte_end":41778,"line_start":419,"line_end":419,"column_start":5,"column_end":74}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":41783,"byte_end":41853,"line_start":420,"line_end":420,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":41858,"byte_end":41867,"line_start":421,"line_end":421,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":42133,"byte_end":42141,"line_start":429,"line_end":429,"column_start":8,"column_end":16},"name":"from_i16","qualname":"::cast::FromPrimitive::from_i16","value":"pub fn from_i16(i16) -> Option<Self>","parent":{"krate":0,"index":333},"children":[],"decl_id":null,"docs":" Converts an `i16` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `i16` to return an optional value of this type. If the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":41966,"byte_end":42036,"line_start":426,"line_end":426,"column_start":5,"column_end":75}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":42041,"byte_end":42111,"line_start":427,"line_end":427,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":42116,"byte_end":42125,"line_start":428,"line_end":428,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":42393,"byte_end":42401,"line_start":436,"line_end":436,"column_start":8,"column_end":16},"name":"from_i32","qualname":"::cast::FromPrimitive::from_i32","value":"pub fn from_i32(i32) -> Option<Self>","parent":{"krate":0,"index":333},"children":[],"decl_id":null,"docs":" Converts an `i32` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `i32` to return an optional value of this type. If the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":42226,"byte_end":42296,"line_start":433,"line_end":433,"column_start":5,"column_end":75}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":42301,"byte_end":42371,"line_start":434,"line_end":434,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":42376,"byte_end":42385,"line_start":435,"line_end":435,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":42639,"byte_end":42647,"line_start":442,"line_end":442,"column_start":8,"column_end":16},"name":"from_i64","qualname":"::cast::FromPrimitive::from_i64","value":"pub fn from_i64(i64) -> Option<Self>","parent":{"krate":0,"index":333},"children":[],"decl_id":null,"docs":" Converts an `i64` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `i64` to return an optional value of this type. If the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":42486,"byte_end":42556,"line_start":440,"line_end":440,"column_start":5,"column_end":75}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":42561,"byte_end":42631,"line_start":441,"line_end":441,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":43137,"byte_end":43146,"line_start":453,"line_end":453,"column_start":8,"column_end":17},"name":"from_i128","qualname":"::cast::FromPrimitive::from_i128","value":"pub fn from_i128(i128) -> Option<Self>","parent":{"krate":0,"index":333},"children":[],"decl_id":null,"docs":" Converts an `i128` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.","sig":null,"attributes":[{"value":"/ Converts an `i128` to return an optional value of this type. If the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":42678,"byte_end":42749,"line_start":444,"line_end":444,"column_start":5,"column_end":76}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":42754,"byte_end":42824,"line_start":445,"line_end":445,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":42829,"byte_end":42832,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ This method is only available with feature `i128` enabled on Rust >= 1.26.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":42837,"byte_end":42915,"line_start":447,"line_end":447,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":42920,"byte_end":42923,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ The default implementation converts through `from_i64()`. Types implementing","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":42928,"byte_end":43008,"line_start":449,"line_end":449,"column_start":5,"column_end":85}},{"value":"/ this trait should override this method if they can represent a greater range.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":43013,"byte_end":43094,"line_start":450,"line_end":450,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":43099,"byte_end":43108,"line_start":451,"line_end":451,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":43113,"byte_end":43129,"line_start":452,"line_end":452,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":43406,"byte_end":43416,"line_start":460,"line_end":460,"column_start":8,"column_end":18},"name":"from_usize","qualname":"::cast::FromPrimitive::from_usize","value":"pub fn from_usize(usize) -> Option<Self>","parent":{"krate":0,"index":333},"children":[],"decl_id":null,"docs":" Converts a `usize` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts a `usize` to return an optional value of this type. If the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":43238,"byte_end":43309,"line_start":457,"line_end":457,"column_start":5,"column_end":76}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":43314,"byte_end":43384,"line_start":458,"line_end":458,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":43389,"byte_end":43398,"line_start":459,"line_end":459,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":43675,"byte_end":43682,"line_start":467,"line_end":467,"column_start":8,"column_end":15},"name":"from_u8","qualname":"::cast::FromPrimitive::from_u8","value":"pub fn from_u8(u8) -> Option<Self>","parent":{"krate":0,"index":333},"children":[],"decl_id":null,"docs":" Converts an `u8` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `u8` to return an optional value of this type. If the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":43509,"byte_end":43578,"line_start":464,"line_end":464,"column_start":5,"column_end":74}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":43583,"byte_end":43653,"line_start":465,"line_end":465,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":43658,"byte_end":43667,"line_start":466,"line_end":466,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":43933,"byte_end":43941,"line_start":474,"line_end":474,"column_start":8,"column_end":16},"name":"from_u16","qualname":"::cast::FromPrimitive::from_u16","value":"pub fn from_u16(u16) -> Option<Self>","parent":{"krate":0,"index":333},"children":[],"decl_id":null,"docs":" Converts an `u16` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `u16` to return an optional value of this type. If the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":43766,"byte_end":43836,"line_start":471,"line_end":471,"column_start":5,"column_end":75}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":43841,"byte_end":43911,"line_start":472,"line_end":472,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":43916,"byte_end":43925,"line_start":473,"line_end":473,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":44193,"byte_end":44201,"line_start":481,"line_end":481,"column_start":8,"column_end":16},"name":"from_u32","qualname":"::cast::FromPrimitive::from_u32","value":"pub fn from_u32(u32) -> Option<Self>","parent":{"krate":0,"index":333},"children":[],"decl_id":null,"docs":" Converts an `u32` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `u32` to return an optional value of this type. If the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":44026,"byte_end":44096,"line_start":478,"line_end":478,"column_start":5,"column_end":75}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":44101,"byte_end":44171,"line_start":479,"line_end":479,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":44176,"byte_end":44185,"line_start":480,"line_end":480,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":44439,"byte_end":44447,"line_start":487,"line_end":487,"column_start":8,"column_end":16},"name":"from_u64","qualname":"::cast::FromPrimitive::from_u64","value":"pub fn from_u64(u64) -> Option<Self>","parent":{"krate":0,"index":333},"children":[],"decl_id":null,"docs":" Converts an `u64` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `u64` to return an optional value of this type. If the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":44286,"byte_end":44356,"line_start":485,"line_end":485,"column_start":5,"column_end":75}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":44361,"byte_end":44431,"line_start":486,"line_end":486,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":44937,"byte_end":44946,"line_start":498,"line_end":498,"column_start":8,"column_end":17},"name":"from_u128","qualname":"::cast::FromPrimitive::from_u128","value":"pub fn from_u128(u128) -> Option<Self>","parent":{"krate":0,"index":333},"children":[],"decl_id":null,"docs":" Converts an `u128` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.","sig":null,"attributes":[{"value":"/ Converts an `u128` to return an optional value of this type. If the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":44478,"byte_end":44549,"line_start":489,"line_end":489,"column_start":5,"column_end":76}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":44554,"byte_end":44624,"line_start":490,"line_end":490,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":44629,"byte_end":44632,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ This method is only available with feature `i128` enabled on Rust >= 1.26.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":44637,"byte_end":44715,"line_start":492,"line_end":492,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":44720,"byte_end":44723,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ The default implementation converts through `from_u64()`. Types implementing","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":44728,"byte_end":44808,"line_start":494,"line_end":494,"column_start":5,"column_end":85}},{"value":"/ this trait should override this method if they can represent a greater range.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":44813,"byte_end":44894,"line_start":495,"line_end":495,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":44899,"byte_end":44908,"line_start":496,"line_end":496,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":44913,"byte_end":44929,"line_start":497,"line_end":497,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":45204,"byte_end":45212,"line_start":505,"line_end":505,"column_start":8,"column_end":16},"name":"from_f32","qualname":"::cast::FromPrimitive::from_f32","value":"pub fn from_f32(f32) -> Option<Self>","parent":{"krate":0,"index":333},"children":[],"decl_id":null,"docs":" Converts a `f32` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts a `f32` to return an optional value of this type. If the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":45038,"byte_end":45107,"line_start":502,"line_end":502,"column_start":5,"column_end":74}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":45112,"byte_end":45182,"line_start":503,"line_end":503,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":45187,"byte_end":45196,"line_start":504,"line_end":504,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":45697,"byte_end":45705,"line_start":516,"line_end":516,"column_start":8,"column_end":16},"name":"from_f64","qualname":"::cast::FromPrimitive::from_f64","value":"pub fn from_f64(f64) -> Option<Self>","parent":{"krate":0,"index":333},"children":[],"decl_id":null,"docs":" Converts a `f64` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.","sig":null,"attributes":[{"value":"/ Converts a `f64` to return an optional value of this type. If the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":45297,"byte_end":45366,"line_start":509,"line_end":509,"column_start":5,"column_end":74}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":45371,"byte_end":45441,"line_start":510,"line_end":510,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":45446,"byte_end":45449,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ The default implementation tries to convert through `from_i64()`, and","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":45454,"byte_end":45527,"line_start":512,"line_end":512,"column_start":5,"column_end":78}},{"value":"/ failing that through `from_u64()`. Types implementing this trait should","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":45532,"byte_end":45607,"line_start":513,"line_end":513,"column_start":5,"column_end":80}},{"value":"/ override this method if they can represent a greater range.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":45612,"byte_end":45675,"line_start":514,"line_end":514,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":45680,"byte_end":45689,"line_start":515,"line_end":515,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":355},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":49951,"byte_end":49955,"line_start":686,"line_end":686,"column_start":8,"column_end":12},"name":"cast","qualname":"::cast::cast","value":"pub fn cast<T: NumCast, U: NumCast>(T) -> Option<U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one machine scalar to another.","sig":null,"attributes":[{"value":"/ Cast from one machine scalar to another.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":49738,"byte_end":49782,"line_start":675,"line_end":675,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":49783,"byte_end":49786,"line_start":676,"line_end":676,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":49787,"byte_end":49801,"line_start":677,"line_end":677,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":49802,"byte_end":49805,"line_start":678,"line_end":678,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":49806,"byte_end":49813,"line_start":679,"line_end":679,"column_start":1,"column_end":8}},{"value":"/ # use num_traits as num;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":49814,"byte_end":49842,"line_start":680,"line_end":680,"column_start":1,"column_end":29}},{"value":"/ let twenty: f32 = num::cast(0x14).unwrap();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":49843,"byte_end":49890,"line_start":681,"line_end":681,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(twenty, 20f32);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":49891,"byte_end":49921,"line_start":682,"line_end":682,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":49922,"byte_end":49929,"line_start":683,"line_end":683,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":49930,"byte_end":49933,"line_start":684,"line_end":684,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":49934,"byte_end":49943,"line_start":685,"line_end":685,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":358},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":50089,"byte_end":50096,"line_start":691,"line_end":691,"column_start":11,"column_end":18},"name":"NumCast","qualname":"::cast::NumCast","value":"NumCast: Sized + ToPrimitive","parent":null,"children":[{"krate":0,"index":359}],"decl_id":null,"docs":" An interface for casting between machine scalars.\n","sig":null,"attributes":[{"value":"/ An interface for casting between machine scalars.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":50025,"byte_end":50078,"line_start":690,"line_end":690,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":50886,"byte_end":50890,"line_start":704,"line_end":704,"column_start":8,"column_end":12},"name":"from","qualname":"::cast::NumCast::from","value":"pub fn from<T: ToPrimitive>(T) -> Option<Self>","parent":{"krate":0,"index":358},"children":[],"decl_id":null,"docs":" Creates a number from another value that can be converted into\n a primitive via the `ToPrimitive` trait. If the source value cannot be\n represented by the target type, then `None` is returned.","sig":null,"attributes":[{"value":"/ Creates a number from another value that can be converted into","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":50124,"byte_end":50190,"line_start":692,"line_end":692,"column_start":5,"column_end":71}},{"value":"/ a primitive via the `ToPrimitive` trait. If the source value cannot be","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":50195,"byte_end":50269,"line_start":693,"line_end":693,"column_start":5,"column_end":79}},{"value":"/ represented by the target type, then `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":50274,"byte_end":50334,"line_start":694,"line_end":694,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":50339,"byte_end":50342,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ A value can be represented by the target type when it lies within","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":50347,"byte_end":50416,"line_start":696,"line_end":696,"column_start":5,"column_end":74}},{"value":"/ the range of scalars supported by the target type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":50421,"byte_end":50475,"line_start":697,"line_end":697,"column_start":5,"column_end":59}},{"value":"/ For example, a negative integer cannot be represented by an unsigned","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":50480,"byte_end":50552,"line_start":698,"line_end":698,"column_start":5,"column_end":77}},{"value":"/ integer type, and an `i64` with a very high magnitude might not be","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":50557,"byte_end":50627,"line_start":699,"line_end":699,"column_start":5,"column_end":75}},{"value":"/ convertible to an `i32`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":50632,"byte_end":50660,"line_start":700,"line_end":700,"column_start":5,"column_end":33}},{"value":"/ On the other hand, conversions with possible precision loss or truncation","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":50665,"byte_end":50742,"line_start":701,"line_end":701,"column_start":5,"column_end":82}},{"value":"/ are admitted, like an `f32` with a decimal part to an integer type, or","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":50747,"byte_end":50821,"line_start":702,"line_end":702,"column_start":5,"column_end":79}},{"value":"/ even a large `f64` saturating to `f32` infinity.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":50826,"byte_end":50878,"line_start":703,"line_end":703,"column_start":5,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":366},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":52799,"byte_end":52810,"line_start":770,"line_end":770,"column_start":11,"column_end":22},"name":"AsPrimitive","qualname":"::cast::AsPrimitive","value":"AsPrimitive<T>: 'static + Copy","parent":null,"children":[{"krate":0,"index":368}],"decl_id":null,"docs":" A generic interface for casting between machine scalars with the\n `as` operator, which admits narrowing and precision loss.\n Implementers of this trait `AsPrimitive` should behave like a primitive\n numeric type (e.g. a newtype around another primitive), and the\n intended conversion must never fail.","sig":null,"attributes":[{"value":"/ A generic interface for casting between machine scalars with the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":51918,"byte_end":51986,"line_start":744,"line_end":744,"column_start":1,"column_end":69}},{"value":"/ `as` operator, which admits narrowing and precision loss.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":51987,"byte_end":52048,"line_start":745,"line_end":745,"column_start":1,"column_end":62}},{"value":"/ Implementers of this trait `AsPrimitive` should behave like a primitive","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":52049,"byte_end":52124,"line_start":746,"line_end":746,"column_start":1,"column_end":76}},{"value":"/ numeric type (e.g. a newtype around another primitive), and the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":52125,"byte_end":52192,"line_start":747,"line_end":747,"column_start":1,"column_end":68}},{"value":"/ intended conversion must never fail.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":52193,"byte_end":52233,"line_start":748,"line_end":748,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":52234,"byte_end":52237,"line_start":749,"line_end":749,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":52238,"byte_end":52252,"line_start":750,"line_end":750,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":52253,"byte_end":52256,"line_start":751,"line_end":751,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":52257,"byte_end":52264,"line_start":752,"line_end":752,"column_start":1,"column_end":8}},{"value":"/ # use num_traits::AsPrimitive;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":52265,"byte_end":52299,"line_start":753,"line_end":753,"column_start":1,"column_end":35}},{"value":"/ let three: i32 = (3.14159265f32).as_();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":52300,"byte_end":52343,"line_start":754,"line_end":754,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(three, 3);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":52344,"byte_end":52369,"line_start":755,"line_end":755,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":52370,"byte_end":52377,"line_start":756,"line_end":756,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":52378,"byte_end":52381,"line_start":757,"line_end":757,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":52382,"byte_end":52394,"line_start":758,"line_end":758,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":52395,"byte_end":52398,"line_start":759,"line_end":759,"column_start":1,"column_end":4}},{"value":"/ **In Rust versions before 1.45.0**, some uses of the `as` operator were not entirely safe.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":52399,"byte_end":52493,"line_start":760,"line_end":760,"column_start":1,"column_end":95}},{"value":"/ In particular, it was undefined behavior if","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":52494,"byte_end":52541,"line_start":761,"line_end":761,"column_start":1,"column_end":48}},{"value":"/ a truncated floating point value could not fit in the target integer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":52542,"byte_end":52614,"line_start":762,"line_end":762,"column_start":1,"column_end":73}},{"value":"/ type ([#10184](https://github.com/rust-lang/rust/issues/10184)).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":52615,"byte_end":52683,"line_start":763,"line_end":763,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":52684,"byte_end":52687,"line_start":764,"line_end":764,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":52688,"byte_end":52701,"line_start":765,"line_end":765,"column_start":1,"column_end":14}},{"value":"/ # use num_traits::AsPrimitive;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":52702,"byte_end":52736,"line_start":766,"line_end":766,"column_start":1,"column_end":35}},{"value":"/ let x: u8 = (1.04E+17).as_(); // UB","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":52737,"byte_end":52776,"line_start":767,"line_end":767,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":52777,"byte_end":52784,"line_start":768,"line_end":768,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":52785,"byte_end":52788,"line_start":769,"line_end":769,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":52929,"byte_end":52932,"line_start":775,"line_end":775,"column_start":8,"column_end":11},"name":"as_","qualname":"::cast::AsPrimitive::as_","value":"pub fn as_(Self) -> T","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Convert a value to another, using the `as` operator.\n","sig":null,"attributes":[{"value":"/ Convert a value to another, using the `as` operator.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":52865,"byte_end":52921,"line_start":774,"line_end":774,"column_start":5,"column_end":61}}]},{"kind":"Mod","id":{"krate":0,"index":370},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"float","qualname":"::float","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","parent":null,"children":[{"krate":0,"index":371},{"krate":0,"index":374},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":381},{"krate":0,"index":384},{"krate":0,"index":387},{"krate":0,"index":390},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":397},{"krate":0,"index":400},{"krate":0,"index":403},{"krate":0,"index":433},{"krate":0,"index":443},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":2232},{"krate":0,"index":2252},{"krate":0,"index":2272}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":403},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":54658,"byte_end":54667,"line_start":16,"line_end":16,"column_start":11,"column_end":20},"name":"FloatCore","qualname":"::float::FloatCore","value":"FloatCore: Num + NumCast + Neg<Output = Self> + PartialOrd + Copy","parent":null,"children":[{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432}],"decl_id":null,"docs":" Generic trait for floating point numbers that works with `no_std`.","sig":null,"attributes":[{"value":"/ Generic trait for floating point numbers that works with `no_std`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":54516,"byte_end":54586,"line_start":13,"line_end":13,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":54587,"byte_end":54590,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This trait implements a subset of the `Float` trait.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":54591,"byte_end":54647,"line_start":15,"line_end":15,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55064,"byte_end":55072,"line_start":32,"line_end":32,"column_start":8,"column_end":16},"name":"infinity","qualname":"::float::FloatCore::infinity","value":"pub fn infinity() -> Self","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Returns positive infinity.","sig":null,"attributes":[{"value":"/ Returns positive infinity.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":54730,"byte_end":54760,"line_start":17,"line_end":17,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":54765,"byte_end":54768,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":54773,"byte_end":54787,"line_start":19,"line_end":19,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":54792,"byte_end":54795,"line_start":20,"line_end":20,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":54800,"byte_end":54807,"line_start":21,"line_end":21,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":54812,"byte_end":54849,"line_start":22,"line_end":22,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":54854,"byte_end":54878,"line_start":23,"line_end":23,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":54883,"byte_end":54886,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":54891,"byte_end":54925,"line_start":25,"line_end":25,"column_start":5,"column_end":39}},{"value":"/     assert!(T::infinity() == x);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":54930,"byte_end":54966,"line_start":26,"line_end":26,"column_start":5,"column_end":41}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":54971,"byte_end":54976,"line_start":27,"line_end":27,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":54981,"byte_end":54984,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":54989,"byte_end":55014,"line_start":29,"line_end":29,"column_start":5,"column_end":30}},{"value":"/ check(f64::INFINITY);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55019,"byte_end":55044,"line_start":30,"line_end":30,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55049,"byte_end":55056,"line_start":31,"line_end":31,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55435,"byte_end":55447,"line_start":49,"line_end":49,"column_start":8,"column_end":20},"name":"neg_infinity","qualname":"::float::FloatCore::neg_infinity","value":"pub fn neg_infinity() -> Self","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Returns negative infinity.","sig":null,"attributes":[{"value":"/ Returns negative infinity.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55089,"byte_end":55119,"line_start":34,"line_end":34,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55124,"byte_end":55127,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55132,"byte_end":55146,"line_start":36,"line_end":36,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55151,"byte_end":55154,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55159,"byte_end":55166,"line_start":38,"line_end":38,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55171,"byte_end":55208,"line_start":39,"line_end":39,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55213,"byte_end":55237,"line_start":40,"line_end":40,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55242,"byte_end":55245,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55250,"byte_end":55284,"line_start":42,"line_end":42,"column_start":5,"column_end":39}},{"value":"/     assert!(T::neg_infinity() == x);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55289,"byte_end":55329,"line_start":43,"line_end":43,"column_start":5,"column_end":45}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55334,"byte_end":55339,"line_start":44,"line_end":44,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55344,"byte_end":55347,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ check(f32::NEG_INFINITY);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55352,"byte_end":55381,"line_start":46,"line_end":46,"column_start":5,"column_end":34}},{"value":"/ check(f64::NEG_INFINITY);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55386,"byte_end":55415,"line_start":47,"line_end":47,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55420,"byte_end":55427,"line_start":48,"line_end":48,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55757,"byte_end":55760,"line_start":66,"line_end":66,"column_start":8,"column_end":11},"name":"nan","qualname":"::float::FloatCore::nan","value":"pub fn nan() -> Self","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Returns NaN.","sig":null,"attributes":[{"value":"/ Returns NaN.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55464,"byte_end":55480,"line_start":51,"line_end":51,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55485,"byte_end":55488,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55493,"byte_end":55507,"line_start":53,"line_end":53,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55512,"byte_end":55515,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55520,"byte_end":55527,"line_start":55,"line_end":55,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55532,"byte_end":55569,"line_start":56,"line_end":56,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55574,"byte_end":55577,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>() {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55582,"byte_end":55612,"line_start":58,"line_end":58,"column_start":5,"column_end":35}},{"value":"/     let n = T::nan();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55617,"byte_end":55642,"line_start":59,"line_end":59,"column_start":5,"column_end":30}},{"value":"/     assert!(n != n);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55647,"byte_end":55671,"line_start":60,"line_end":60,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55676,"byte_end":55681,"line_start":61,"line_end":61,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55686,"byte_end":55689,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ check::<f32>();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55694,"byte_end":55713,"line_start":63,"line_end":63,"column_start":5,"column_end":24}},{"value":"/ check::<f64>();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55718,"byte_end":55737,"line_start":64,"line_end":64,"column_start":5,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55742,"byte_end":55749,"line_start":65,"line_end":65,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56176,"byte_end":56184,"line_start":85,"line_end":85,"column_start":8,"column_end":16},"name":"neg_zero","qualname":"::float::FloatCore::neg_zero","value":"pub fn neg_zero() -> Self","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Returns `-0.0`.","sig":null,"attributes":[{"value":"/ Returns `-0.0`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55777,"byte_end":55796,"line_start":68,"line_end":68,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55801,"byte_end":55804,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55809,"byte_end":55823,"line_start":70,"line_end":70,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55828,"byte_end":55831,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55836,"byte_end":55843,"line_start":72,"line_end":72,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55848,"byte_end":55885,"line_start":73,"line_end":73,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55890,"byte_end":55914,"line_start":74,"line_end":74,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55919,"byte_end":55922,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(n: T) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55927,"byte_end":55961,"line_start":76,"line_end":76,"column_start":5,"column_end":39}},{"value":"/     let z = T::neg_zero();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":55966,"byte_end":55996,"line_start":77,"line_end":77,"column_start":5,"column_end":35}},{"value":"/     assert!(z.is_zero());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56001,"byte_end":56030,"line_start":78,"line_end":78,"column_start":5,"column_end":34}},{"value":"/     assert!(T::one() / z == n);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56035,"byte_end":56070,"line_start":79,"line_end":79,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56075,"byte_end":56080,"line_start":80,"line_end":80,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56085,"byte_end":56088,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ check(f32::NEG_INFINITY);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56093,"byte_end":56122,"line_start":82,"line_end":82,"column_start":5,"column_end":34}},{"value":"/ check(f64::NEG_INFINITY);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56127,"byte_end":56156,"line_start":83,"line_end":83,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56161,"byte_end":56168,"line_start":84,"line_end":84,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56563,"byte_end":56572,"line_start":102,"line_end":102,"column_start":8,"column_end":17},"name":"min_value","qualname":"::float::FloatCore::min_value","value":"pub fn min_value() -> Self","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Returns the smallest finite value that this type can represent.","sig":null,"attributes":[{"value":"/ Returns the smallest finite value that this type can represent.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56201,"byte_end":56268,"line_start":87,"line_end":87,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56273,"byte_end":56276,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56281,"byte_end":56295,"line_start":89,"line_end":89,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56300,"byte_end":56303,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56308,"byte_end":56315,"line_start":91,"line_end":91,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56320,"byte_end":56357,"line_start":92,"line_end":92,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56362,"byte_end":56386,"line_start":93,"line_end":93,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56391,"byte_end":56394,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56399,"byte_end":56433,"line_start":95,"line_end":95,"column_start":5,"column_end":39}},{"value":"/     assert!(T::min_value() == x);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56438,"byte_end":56475,"line_start":96,"line_end":96,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56480,"byte_end":56485,"line_start":97,"line_end":97,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56490,"byte_end":56493,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ check(f32::MIN);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56498,"byte_end":56518,"line_start":99,"line_end":99,"column_start":5,"column_end":25}},{"value":"/ check(f64::MIN);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56523,"byte_end":56543,"line_start":100,"line_end":100,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56548,"byte_end":56555,"line_start":101,"line_end":101,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56992,"byte_end":57010,"line_start":119,"line_end":119,"column_start":8,"column_end":26},"name":"min_positive_value","qualname":"::float::FloatCore::min_positive_value","value":"pub fn min_positive_value() -> Self","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Returns the smallest positive, normalized value that this type can represent.","sig":null,"attributes":[{"value":"/ Returns the smallest positive, normalized value that this type can represent.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56589,"byte_end":56670,"line_start":104,"line_end":104,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56675,"byte_end":56678,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56683,"byte_end":56697,"line_start":106,"line_end":106,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56702,"byte_end":56705,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56710,"byte_end":56717,"line_start":108,"line_end":108,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56722,"byte_end":56759,"line_start":109,"line_end":109,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56764,"byte_end":56788,"line_start":110,"line_end":110,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56793,"byte_end":56796,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56801,"byte_end":56835,"line_start":112,"line_end":112,"column_start":5,"column_end":39}},{"value":"/     assert!(T::min_positive_value() == x);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56840,"byte_end":56886,"line_start":113,"line_end":113,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56891,"byte_end":56896,"line_start":114,"line_end":114,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56901,"byte_end":56904,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ check(f32::MIN_POSITIVE);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56909,"byte_end":56938,"line_start":116,"line_end":116,"column_start":5,"column_end":34}},{"value":"/ check(f64::MIN_POSITIVE);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56943,"byte_end":56972,"line_start":117,"line_end":117,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":56977,"byte_end":56984,"line_start":118,"line_end":118,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57372,"byte_end":57379,"line_start":136,"line_end":136,"column_start":8,"column_end":15},"name":"epsilon","qualname":"::float::FloatCore::epsilon","value":"pub fn epsilon() -> Self","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Returns epsilon, a small positive value.","sig":null,"attributes":[{"value":"/ Returns epsilon, a small positive value.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57027,"byte_end":57071,"line_start":121,"line_end":121,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57076,"byte_end":57079,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57084,"byte_end":57098,"line_start":123,"line_end":123,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57103,"byte_end":57106,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57111,"byte_end":57118,"line_start":125,"line_end":125,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57123,"byte_end":57160,"line_start":126,"line_end":126,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57165,"byte_end":57189,"line_start":127,"line_end":127,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57194,"byte_end":57197,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57202,"byte_end":57236,"line_start":129,"line_end":129,"column_start":5,"column_end":39}},{"value":"/     assert!(T::epsilon() == x);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57241,"byte_end":57276,"line_start":130,"line_end":130,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57281,"byte_end":57286,"line_start":131,"line_end":131,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57291,"byte_end":57294,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ check(f32::EPSILON);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57299,"byte_end":57323,"line_start":133,"line_end":133,"column_start":5,"column_end":29}},{"value":"/ check(f64::EPSILON);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57328,"byte_end":57352,"line_start":134,"line_end":134,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57357,"byte_end":57364,"line_start":135,"line_end":135,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57757,"byte_end":57766,"line_start":153,"line_end":153,"column_start":8,"column_end":17},"name":"max_value","qualname":"::float::FloatCore::max_value","value":"pub fn max_value() -> Self","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Returns the largest finite value that this type can represent.","sig":null,"attributes":[{"value":"/ Returns the largest finite value that this type can represent.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57396,"byte_end":57462,"line_start":138,"line_end":138,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57467,"byte_end":57470,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57475,"byte_end":57489,"line_start":140,"line_end":140,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57494,"byte_end":57497,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57502,"byte_end":57509,"line_start":142,"line_end":142,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57514,"byte_end":57551,"line_start":143,"line_end":143,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57556,"byte_end":57580,"line_start":144,"line_end":144,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57585,"byte_end":57588,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57593,"byte_end":57627,"line_start":146,"line_end":146,"column_start":5,"column_end":39}},{"value":"/     assert!(T::max_value() == x);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57632,"byte_end":57669,"line_start":147,"line_end":147,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57674,"byte_end":57679,"line_start":148,"line_end":148,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57684,"byte_end":57687,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ check(f32::MAX);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57692,"byte_end":57712,"line_start":150,"line_end":150,"column_start":5,"column_end":25}},{"value":"/ check(f64::MAX);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57717,"byte_end":57737,"line_start":151,"line_end":151,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57742,"byte_end":57749,"line_start":152,"line_end":152,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58216,"byte_end":58222,"line_start":173,"line_end":173,"column_start":8,"column_end":14},"name":"is_nan","qualname":"::float::FloatCore::is_nan","value":"pub fn is_nan(Self) -> bool","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Returns `true` if the number is NaN.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is NaN.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57783,"byte_end":57823,"line_start":155,"line_end":155,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57828,"byte_end":57831,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57836,"byte_end":57850,"line_start":157,"line_end":157,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57855,"byte_end":57858,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57863,"byte_end":57870,"line_start":159,"line_end":159,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57875,"byte_end":57912,"line_start":160,"line_end":160,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57917,"byte_end":57941,"line_start":161,"line_end":161,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57946,"byte_end":57949,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, p: bool) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":57954,"byte_end":57997,"line_start":163,"line_end":163,"column_start":5,"column_end":48}},{"value":"/     assert!(x.is_nan() == p);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58002,"byte_end":58035,"line_start":164,"line_end":164,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58040,"byte_end":58045,"line_start":165,"line_end":165,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58050,"byte_end":58053,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ check(f32::NAN, true);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58058,"byte_end":58084,"line_start":167,"line_end":167,"column_start":5,"column_end":31}},{"value":"/ check(f32::INFINITY, false);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58089,"byte_end":58121,"line_start":168,"line_end":168,"column_start":5,"column_end":37}},{"value":"/ check(f64::NAN, true);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58126,"byte_end":58152,"line_start":169,"line_end":169,"column_start":5,"column_end":31}},{"value":"/ check(0.0f64, false);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58157,"byte_end":58182,"line_start":170,"line_end":170,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58187,"byte_end":58194,"line_start":171,"line_end":171,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58199,"byte_end":58208,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58799,"byte_end":58810,"line_start":197,"line_end":197,"column_start":8,"column_end":19},"name":"is_infinite","qualname":"::float::FloatCore::is_infinite","value":"pub fn is_infinite(Self) -> bool","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Returns `true` if the number is infinite.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is infinite.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58271,"byte_end":58316,"line_start":177,"line_end":177,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58321,"byte_end":58324,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58329,"byte_end":58343,"line_start":179,"line_end":179,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58348,"byte_end":58351,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58356,"byte_end":58363,"line_start":181,"line_end":181,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58368,"byte_end":58405,"line_start":182,"line_end":182,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58410,"byte_end":58434,"line_start":183,"line_end":183,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58439,"byte_end":58442,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, p: bool) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58447,"byte_end":58490,"line_start":185,"line_end":185,"column_start":5,"column_end":48}},{"value":"/     assert!(x.is_infinite() == p);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58495,"byte_end":58533,"line_start":186,"line_end":186,"column_start":5,"column_end":43}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58538,"byte_end":58543,"line_start":187,"line_end":187,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58548,"byte_end":58551,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, true);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58556,"byte_end":58587,"line_start":189,"line_end":189,"column_start":5,"column_end":36}},{"value":"/ check(f32::NEG_INFINITY, true);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58592,"byte_end":58627,"line_start":190,"line_end":190,"column_start":5,"column_end":40}},{"value":"/ check(f32::NAN, false);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58632,"byte_end":58659,"line_start":191,"line_end":191,"column_start":5,"column_end":32}},{"value":"/ check(f64::INFINITY, true);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58664,"byte_end":58695,"line_start":192,"line_end":192,"column_start":5,"column_end":36}},{"value":"/ check(f64::NEG_INFINITY, true);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58700,"byte_end":58735,"line_start":193,"line_end":193,"column_start":5,"column_end":40}},{"value":"/ check(0.0f64, false);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58740,"byte_end":58765,"line_start":194,"line_end":194,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58770,"byte_end":58777,"line_start":195,"line_end":195,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58782,"byte_end":58791,"line_start":196,"line_end":196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59411,"byte_end":59420,"line_start":220,"line_end":220,"column_start":8,"column_end":17},"name":"is_finite","qualname":"::float::FloatCore::is_finite","value":"pub fn is_finite(Self) -> bool","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither infinite or NaN.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is neither infinite or NaN.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58903,"byte_end":58963,"line_start":201,"line_end":201,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58968,"byte_end":58971,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58976,"byte_end":58990,"line_start":203,"line_end":203,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":58995,"byte_end":58998,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59003,"byte_end":59010,"line_start":205,"line_end":205,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59015,"byte_end":59052,"line_start":206,"line_end":206,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59057,"byte_end":59081,"line_start":207,"line_end":207,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59086,"byte_end":59089,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, p: bool) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59094,"byte_end":59137,"line_start":209,"line_end":209,"column_start":5,"column_end":48}},{"value":"/     assert!(x.is_finite() == p);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59142,"byte_end":59178,"line_start":210,"line_end":210,"column_start":5,"column_end":41}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59183,"byte_end":59188,"line_start":211,"line_end":211,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59193,"byte_end":59196,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, false);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59201,"byte_end":59233,"line_start":213,"line_end":213,"column_start":5,"column_end":37}},{"value":"/ check(f32::MAX, true);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59238,"byte_end":59264,"line_start":214,"line_end":214,"column_start":5,"column_end":31}},{"value":"/ check(f64::NEG_INFINITY, false);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59269,"byte_end":59305,"line_start":215,"line_end":215,"column_start":5,"column_end":41}},{"value":"/ check(f64::MIN_POSITIVE, true);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59310,"byte_end":59345,"line_start":216,"line_end":216,"column_start":5,"column_end":40}},{"value":"/ check(f64::NAN, false);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59350,"byte_end":59377,"line_start":217,"line_end":217,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59382,"byte_end":59389,"line_start":218,"line_end":218,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59394,"byte_end":59403,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":60018,"byte_end":60027,"line_start":243,"line_end":243,"column_start":8,"column_end":17},"name":"is_normal","qualname":"::float::FloatCore::is_normal","value":"pub fn is_normal(Self) -> bool","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither zero, infinite, subnormal or NaN.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is neither zero, infinite, subnormal or NaN.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59495,"byte_end":59572,"line_start":224,"line_end":224,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59577,"byte_end":59580,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59585,"byte_end":59599,"line_start":226,"line_end":226,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59604,"byte_end":59607,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59612,"byte_end":59619,"line_start":228,"line_end":228,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59624,"byte_end":59661,"line_start":229,"line_end":229,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59666,"byte_end":59690,"line_start":230,"line_end":230,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59695,"byte_end":59698,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, p: bool) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59703,"byte_end":59746,"line_start":232,"line_end":232,"column_start":5,"column_end":48}},{"value":"/     assert!(x.is_normal() == p);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59751,"byte_end":59787,"line_start":233,"line_end":233,"column_start":5,"column_end":41}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59792,"byte_end":59797,"line_start":234,"line_end":234,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59802,"byte_end":59805,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, false);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59810,"byte_end":59842,"line_start":236,"line_end":236,"column_start":5,"column_end":37}},{"value":"/ check(f32::MAX, true);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59847,"byte_end":59873,"line_start":237,"line_end":237,"column_start":5,"column_end":31}},{"value":"/ check(f64::NEG_INFINITY, false);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59878,"byte_end":59914,"line_start":238,"line_end":238,"column_start":5,"column_end":41}},{"value":"/ check(f64::MIN_POSITIVE, true);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59919,"byte_end":59954,"line_start":239,"line_end":239,"column_start":5,"column_end":40}},{"value":"/ check(0.0f64, false);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59959,"byte_end":59984,"line_start":240,"line_end":240,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":59989,"byte_end":59996,"line_start":241,"line_end":241,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":60001,"byte_end":60010,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":60866,"byte_end":60874,"line_start":269,"line_end":269,"column_start":8,"column_end":16},"name":"classify","qualname":"::float::FloatCore::classify","value":"pub fn classify(Self) -> FpCategory","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Returns the floating point category of the number. If only one property\n is going to be tested, it is generally faster to use the specific\n predicate instead.","sig":null,"attributes":[{"value":"/ Returns the floating point category of the number. If only one property","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":60101,"byte_end":60176,"line_start":247,"line_end":247,"column_start":5,"column_end":80}},{"value":"/ is going to be tested, it is generally faster to use the specific","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":60181,"byte_end":60250,"line_start":248,"line_end":248,"column_start":5,"column_end":74}},{"value":"/ predicate instead.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":60255,"byte_end":60277,"line_start":249,"line_end":249,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":60282,"byte_end":60285,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":60290,"byte_end":60304,"line_start":251,"line_end":251,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":60309,"byte_end":60312,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":60317,"byte_end":60324,"line_start":253,"line_end":253,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":60329,"byte_end":60366,"line_start":254,"line_end":254,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":60371,"byte_end":60395,"line_start":255,"line_end":255,"column_start":5,"column_end":29}},{"value":"/ use std::num::FpCategory;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":60400,"byte_end":60429,"line_start":256,"line_end":256,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":60434,"byte_end":60437,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, c: FpCategory) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":60442,"byte_end":60491,"line_start":258,"line_end":258,"column_start":5,"column_end":54}},{"value":"/     assert!(x.classify() == c);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":60496,"byte_end":60531,"line_start":259,"line_end":259,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":60536,"byte_end":60541,"line_start":260,"line_end":260,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":60546,"byte_end":60549,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, FpCategory::Infinite);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":60554,"byte_end":60601,"line_start":262,"line_end":262,"column_start":5,"column_end":52}},{"value":"/ check(f32::MAX, FpCategory::Normal);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":60606,"byte_end":60646,"line_start":263,"line_end":263,"column_start":5,"column_end":45}},{"value":"/ check(f64::NAN, FpCategory::Nan);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":60651,"byte_end":60688,"line_start":264,"line_end":264,"column_start":5,"column_end":42}},{"value":"/ check(f64::MIN_POSITIVE, FpCategory::Normal);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":60693,"byte_end":60742,"line_start":265,"line_end":265,"column_start":5,"column_end":54}},{"value":"/ check(f64::MIN_POSITIVE / 2.0, FpCategory::Subnormal);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":60747,"byte_end":60805,"line_start":266,"line_end":266,"column_start":5,"column_end":63}},{"value":"/ check(0.0f64, FpCategory::Zero);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":60810,"byte_end":60846,"line_start":267,"line_end":267,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":60851,"byte_end":60858,"line_start":268,"line_end":268,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":417},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":61507,"byte_end":61512,"line_start":294,"line_end":294,"column_start":8,"column_end":13},"name":"floor","qualname":"::float::FloatCore::floor","value":"pub fn floor(Self) -> Self","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to a number.","sig":null,"attributes":[{"value":"/ Returns the largest integer less than or equal to a number.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":60901,"byte_end":60964,"line_start":271,"line_end":271,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":60969,"byte_end":60972,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":60977,"byte_end":60991,"line_start":273,"line_end":273,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":60996,"byte_end":60999,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":61004,"byte_end":61011,"line_start":275,"line_end":275,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":61016,"byte_end":61053,"line_start":276,"line_end":276,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":61058,"byte_end":61082,"line_start":277,"line_end":277,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":61087,"byte_end":61090,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":61095,"byte_end":61135,"line_start":279,"line_end":279,"column_start":5,"column_end":45}},{"value":"/     assert!(x.floor() == y);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":61140,"byte_end":61172,"line_start":280,"line_end":280,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":61177,"byte_end":61182,"line_start":281,"line_end":281,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":61187,"byte_end":61190,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, f32::INFINITY);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":61195,"byte_end":61235,"line_start":283,"line_end":283,"column_start":5,"column_end":45}},{"value":"/ check(0.9f32, 0.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":61240,"byte_end":61263,"line_start":284,"line_end":284,"column_start":5,"column_end":28}},{"value":"/ check(1.0f32, 1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":61268,"byte_end":61291,"line_start":285,"line_end":285,"column_start":5,"column_end":28}},{"value":"/ check(1.1f32, 1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":61296,"byte_end":61319,"line_start":286,"line_end":286,"column_start":5,"column_end":28}},{"value":"/ check(-0.0f64, 0.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":61324,"byte_end":61348,"line_start":287,"line_end":287,"column_start":5,"column_end":29}},{"value":"/ check(-0.9f64, -1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":61353,"byte_end":61378,"line_start":288,"line_end":288,"column_start":5,"column_end":30}},{"value":"/ check(-1.0f64, -1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":61383,"byte_end":61408,"line_start":289,"line_end":289,"column_start":5,"column_end":30}},{"value":"/ check(-1.1f64, -2.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":61413,"byte_end":61438,"line_start":290,"line_end":290,"column_start":5,"column_end":30}},{"value":"/ check(f64::MIN, f64::MIN);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":61443,"byte_end":61473,"line_start":291,"line_end":291,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":61478,"byte_end":61485,"line_start":292,"line_end":292,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":61490,"byte_end":61499,"line_start":293,"line_end":293,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":62358,"byte_end":62362,"line_start":328,"line_end":328,"column_start":8,"column_end":12},"name":"ceil","qualname":"::float::FloatCore::ceil","value":"pub fn ceil(Self) -> Self","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to a number.","sig":null,"attributes":[{"value":"/ Returns the smallest integer greater than or equal to a number.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":61749,"byte_end":61816,"line_start":305,"line_end":305,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":61821,"byte_end":61824,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":61829,"byte_end":61843,"line_start":307,"line_end":307,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":61848,"byte_end":61851,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":61856,"byte_end":61863,"line_start":309,"line_end":309,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":61868,"byte_end":61905,"line_start":310,"line_end":310,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":61910,"byte_end":61934,"line_start":311,"line_end":311,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":61939,"byte_end":61942,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":61947,"byte_end":61987,"line_start":313,"line_end":313,"column_start":5,"column_end":45}},{"value":"/     assert!(x.ceil() == y);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":61992,"byte_end":62023,"line_start":314,"line_end":314,"column_start":5,"column_end":36}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":62028,"byte_end":62033,"line_start":315,"line_end":315,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":62038,"byte_end":62041,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, f32::INFINITY);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":62046,"byte_end":62086,"line_start":317,"line_end":317,"column_start":5,"column_end":45}},{"value":"/ check(0.9f32, 1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":62091,"byte_end":62114,"line_start":318,"line_end":318,"column_start":5,"column_end":28}},{"value":"/ check(1.0f32, 1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":62119,"byte_end":62142,"line_start":319,"line_end":319,"column_start":5,"column_end":28}},{"value":"/ check(1.1f32, 2.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":62147,"byte_end":62170,"line_start":320,"line_end":320,"column_start":5,"column_end":28}},{"value":"/ check(-0.0f64, 0.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":62175,"byte_end":62199,"line_start":321,"line_end":321,"column_start":5,"column_end":29}},{"value":"/ check(-0.9f64, -0.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":62204,"byte_end":62229,"line_start":322,"line_end":322,"column_start":5,"column_end":30}},{"value":"/ check(-1.0f64, -1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":62234,"byte_end":62259,"line_start":323,"line_end":323,"column_start":5,"column_end":30}},{"value":"/ check(-1.1f64, -1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":62264,"byte_end":62289,"line_start":324,"line_end":324,"column_start":5,"column_end":30}},{"value":"/ check(f64::MIN, f64::MIN);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":62294,"byte_end":62324,"line_start":325,"line_end":325,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":62329,"byte_end":62336,"line_start":326,"line_end":326,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":62341,"byte_end":62350,"line_start":327,"line_end":327,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":63194,"byte_end":63199,"line_start":361,"line_end":361,"column_start":8,"column_end":13},"name":"round","qualname":"::float::FloatCore::round","value":"pub fn round(Self) -> Self","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Returns the nearest integer to a number. Round half-way cases away from `0.0`.","sig":null,"attributes":[{"value":"/ Returns the nearest integer to a number. Round half-way cases away from `0.0`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":62599,"byte_end":62681,"line_start":339,"line_end":339,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":62686,"byte_end":62689,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":62694,"byte_end":62708,"line_start":341,"line_end":341,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":62713,"byte_end":62716,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":62721,"byte_end":62728,"line_start":343,"line_end":343,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":62733,"byte_end":62770,"line_start":344,"line_end":344,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":62775,"byte_end":62799,"line_start":345,"line_end":345,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":62804,"byte_end":62807,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":62812,"byte_end":62852,"line_start":347,"line_end":347,"column_start":5,"column_end":45}},{"value":"/     assert!(x.round() == y);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":62857,"byte_end":62889,"line_start":348,"line_end":348,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":62894,"byte_end":62899,"line_start":349,"line_end":349,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":62904,"byte_end":62907,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, f32::INFINITY);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":62912,"byte_end":62952,"line_start":351,"line_end":351,"column_start":5,"column_end":45}},{"value":"/ check(0.4f32, 0.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":62957,"byte_end":62980,"line_start":352,"line_end":352,"column_start":5,"column_end":28}},{"value":"/ check(0.5f32, 1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":62985,"byte_end":63008,"line_start":353,"line_end":353,"column_start":5,"column_end":28}},{"value":"/ check(0.6f32, 1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":63013,"byte_end":63036,"line_start":354,"line_end":354,"column_start":5,"column_end":28}},{"value":"/ check(-0.4f64, 0.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":63041,"byte_end":63065,"line_start":355,"line_end":355,"column_start":5,"column_end":29}},{"value":"/ check(-0.5f64, -1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":63070,"byte_end":63095,"line_start":356,"line_end":356,"column_start":5,"column_end":30}},{"value":"/ check(-0.6f64, -1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":63100,"byte_end":63125,"line_start":357,"line_end":357,"column_start":5,"column_end":30}},{"value":"/ check(f64::MIN, f64::MIN);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":63130,"byte_end":63160,"line_start":358,"line_end":358,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":63165,"byte_end":63172,"line_start":359,"line_end":359,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":63177,"byte_end":63186,"line_start":360,"line_end":360,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64290,"byte_end":64295,"line_start":405,"line_end":405,"column_start":8,"column_end":13},"name":"trunc","qualname":"::float::FloatCore::trunc","value":"pub fn trunc(Self) -> Self","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Return the integer part of a number.","sig":null,"attributes":[{"value":"/ Return the integer part of a number.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":63707,"byte_end":63747,"line_start":382,"line_end":382,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":63752,"byte_end":63755,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":63760,"byte_end":63774,"line_start":384,"line_end":384,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":63779,"byte_end":63782,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":63787,"byte_end":63794,"line_start":386,"line_end":386,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":63799,"byte_end":63836,"line_start":387,"line_end":387,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":63841,"byte_end":63865,"line_start":388,"line_end":388,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":63870,"byte_end":63873,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":63878,"byte_end":63918,"line_start":390,"line_end":390,"column_start":5,"column_end":45}},{"value":"/     assert!(x.trunc() == y);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":63923,"byte_end":63955,"line_start":391,"line_end":391,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":63960,"byte_end":63965,"line_start":392,"line_end":392,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":63970,"byte_end":63973,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, f32::INFINITY);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":63978,"byte_end":64018,"line_start":394,"line_end":394,"column_start":5,"column_end":45}},{"value":"/ check(0.9f32, 0.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64023,"byte_end":64046,"line_start":395,"line_end":395,"column_start":5,"column_end":28}},{"value":"/ check(1.0f32, 1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64051,"byte_end":64074,"line_start":396,"line_end":396,"column_start":5,"column_end":28}},{"value":"/ check(1.1f32, 1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64079,"byte_end":64102,"line_start":397,"line_end":397,"column_start":5,"column_end":28}},{"value":"/ check(-0.0f64, 0.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64107,"byte_end":64131,"line_start":398,"line_end":398,"column_start":5,"column_end":29}},{"value":"/ check(-0.9f64, -0.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64136,"byte_end":64161,"line_start":399,"line_end":399,"column_start":5,"column_end":30}},{"value":"/ check(-1.0f64, -1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64166,"byte_end":64191,"line_start":400,"line_end":400,"column_start":5,"column_end":30}},{"value":"/ check(-1.1f64, -1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64196,"byte_end":64221,"line_start":401,"line_end":401,"column_start":5,"column_end":30}},{"value":"/ check(f64::MIN, f64::MIN);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64226,"byte_end":64256,"line_start":402,"line_end":402,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64261,"byte_end":64268,"line_start":403,"line_end":403,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64273,"byte_end":64282,"line_start":404,"line_end":404,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":421},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":65016,"byte_end":65021,"line_start":437,"line_end":437,"column_start":8,"column_end":13},"name":"fract","qualname":"::float::FloatCore::fract","value":"pub fn fract(Self) -> Self","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Returns the fractional part of a number.","sig":null,"attributes":[{"value":"/ Returns the fractional part of a number.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64442,"byte_end":64486,"line_start":414,"line_end":414,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64491,"byte_end":64494,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64499,"byte_end":64513,"line_start":416,"line_end":416,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64518,"byte_end":64521,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64526,"byte_end":64533,"line_start":418,"line_end":418,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64538,"byte_end":64575,"line_start":419,"line_end":419,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64580,"byte_end":64604,"line_start":420,"line_end":420,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64609,"byte_end":64612,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64617,"byte_end":64657,"line_start":422,"line_end":422,"column_start":5,"column_end":45}},{"value":"/     assert!(x.fract() == y);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64662,"byte_end":64694,"line_start":423,"line_end":423,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64699,"byte_end":64704,"line_start":424,"line_end":424,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64709,"byte_end":64712,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ check(f32::MAX, 0.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64717,"byte_end":64742,"line_start":426,"line_end":426,"column_start":5,"column_end":30}},{"value":"/ check(0.75f32, 0.75);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64747,"byte_end":64772,"line_start":427,"line_end":427,"column_start":5,"column_end":30}},{"value":"/ check(1.0f32, 0.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64777,"byte_end":64800,"line_start":428,"line_end":428,"column_start":5,"column_end":28}},{"value":"/ check(1.25f32, 0.25);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64805,"byte_end":64830,"line_start":429,"line_end":429,"column_start":5,"column_end":30}},{"value":"/ check(-0.0f64, 0.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64835,"byte_end":64859,"line_start":430,"line_end":430,"column_start":5,"column_end":29}},{"value":"/ check(-0.75f64, -0.75);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64864,"byte_end":64891,"line_start":431,"line_end":431,"column_start":5,"column_end":32}},{"value":"/ check(-1.0f64, 0.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64896,"byte_end":64920,"line_start":432,"line_end":432,"column_start":5,"column_end":29}},{"value":"/ check(-1.25f64, -0.25);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64925,"byte_end":64952,"line_start":433,"line_end":433,"column_start":5,"column_end":32}},{"value":"/ check(f64::MIN, 0.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64957,"byte_end":64982,"line_start":434,"line_end":434,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64987,"byte_end":64994,"line_start":435,"line_end":435,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":64999,"byte_end":65008,"line_start":436,"line_end":436,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":65726,"byte_end":65729,"line_start":466,"line_end":466,"column_start":8,"column_end":11},"name":"abs","qualname":"::float::FloatCore::abs","value":"pub fn abs(Self) -> Self","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Computes the absolute value of `self`. Returns `FloatCore::nan()` if the\n number is `FloatCore::nan()`.","sig":null,"attributes":[{"value":"/ Computes the absolute value of `self`. Returns `FloatCore::nan()` if the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":65160,"byte_end":65236,"line_start":445,"line_end":445,"column_start":5,"column_end":81}},{"value":"/ number is `FloatCore::nan()`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":65241,"byte_end":65274,"line_start":446,"line_end":446,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":65279,"byte_end":65282,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":65287,"byte_end":65301,"line_start":448,"line_end":448,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":65306,"byte_end":65309,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":65314,"byte_end":65321,"line_start":450,"line_end":450,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":65326,"byte_end":65363,"line_start":451,"line_end":451,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":65368,"byte_end":65392,"line_start":452,"line_end":452,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":65397,"byte_end":65400,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":65405,"byte_end":65445,"line_start":454,"line_end":454,"column_start":5,"column_end":45}},{"value":"/     assert!(x.abs() == y);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":65450,"byte_end":65480,"line_start":455,"line_end":455,"column_start":5,"column_end":35}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":65485,"byte_end":65490,"line_start":456,"line_end":456,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":65495,"byte_end":65498,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, f32::INFINITY);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":65503,"byte_end":65543,"line_start":458,"line_end":458,"column_start":5,"column_end":45}},{"value":"/ check(1.0f32, 1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":65548,"byte_end":65571,"line_start":459,"line_end":459,"column_start":5,"column_end":28}},{"value":"/ check(0.0f64, 0.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":65576,"byte_end":65599,"line_start":460,"line_end":460,"column_start":5,"column_end":28}},{"value":"/ check(-0.0f64, 0.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":65604,"byte_end":65628,"line_start":461,"line_end":461,"column_start":5,"column_end":29}},{"value":"/ check(-1.0f64, 1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":65633,"byte_end":65657,"line_start":462,"line_end":462,"column_start":5,"column_end":29}},{"value":"/ check(f64::MIN, f64::MAX);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":65662,"byte_end":65692,"line_start":463,"line_end":463,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":65697,"byte_end":65704,"line_start":464,"line_end":464,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":65709,"byte_end":65718,"line_start":465,"line_end":465,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":66653,"byte_end":66659,"line_start":500,"line_end":500,"column_start":8,"column_end":14},"name":"signum","qualname":"::float::FloatCore::signum","value":"pub fn signum(Self) -> Self","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Returns a number that represents the sign of `self`.","sig":null,"attributes":[{"value":"/ Returns a number that represents the sign of `self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":65922,"byte_end":65978,"line_start":476,"line_end":476,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":65983,"byte_end":65986,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ - `1.0` if the number is positive, `+0.0` or `FloatCore::infinity()`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":65991,"byte_end":66063,"line_start":478,"line_end":478,"column_start":5,"column_end":77}},{"value":"/ - `-1.0` if the number is negative, `-0.0` or `FloatCore::neg_infinity()`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":66068,"byte_end":66145,"line_start":479,"line_end":479,"column_start":5,"column_end":82}},{"value":"/ - `FloatCore::nan()` if the number is `FloatCore::nan()`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":66150,"byte_end":66210,"line_start":480,"line_end":480,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":66215,"byte_end":66218,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":66223,"byte_end":66237,"line_start":482,"line_end":482,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":66242,"byte_end":66245,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":66250,"byte_end":66257,"line_start":484,"line_end":484,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":66262,"byte_end":66299,"line_start":485,"line_end":485,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":66304,"byte_end":66328,"line_start":486,"line_end":486,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":66333,"byte_end":66336,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":66341,"byte_end":66381,"line_start":488,"line_end":488,"column_start":5,"column_end":45}},{"value":"/     assert!(x.signum() == y);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":66386,"byte_end":66419,"line_start":489,"line_end":489,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":66424,"byte_end":66429,"line_start":490,"line_end":490,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":66434,"byte_end":66437,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, 1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":66442,"byte_end":66472,"line_start":492,"line_end":492,"column_start":5,"column_end":35}},{"value":"/ check(3.0f32, 1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":66477,"byte_end":66500,"line_start":493,"line_end":493,"column_start":5,"column_end":28}},{"value":"/ check(0.0f32, 1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":66505,"byte_end":66528,"line_start":494,"line_end":494,"column_start":5,"column_end":28}},{"value":"/ check(-0.0f64, -1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":66533,"byte_end":66558,"line_start":495,"line_end":495,"column_start":5,"column_end":30}},{"value":"/ check(-3.0f64, -1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":66563,"byte_end":66588,"line_start":496,"line_end":496,"column_start":5,"column_end":30}},{"value":"/ check(f64::MIN, -1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":66593,"byte_end":66619,"line_start":497,"line_end":497,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":66624,"byte_end":66631,"line_start":498,"line_end":498,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":66636,"byte_end":66645,"line_start":499,"line_end":499,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67521,"byte_end":67537,"line_start":533,"line_end":533,"column_start":8,"column_end":24},"name":"is_sign_positive","qualname":"::float::FloatCore::is_sign_positive","value":"pub fn is_sign_positive(Self) -> bool","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is positive, including `+0.0` and\n `FloatCore::infinity()`, and since Rust 1.20 also\n `FloatCore::nan()`.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is positive, including `+0.0` and","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":66858,"byte_end":66920,"line_start":510,"line_end":510,"column_start":5,"column_end":67}},{"value":"/ `FloatCore::infinity()`, and since Rust 1.20 also","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":66925,"byte_end":66978,"line_start":511,"line_end":511,"column_start":5,"column_end":58}},{"value":"/ `FloatCore::nan()`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":66983,"byte_end":67006,"line_start":512,"line_end":512,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67011,"byte_end":67014,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67019,"byte_end":67033,"line_start":514,"line_end":514,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67038,"byte_end":67041,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67046,"byte_end":67053,"line_start":516,"line_end":516,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67058,"byte_end":67095,"line_start":517,"line_end":517,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67100,"byte_end":67124,"line_start":518,"line_end":518,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67129,"byte_end":67132,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, p: bool) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67137,"byte_end":67180,"line_start":520,"line_end":520,"column_start":5,"column_end":48}},{"value":"/     assert!(x.is_sign_positive() == p);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67185,"byte_end":67228,"line_start":521,"line_end":521,"column_start":5,"column_end":48}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67233,"byte_end":67238,"line_start":522,"line_end":522,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67243,"byte_end":67246,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, true);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67251,"byte_end":67282,"line_start":524,"line_end":524,"column_start":5,"column_end":36}},{"value":"/ check(f32::MAX, true);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67287,"byte_end":67313,"line_start":525,"line_end":525,"column_start":5,"column_end":31}},{"value":"/ check(0.0f32, true);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67318,"byte_end":67342,"line_start":526,"line_end":526,"column_start":5,"column_end":29}},{"value":"/ check(-0.0f64, false);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67347,"byte_end":67373,"line_start":527,"line_end":527,"column_start":5,"column_end":31}},{"value":"/ check(f64::NEG_INFINITY, false);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67378,"byte_end":67414,"line_start":528,"line_end":528,"column_start":5,"column_end":41}},{"value":"/ check(f64::MIN_POSITIVE, true);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67419,"byte_end":67454,"line_start":529,"line_end":529,"column_start":5,"column_end":40}},{"value":"/ check(-f64::NAN, false);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67459,"byte_end":67487,"line_start":530,"line_end":530,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67492,"byte_end":67499,"line_start":531,"line_end":531,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67504,"byte_end":67513,"line_start":532,"line_end":532,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":68267,"byte_end":68283,"line_start":560,"line_end":560,"column_start":8,"column_end":24},"name":"is_sign_negative","qualname":"::float::FloatCore::is_sign_negative","value":"pub fn is_sign_negative(Self) -> bool","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is negative, including `-0.0` and\n `FloatCore::neg_infinity()`, and since Rust 1.20 also\n `-FloatCore::nan()`.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is negative, including `-0.0` and","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67598,"byte_end":67660,"line_start":537,"line_end":537,"column_start":5,"column_end":67}},{"value":"/ `FloatCore::neg_infinity()`, and since Rust 1.20 also","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67665,"byte_end":67722,"line_start":538,"line_end":538,"column_start":5,"column_end":62}},{"value":"/ `-FloatCore::nan()`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67727,"byte_end":67751,"line_start":539,"line_end":539,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67756,"byte_end":67759,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67764,"byte_end":67778,"line_start":541,"line_end":541,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67783,"byte_end":67786,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67791,"byte_end":67798,"line_start":543,"line_end":543,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67803,"byte_end":67840,"line_start":544,"line_end":544,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67845,"byte_end":67869,"line_start":545,"line_end":545,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67874,"byte_end":67877,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, p: bool) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67882,"byte_end":67925,"line_start":547,"line_end":547,"column_start":5,"column_end":48}},{"value":"/     assert!(x.is_sign_negative() == p);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67930,"byte_end":67973,"line_start":548,"line_end":548,"column_start":5,"column_end":48}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67978,"byte_end":67983,"line_start":549,"line_end":549,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67988,"byte_end":67991,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, false);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":67996,"byte_end":68028,"line_start":551,"line_end":551,"column_start":5,"column_end":37}},{"value":"/ check(f32::MAX, false);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":68033,"byte_end":68060,"line_start":552,"line_end":552,"column_start":5,"column_end":32}},{"value":"/ check(0.0f32, false);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":68065,"byte_end":68090,"line_start":553,"line_end":553,"column_start":5,"column_end":30}},{"value":"/ check(-0.0f64, true);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":68095,"byte_end":68120,"line_start":554,"line_end":554,"column_start":5,"column_end":30}},{"value":"/ check(f64::NEG_INFINITY, true);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":68125,"byte_end":68160,"line_start":555,"line_end":555,"column_start":5,"column_end":40}},{"value":"/ check(f64::MIN_POSITIVE, false);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":68165,"byte_end":68201,"line_start":556,"line_end":556,"column_start":5,"column_end":41}},{"value":"/ check(f64::NAN, false);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":68206,"byte_end":68233,"line_start":557,"line_end":557,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":68238,"byte_end":68245,"line_start":558,"line_end":558,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":68250,"byte_end":68259,"line_start":559,"line_end":559,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":68916,"byte_end":68919,"line_start":585,"line_end":585,"column_start":8,"column_end":11},"name":"min","qualname":"::float::FloatCore::min","value":"pub fn min(Self, Self) -> Self","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Returns the minimum of the two numbers.","sig":null,"attributes":[{"value":"/ Returns the minimum of the two numbers.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":68378,"byte_end":68421,"line_start":565,"line_end":565,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":68426,"byte_end":68429,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ If one of the arguments is NaN, then the other argument is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":68434,"byte_end":68506,"line_start":567,"line_end":567,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":68511,"byte_end":68514,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":68519,"byte_end":68533,"line_start":569,"line_end":569,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":68538,"byte_end":68541,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":68546,"byte_end":68553,"line_start":571,"line_end":571,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":68558,"byte_end":68595,"line_start":572,"line_end":572,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":68600,"byte_end":68624,"line_start":573,"line_end":573,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":68629,"byte_end":68632,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T, min: T) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":68637,"byte_end":68685,"line_start":575,"line_end":575,"column_start":5,"column_end":53}},{"value":"/     assert!(x.min(y) == min);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":68690,"byte_end":68723,"line_start":576,"line_end":576,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":68728,"byte_end":68733,"line_start":577,"line_end":577,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":68738,"byte_end":68741,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ check(1.0f32, 2.0, 1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":68746,"byte_end":68774,"line_start":579,"line_end":579,"column_start":5,"column_end":33}},{"value":"/ check(f32::NAN, 2.0, 2.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":68779,"byte_end":68809,"line_start":580,"line_end":580,"column_start":5,"column_end":35}},{"value":"/ check(1.0f64, -2.0, -2.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":68814,"byte_end":68844,"line_start":581,"line_end":581,"column_start":5,"column_end":35}},{"value":"/ check(1.0f64, f64::NAN, 1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":68849,"byte_end":68882,"line_start":582,"line_end":582,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":68887,"byte_end":68894,"line_start":583,"line_end":583,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":68899,"byte_end":68908,"line_start":584,"line_end":584,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":69716,"byte_end":69719,"line_start":619,"line_end":619,"column_start":8,"column_end":11},"name":"max","qualname":"::float::FloatCore::max","value":"pub fn max(Self, Self) -> Self","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Returns the maximum of the two numbers.","sig":null,"attributes":[{"value":"/ Returns the maximum of the two numbers.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":69174,"byte_end":69217,"line_start":599,"line_end":599,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":69222,"byte_end":69225,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ If one of the arguments is NaN, then the other argument is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":69230,"byte_end":69302,"line_start":601,"line_end":601,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":69307,"byte_end":69310,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":69315,"byte_end":69329,"line_start":603,"line_end":603,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":69334,"byte_end":69337,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":69342,"byte_end":69349,"line_start":605,"line_end":605,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":69354,"byte_end":69391,"line_start":606,"line_end":606,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":69396,"byte_end":69420,"line_start":607,"line_end":607,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":69425,"byte_end":69428,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T, max: T) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":69433,"byte_end":69481,"line_start":609,"line_end":609,"column_start":5,"column_end":53}},{"value":"/     assert!(x.max(y) == max);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":69486,"byte_end":69519,"line_start":610,"line_end":610,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":69524,"byte_end":69529,"line_start":611,"line_end":611,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":69534,"byte_end":69537,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ check(1.0f32, 2.0, 2.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":69542,"byte_end":69570,"line_start":613,"line_end":613,"column_start":5,"column_end":33}},{"value":"/ check(1.0f32, f32::NAN, 1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":69575,"byte_end":69608,"line_start":614,"line_end":614,"column_start":5,"column_end":38}},{"value":"/ check(-1.0f64, 2.0, 2.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":69613,"byte_end":69642,"line_start":615,"line_end":615,"column_start":5,"column_end":34}},{"value":"/ check(-1.0f64, f64::NAN, -1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":69647,"byte_end":69682,"line_start":616,"line_end":616,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":69687,"byte_end":69694,"line_start":617,"line_end":617,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":69699,"byte_end":69708,"line_start":618,"line_end":618,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70474,"byte_end":70479,"line_start":652,"line_end":652,"column_start":8,"column_end":13},"name":"recip","qualname":"::float::FloatCore::recip","value":"pub fn recip(Self) -> Self","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Returns the reciprocal (multiplicative inverse) of the number.","sig":null,"attributes":[{"value":"/ Returns the reciprocal (multiplicative inverse) of the number.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":69974,"byte_end":70040,"line_start":633,"line_end":633,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70045,"byte_end":70048,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70053,"byte_end":70067,"line_start":635,"line_end":635,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70072,"byte_end":70075,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70080,"byte_end":70087,"line_start":637,"line_end":637,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70092,"byte_end":70129,"line_start":638,"line_end":638,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70134,"byte_end":70158,"line_start":639,"line_end":639,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70163,"byte_end":70166,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70171,"byte_end":70211,"line_start":641,"line_end":641,"column_start":5,"column_end":45}},{"value":"/     assert!(x.recip() == y);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70216,"byte_end":70248,"line_start":642,"line_end":642,"column_start":5,"column_end":37}},{"value":"/     assert!(y.recip() == x);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70253,"byte_end":70285,"line_start":643,"line_end":643,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70290,"byte_end":70295,"line_start":644,"line_end":644,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70300,"byte_end":70303,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, 0.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70308,"byte_end":70338,"line_start":646,"line_end":646,"column_start":5,"column_end":35}},{"value":"/ check(2.0f32, 0.5);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70343,"byte_end":70366,"line_start":647,"line_end":647,"column_start":5,"column_end":28}},{"value":"/ check(-0.25f64, -4.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70371,"byte_end":70397,"line_start":648,"line_end":648,"column_start":5,"column_end":31}},{"value":"/ check(-0.0f64, f64::NEG_INFINITY);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70402,"byte_end":70440,"line_start":649,"line_end":649,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70445,"byte_end":70452,"line_start":650,"line_end":650,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70457,"byte_end":70466,"line_start":651,"line_end":651,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":71073,"byte_end":71077,"line_start":676,"line_end":676,"column_start":8,"column_end":12},"name":"powi","qualname":"::float::FloatCore::powi","value":"pub fn powi(Self, i32) -> Self","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Raise a number to an integer power.","sig":null,"attributes":[{"value":"/ Raise a number to an integer power.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70534,"byte_end":70573,"line_start":656,"line_end":656,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70578,"byte_end":70581,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ Using this function is generally faster than using `powf`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70586,"byte_end":70647,"line_start":658,"line_end":658,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70652,"byte_end":70655,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70660,"byte_end":70674,"line_start":660,"line_end":660,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70679,"byte_end":70682,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70687,"byte_end":70694,"line_start":662,"line_end":662,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70699,"byte_end":70736,"line_start":663,"line_end":663,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70741,"byte_end":70744,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, exp: i32, powi: T) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70749,"byte_end":70802,"line_start":665,"line_end":665,"column_start":5,"column_end":58}},{"value":"/     assert!(x.powi(exp) == powi);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70807,"byte_end":70844,"line_start":666,"line_end":666,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70849,"byte_end":70854,"line_start":667,"line_end":667,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70859,"byte_end":70862,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ check(9.0f32, 2, 81.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70867,"byte_end":70894,"line_start":669,"line_end":669,"column_start":5,"column_end":32}},{"value":"/ check(1.0f32, -2, 1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70899,"byte_end":70926,"line_start":670,"line_end":670,"column_start":5,"column_end":32}},{"value":"/ check(10.0f64, 20, 1e20);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70931,"byte_end":70960,"line_start":671,"line_end":671,"column_start":5,"column_end":34}},{"value":"/ check(4.0f64, -2, 0.0625);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":70965,"byte_end":70995,"line_start":672,"line_end":672,"column_start":5,"column_end":35}},{"value":"/ check(-1.0f64, std::i32::MIN, 1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":71000,"byte_end":71039,"line_start":673,"line_end":673,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":71044,"byte_end":71051,"line_start":674,"line_end":674,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":71056,"byte_end":71065,"line_start":675,"line_end":675,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":71994,"byte_end":72004,"line_start":704,"line_end":704,"column_start":8,"column_end":18},"name":"to_degrees","qualname":"::float::FloatCore::to_degrees","value":"pub fn to_degrees(Self) -> Self","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Converts to degrees, assuming the number is in radians.","sig":null,"attributes":[{"value":"/ Converts to degrees, assuming the number is in radians.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":71519,"byte_end":71578,"line_start":687,"line_end":687,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":71583,"byte_end":71586,"line_start":688,"line_end":688,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":71591,"byte_end":71605,"line_start":689,"line_end":689,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":71610,"byte_end":71613,"line_start":690,"line_end":690,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":71618,"byte_end":71625,"line_start":691,"line_end":691,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":71630,"byte_end":71667,"line_start":692,"line_end":692,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":71672,"byte_end":71696,"line_start":693,"line_end":693,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":71701,"byte_end":71704,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(rad: T, deg: T) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":71709,"byte_end":71753,"line_start":695,"line_end":695,"column_start":5,"column_end":49}},{"value":"/     assert!(rad.to_degrees() == deg);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":71758,"byte_end":71799,"line_start":696,"line_end":696,"column_start":5,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":71804,"byte_end":71809,"line_start":697,"line_end":697,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":71814,"byte_end":71817,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ check(0.0f32, 0.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":71822,"byte_end":71845,"line_start":699,"line_end":699,"column_start":5,"column_end":28}},{"value":"/ check(f32::consts::PI, 180.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":71850,"byte_end":71884,"line_start":700,"line_end":700,"column_start":5,"column_end":39}},{"value":"/ check(f64::consts::FRAC_PI_4, 45.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":71889,"byte_end":71929,"line_start":701,"line_end":701,"column_start":5,"column_end":45}},{"value":"/ check(f64::INFINITY, f64::INFINITY);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":71934,"byte_end":71974,"line_start":702,"line_end":702,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":71979,"byte_end":71986,"line_start":703,"line_end":703,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72500,"byte_end":72510,"line_start":723,"line_end":723,"column_start":8,"column_end":18},"name":"to_radians","qualname":"::float::FloatCore::to_radians","value":"pub fn to_radians(Self) -> Self","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Converts to radians, assuming the number is in degrees.","sig":null,"attributes":[{"value":"/ Converts to radians, assuming the number is in degrees.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72025,"byte_end":72084,"line_start":706,"line_end":706,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72089,"byte_end":72092,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72097,"byte_end":72111,"line_start":708,"line_end":708,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72116,"byte_end":72119,"line_start":709,"line_end":709,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72124,"byte_end":72131,"line_start":710,"line_end":710,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72136,"byte_end":72173,"line_start":711,"line_end":711,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72178,"byte_end":72202,"line_start":712,"line_end":712,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72207,"byte_end":72210,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(deg: T, rad: T) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72215,"byte_end":72259,"line_start":714,"line_end":714,"column_start":5,"column_end":49}},{"value":"/     assert!(deg.to_radians() == rad);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72264,"byte_end":72305,"line_start":715,"line_end":715,"column_start":5,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72310,"byte_end":72315,"line_start":716,"line_end":716,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72320,"byte_end":72323,"line_start":717,"line_end":717,"column_start":5,"column_end":8}},{"value":"/ check(0.0f32, 0.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72328,"byte_end":72351,"line_start":718,"line_end":718,"column_start":5,"column_end":28}},{"value":"/ check(180.0, f32::consts::PI);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72356,"byte_end":72390,"line_start":719,"line_end":719,"column_start":5,"column_end":39}},{"value":"/ check(45.0, f64::consts::FRAC_PI_4);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72395,"byte_end":72435,"line_start":720,"line_end":720,"column_start":5,"column_end":45}},{"value":"/ check(f64::INFINITY, f64::INFINITY);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72440,"byte_end":72480,"line_start":721,"line_end":721,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72485,"byte_end":72492,"line_start":722,"line_end":722,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":73269,"byte_end":73283,"line_start":746,"line_end":746,"column_start":8,"column_end":22},"name":"integer_decode","qualname":"::float::FloatCore::integer_decode","value":"pub fn integer_decode(Self) -> (u64, i16, i8)","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Returns the mantissa, base 2 exponent, and sign as integers, respectively.\n The original number can be recovered by `sign * mantissa * 2 ^ exponent`.","sig":null,"attributes":[{"value":"/ Returns the mantissa, base 2 exponent, and sign as integers, respectively.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72531,"byte_end":72609,"line_start":725,"line_end":725,"column_start":5,"column_end":83}},{"value":"/ The original number can be recovered by `sign * mantissa * 2 ^ exponent`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72614,"byte_end":72691,"line_start":726,"line_end":726,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72696,"byte_end":72699,"line_start":727,"line_end":727,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72704,"byte_end":72718,"line_start":728,"line_end":728,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72723,"byte_end":72726,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72731,"byte_end":72738,"line_start":730,"line_end":730,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72743,"byte_end":72780,"line_start":731,"line_end":731,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72785,"byte_end":72809,"line_start":732,"line_end":732,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72814,"byte_end":72817,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, m: u64, e: i16, s:i8) {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72822,"byte_end":72878,"line_start":734,"line_end":734,"column_start":5,"column_end":61}},{"value":"/     let (mantissa, exponent, sign) = x.integer_decode();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72883,"byte_end":72943,"line_start":735,"line_end":735,"column_start":5,"column_end":65}},{"value":"/     assert_eq!(mantissa, m);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72948,"byte_end":72980,"line_start":736,"line_end":736,"column_start":5,"column_end":37}},{"value":"/     assert_eq!(exponent, e);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":72985,"byte_end":73017,"line_start":737,"line_end":737,"column_start":5,"column_end":37}},{"value":"/     assert_eq!(sign, s);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":73022,"byte_end":73050,"line_start":738,"line_end":738,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":73055,"byte_end":73060,"line_start":739,"line_end":739,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":73065,"byte_end":73068,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ check(2.0f32, 1 << 23, -22, 1);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":73073,"byte_end":73108,"line_start":741,"line_end":741,"column_start":5,"column_end":40}},{"value":"/ check(-2.0f32, 1 << 23, -22, -1);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":73113,"byte_end":73150,"line_start":742,"line_end":742,"column_start":5,"column_end":42}},{"value":"/ check(f32::INFINITY, 1 << 23, 105, 1);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":73155,"byte_end":73197,"line_start":743,"line_end":743,"column_start":5,"column_end":47}},{"value":"/ check(f64::NEG_INFINITY, 1 << 52, 972, -1);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":73202,"byte_end":73249,"line_start":744,"line_end":744,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":73254,"byte_end":73261,"line_start":745,"line_end":745,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2233},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":115110,"byte_end":115111,"line_start":2198,"line_end":2198,"column_start":5,"column_end":6},"name":"E","qualname":"::float::FloatConst::E","value":"pub fn E() -> Self","parent":{"krate":0,"index":2232},"children":[],"decl_id":null,"docs":"Return Euler’s number.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2234},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":115151,"byte_end":115160,"line_start":2200,"line_end":2200,"column_start":5,"column_end":14},"name":"FRAC_1_PI","qualname":"::float::FloatConst::FRAC_1_PI","value":"pub fn FRAC_1_PI() -> Self","parent":{"krate":0,"index":2232},"children":[],"decl_id":null,"docs":"Return `1.0 / π`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2235},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":115207,"byte_end":115220,"line_start":2202,"line_end":2202,"column_start":5,"column_end":18},"name":"FRAC_1_SQRT_2","qualname":"::float::FloatConst::FRAC_1_SQRT_2","value":"pub fn FRAC_1_SQRT_2() -> Self","parent":{"krate":0,"index":2232},"children":[],"decl_id":null,"docs":"Return `1.0 / sqrt(2.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2236},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":115260,"byte_end":115269,"line_start":2204,"line_end":2204,"column_start":5,"column_end":14},"name":"FRAC_2_PI","qualname":"::float::FloatConst::FRAC_2_PI","value":"pub fn FRAC_2_PI() -> Self","parent":{"krate":0,"index":2232},"children":[],"decl_id":null,"docs":"Return `2.0 / π`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2237},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":115315,"byte_end":115329,"line_start":2206,"line_end":2206,"column_start":5,"column_end":19},"name":"FRAC_2_SQRT_PI","qualname":"::float::FloatConst::FRAC_2_SQRT_PI","value":"pub fn FRAC_2_SQRT_PI() -> Self","parent":{"krate":0,"index":2232},"children":[],"decl_id":null,"docs":"Return `2.0 / sqrt(π)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2238},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":115369,"byte_end":115378,"line_start":2208,"line_end":2208,"column_start":5,"column_end":14},"name":"FRAC_PI_2","qualname":"::float::FloatConst::FRAC_PI_2","value":"pub fn FRAC_PI_2() -> Self","parent":{"krate":0,"index":2232},"children":[],"decl_id":null,"docs":"Return `π / 2.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2239},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":115418,"byte_end":115427,"line_start":2210,"line_end":2210,"column_start":5,"column_end":14},"name":"FRAC_PI_3","qualname":"::float::FloatConst::FRAC_PI_3","value":"pub fn FRAC_PI_3() -> Self","parent":{"krate":0,"index":2232},"children":[],"decl_id":null,"docs":"Return `π / 3.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2240},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":115467,"byte_end":115476,"line_start":2212,"line_end":2212,"column_start":5,"column_end":14},"name":"FRAC_PI_4","qualname":"::float::FloatConst::FRAC_PI_4","value":"pub fn FRAC_PI_4() -> Self","parent":{"krate":0,"index":2232},"children":[],"decl_id":null,"docs":"Return `π / 4.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2241},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":115516,"byte_end":115525,"line_start":2214,"line_end":2214,"column_start":5,"column_end":14},"name":"FRAC_PI_6","qualname":"::float::FloatConst::FRAC_PI_6","value":"pub fn FRAC_PI_6() -> Self","parent":{"krate":0,"index":2232},"children":[],"decl_id":null,"docs":"Return `π / 6.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2242},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":115565,"byte_end":115574,"line_start":2216,"line_end":2216,"column_start":5,"column_end":14},"name":"FRAC_PI_8","qualname":"::float::FloatConst::FRAC_PI_8","value":"pub fn FRAC_PI_8() -> Self","parent":{"krate":0,"index":2232},"children":[],"decl_id":null,"docs":"Return `π / 8.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2243},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":115614,"byte_end":115619,"line_start":2218,"line_end":2218,"column_start":5,"column_end":10},"name":"LN_10","qualname":"::float::FloatConst::LN_10","value":"pub fn LN_10() -> Self","parent":{"krate":0,"index":2232},"children":[],"decl_id":null,"docs":"Return `ln(10.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2244},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":115658,"byte_end":115662,"line_start":2220,"line_end":2220,"column_start":5,"column_end":9},"name":"LN_2","qualname":"::float::FloatConst::LN_2","value":"pub fn LN_2() -> Self","parent":{"krate":0,"index":2232},"children":[],"decl_id":null,"docs":"Return `ln(2.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2245},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":115702,"byte_end":115709,"line_start":2222,"line_end":2222,"column_start":5,"column_end":12},"name":"LOG10_E","qualname":"::float::FloatConst::LOG10_E","value":"pub fn LOG10_E() -> Self","parent":{"krate":0,"index":2232},"children":[],"decl_id":null,"docs":"Return `log10(e)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2246},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":115748,"byte_end":115754,"line_start":2224,"line_end":2224,"column_start":5,"column_end":11},"name":"LOG2_E","qualname":"::float::FloatConst::LOG2_E","value":"pub fn LOG2_E() -> Self","parent":{"krate":0,"index":2232},"children":[],"decl_id":null,"docs":"Return `log2(e)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2247},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":115811,"byte_end":115813,"line_start":2226,"line_end":2226,"column_start":5,"column_end":7},"name":"PI","qualname":"::float::FloatConst::PI","value":"pub fn PI() -> Self","parent":{"krate":0,"index":2232},"children":[],"decl_id":null,"docs":"Return Archimedes’ constant `π`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2248},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":115854,"byte_end":115860,"line_start":2228,"line_end":2228,"column_start":5,"column_end":11},"name":"SQRT_2","qualname":"::float::FloatConst::SQRT_2","value":"pub fn SQRT_2() -> Self","parent":{"krate":0,"index":2232},"children":[],"decl_id":null,"docs":"Return `sqrt(2.0)`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":455},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"identities","qualname":"::identities","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","parent":null,"children":[{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":463},{"krate":0,"index":466},{"krate":0,"index":470},{"krate":0,"index":2292},{"krate":0,"index":2295},{"krate":0,"index":2298},{"krate":0,"index":2301},{"krate":0,"index":2304},{"krate":0,"index":2307},{"krate":0,"index":2310},{"krate":0,"index":2313},{"krate":0,"index":2316},{"krate":0,"index":2319},{"krate":0,"index":2322},{"krate":0,"index":2325},{"krate":0,"index":2328},{"krate":0,"index":2331},{"krate":0,"index":471},{"krate":0,"index":476},{"krate":0,"index":480},{"krate":0,"index":2334},{"krate":0,"index":2337},{"krate":0,"index":2340},{"krate":0,"index":2343},{"krate":0,"index":2346},{"krate":0,"index":2349},{"krate":0,"index":2352},{"krate":0,"index":2355},{"krate":0,"index":2358},{"krate":0,"index":2361},{"krate":0,"index":2364},{"krate":0,"index":2367},{"krate":0,"index":2370},{"krate":0,"index":2373},{"krate":0,"index":481},{"krate":0,"index":485},{"krate":0,"index":487}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":466},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":119959,"byte_end":119963,"line_start":12,"line_end":12,"column_start":11,"column_end":15},"name":"Zero","qualname":"::identities::Zero","value":"Zero: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469}],"decl_id":null,"docs":" Defines an additive identity element for `Self`.","sig":null,"attributes":[{"value":"/ Defines an additive identity element for `Self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":119784,"byte_end":119836,"line_start":4,"line_end":4,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":119837,"byte_end":119840,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ # Laws","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":119841,"byte_end":119851,"line_start":6,"line_end":6,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":119852,"byte_end":119855,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ ```{.text}","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":119856,"byte_end":119870,"line_start":8,"line_end":8,"column_start":1,"column_end":15}},{"value":"/ a + 0 = a       ∀ a ∈ Self","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":119871,"byte_end":119905,"line_start":9,"line_end":9,"column_start":1,"column_end":31}},{"value":"/ 0 + a = a       ∀ a ∈ Self","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":119906,"byte_end":119940,"line_start":10,"line_end":10,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":119941,"byte_end":119948,"line_start":11,"line_end":11,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":120333,"byte_end":120337,"line_start":20,"line_end":20,"column_start":8,"column_end":12},"name":"zero","qualname":"::identities::Zero::zero","value":"pub fn zero() -> Self","parent":{"krate":0,"index":466},"children":[],"decl_id":null,"docs":" Returns the additive identity element of `Self`, `0`.\n # Purity","sig":null,"attributes":[{"value":"/ Returns the additive identity element of `Self`, `0`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":120004,"byte_end":120061,"line_start":13,"line_end":13,"column_start":5,"column_end":62}},{"value":"/ # Purity","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":120066,"byte_end":120078,"line_start":14,"line_end":14,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":120083,"byte_end":120086,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ This function should return the same result at all times regardless of","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":120091,"byte_end":120165,"line_start":16,"line_end":16,"column_start":5,"column_end":79}},{"value":"/ external mutable state, for example values stored in TLS or in","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":120170,"byte_end":120236,"line_start":17,"line_end":17,"column_start":5,"column_end":71}},{"value":"/ `static mut`s.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":120241,"byte_end":120259,"line_start":18,"line_end":18,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":120426,"byte_end":120434,"line_start":23,"line_end":23,"column_start":8,"column_end":16},"name":"set_zero","qualname":"::identities::Zero::set_zero","value":"pub fn set_zero(&mut Self)","parent":{"krate":0,"index":466},"children":[],"decl_id":null,"docs":" Sets `self` to the additive identity element of `Self`, `0`.\n","sig":null,"attributes":[{"value":"/ Sets `self` to the additive identity element of `Self`, `0`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":120354,"byte_end":120418,"line_start":22,"line_end":22,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":120560,"byte_end":120567,"line_start":28,"line_end":28,"column_start":8,"column_end":15},"name":"is_zero","qualname":"::identities::Zero::is_zero","value":"pub fn is_zero(&Self) -> bool","parent":{"krate":0,"index":466},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is equal to the additive identity.\n","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is equal to the additive identity.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":120489,"byte_end":120552,"line_start":27,"line_end":27,"column_start":5,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":476},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":121654,"byte_end":121657,"line_start":90,"line_end":90,"column_start":11,"column_end":14},"name":"One","qualname":"::identities::One","value":"One: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479}],"decl_id":null,"docs":" Defines a multiplicative identity element for `Self`.","sig":null,"attributes":[{"value":"/ Defines a multiplicative identity element for `Self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":121474,"byte_end":121531,"line_start":82,"line_end":82,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":121532,"byte_end":121535,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ # Laws","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":121536,"byte_end":121546,"line_start":84,"line_end":84,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":121547,"byte_end":121550,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ ```{.text}","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":121551,"byte_end":121565,"line_start":86,"line_end":86,"column_start":1,"column_end":15}},{"value":"/ a * 1 = a       ∀ a ∈ Self","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":121566,"byte_end":121600,"line_start":87,"line_end":87,"column_start":1,"column_end":31}},{"value":"/ 1 * a = a       ∀ a ∈ Self","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":121601,"byte_end":121635,"line_start":88,"line_end":88,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":121636,"byte_end":121643,"line_start":89,"line_end":89,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":122041,"byte_end":122044,"line_start":99,"line_end":99,"column_start":8,"column_end":11},"name":"one","qualname":"::identities::One::one","value":"pub fn one() -> Self","parent":{"krate":0,"index":476},"children":[],"decl_id":null,"docs":" Returns the multiplicative identity element of `Self`, `1`.","sig":null,"attributes":[{"value":"/ Returns the multiplicative identity element of `Self`, `1`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":121698,"byte_end":121761,"line_start":91,"line_end":91,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":121766,"byte_end":121769,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ # Purity","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":121774,"byte_end":121786,"line_start":93,"line_end":93,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":121791,"byte_end":121794,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ This function should return the same result at all times regardless of","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":121799,"byte_end":121873,"line_start":95,"line_end":95,"column_start":5,"column_end":79}},{"value":"/ external mutable state, for example values stored in TLS or in","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":121878,"byte_end":121944,"line_start":96,"line_end":96,"column_start":5,"column_end":71}},{"value":"/ `static mut`s.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":121949,"byte_end":121967,"line_start":97,"line_end":97,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":122139,"byte_end":122146,"line_start":102,"line_end":102,"column_start":8,"column_end":15},"name":"set_one","qualname":"::identities::One::set_one","value":"pub fn set_one(&mut Self)","parent":{"krate":0,"index":476},"children":[],"decl_id":null,"docs":" Sets `self` to the multiplicative identity element of `Self`, `1`.\n","sig":null,"attributes":[{"value":"/ Sets `self` to the multiplicative identity element of `Self`, `1`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":122061,"byte_end":122131,"line_start":101,"line_end":101,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":122491,"byte_end":122497,"line_start":112,"line_end":112,"column_start":8,"column_end":14},"name":"is_one","qualname":"::identities::One::is_one","value":"pub fn is_one(&Self) -> bool where Self: PartialEq","parent":{"krate":0,"index":476},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is equal to the multiplicative identity.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is equal to the multiplicative identity.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":122199,"byte_end":122268,"line_start":106,"line_end":106,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":122273,"byte_end":122276,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ For performance reasons, it's best to implement this manually.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":122281,"byte_end":122347,"line_start":108,"line_end":108,"column_start":5,"column_end":71}},{"value":"/ After a semver bump, this method will be required, and the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":122352,"byte_end":122414,"line_start":109,"line_end":109,"column_start":5,"column_end":67}},{"value":"/ `where Self: PartialEq` bound will be removed.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":122419,"byte_end":122469,"line_start":110,"line_end":110,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":122474,"byte_end":122483,"line_start":111,"line_end":111,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":485},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":123520,"byte_end":123524,"line_start":171,"line_end":171,"column_start":8,"column_end":12},"name":"zero","qualname":"::identities::zero","value":"pub fn zero<T: Zero>() -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the additive identity, `0`.\n","sig":null,"attributes":[{"value":"/ Returns the additive identity, `0`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":123455,"byte_end":123494,"line_start":169,"line_end":169,"column_start":1,"column_end":40}},{"value":"inline(always)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":123495,"byte_end":123512,"line_start":170,"line_end":170,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":487},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":123634,"byte_end":123637,"line_start":177,"line_end":177,"column_start":8,"column_end":11},"name":"one","qualname":"::identities::one","value":"pub fn one<T: One>() -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the multiplicative identity, `1`.\n","sig":null,"attributes":[{"value":"/ Returns the multiplicative identity, `1`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":123563,"byte_end":123608,"line_start":175,"line_end":175,"column_start":1,"column_end":46}},{"value":"inline(always)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":123609,"byte_end":123626,"line_start":176,"line_end":176,"column_start":1,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":489},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"int","qualname":"::int","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","parent":null,"children":[{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":494},{"krate":0,"index":497},{"krate":0,"index":500},{"krate":0,"index":503},{"krate":0,"index":506},{"krate":0,"index":509},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":520},{"krate":0,"index":523},{"krate":0,"index":543},{"krate":0,"index":545},{"krate":0,"index":547},{"krate":0,"index":2376},{"krate":0,"index":2396},{"krate":0,"index":2416},{"krate":0,"index":2436},{"krate":0,"index":2456},{"krate":0,"index":2476},{"krate":0,"index":2496},{"krate":0,"index":2516},{"krate":0,"index":2536},{"krate":0,"index":2556},{"krate":0,"index":2576},{"krate":0,"index":2596}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":523},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126209,"byte_end":126216,"line_start":34,"line_end":34,"column_start":11,"column_end":18},"name":"PrimInt","qualname":"::int::PrimInt","value":"PrimInt: Sized + Copy + Num + NumCast + Bounded + PartialOrd + Ord + Eq + Not<Output =\nSelf> + BitAnd<Output = Self> + BitOr<Output = Self> + BitXor<Output = Self> +\nShl<usize, Output = Self> + Shr<usize, Output = Self> + CheckedAdd<Output =\nSelf> + CheckedSub<Output = Self> + CheckedMul<Output = Self> +\nCheckedDiv<Output = Self> + Saturating","parent":null,"children":[{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542}],"decl_id":null,"docs":" Generic trait for primitive integers.","sig":null,"attributes":[{"value":"/ Generic trait for primitive integers.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":124553,"byte_end":124594,"line_start":8,"line_end":8,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":124595,"byte_end":124598,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ The `PrimInt` trait is an abstraction over the builtin primitive integer types (e.g., `u8`,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":124599,"byte_end":124694,"line_start":10,"line_end":10,"column_start":1,"column_end":96}},{"value":"/ `u32`, `isize`, `i128`, ...). It inherits the basic numeric traits and extends them with","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":124695,"byte_end":124787,"line_start":11,"line_end":11,"column_start":1,"column_end":93}},{"value":"/ bitwise operators and non-wrapping arithmetic.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":124788,"byte_end":124838,"line_start":12,"line_end":12,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":124839,"byte_end":124842,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ The trait explicitly inherits `Copy`, `Eq`, `Ord`, and `Sized`. The intention is that all","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":124843,"byte_end":124936,"line_start":14,"line_end":14,"column_start":1,"column_end":94}},{"value":"/ types implementing this trait behave like primitive types that are passed by value by default","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":124937,"byte_end":125034,"line_start":15,"line_end":15,"column_start":1,"column_end":98}},{"value":"/ and behave like builtin integers. Furthermore, the types are expected to expose the integer","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":125035,"byte_end":125130,"line_start":16,"line_end":16,"column_start":1,"column_end":96}},{"value":"/ value in binary representation and support bitwise operators. The standard bitwise operations","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":125131,"byte_end":125228,"line_start":17,"line_end":17,"column_start":1,"column_end":98}},{"value":"/ (e.g., bitwise-and, bitwise-or, right-shift, left-shift) are inherited and the trait extends","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":125229,"byte_end":125325,"line_start":18,"line_end":18,"column_start":1,"column_end":97}},{"value":"/ these with introspective queries (e.g., `PrimInt::count_ones()`, `PrimInt::leading_zeros()`),","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":125326,"byte_end":125423,"line_start":19,"line_end":19,"column_start":1,"column_end":98}},{"value":"/ bitwise combinators (e.g., `PrimInt::rotate_left()`), and endianness converters (e.g.,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":125424,"byte_end":125514,"line_start":20,"line_end":20,"column_start":1,"column_end":91}},{"value":"/ `PrimInt::to_be()`).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":125515,"byte_end":125539,"line_start":21,"line_end":21,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":125540,"byte_end":125543,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ All `PrimInt` types are expected to be fixed-width binary integers. The width can be queried","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":125544,"byte_end":125640,"line_start":23,"line_end":23,"column_start":1,"column_end":97}},{"value":"/ via `T::zero().count_zeros()`. The trait currently lacks a way to query the width at","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":125641,"byte_end":125729,"line_start":24,"line_end":24,"column_start":1,"column_end":89}},{"value":"/ compile-time.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":125730,"byte_end":125747,"line_start":25,"line_end":25,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":125748,"byte_end":125751,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ While a default implementation for all builtin primitive integers is provided, the trait is in","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":125752,"byte_end":125850,"line_start":27,"line_end":27,"column_start":1,"column_end":99}},{"value":"/ no way restricted to these. Other integer types that fulfil the requirements are free to","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":125851,"byte_end":125943,"line_start":28,"line_end":28,"column_start":1,"column_end":93}},{"value":"/ implement the trait was well.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":125944,"byte_end":125977,"line_start":29,"line_end":29,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":125978,"byte_end":125981,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ This trait and many of the method names originate in the unstable `core::num::Int` trait from","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":125982,"byte_end":126079,"line_start":31,"line_end":31,"column_start":1,"column_end":98}},{"value":"/ the rust standard library. The original trait was never stabilized and thus removed from the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126080,"byte_end":126176,"line_start":32,"line_end":32,"column_start":1,"column_end":97}},{"value":"/ standard library.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126177,"byte_end":126198,"line_start":33,"line_end":33,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126891,"byte_end":126901,"line_start":66,"line_end":66,"column_start":8,"column_end":18},"name":"count_ones","qualname":"::int::PrimInt::count_ones","value":"pub fn count_ones(Self) -> u32","parent":{"krate":0,"index":523},"children":[],"decl_id":null,"docs":" Returns the number of ones in the binary representation of `self`.","sig":null,"attributes":[{"value":"/ Returns the number of ones in the binary representation of `self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126636,"byte_end":126706,"line_start":55,"line_end":55,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126711,"byte_end":126714,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126719,"byte_end":126733,"line_start":57,"line_end":57,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126738,"byte_end":126741,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126746,"byte_end":126753,"line_start":59,"line_end":59,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126758,"byte_end":126786,"line_start":60,"line_end":60,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126791,"byte_end":126794,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ let n = 0b01001100u8;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126799,"byte_end":126824,"line_start":62,"line_end":62,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126829,"byte_end":126832,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.count_ones(), 3);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126837,"byte_end":126871,"line_start":64,"line_end":64,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126876,"byte_end":126883,"line_start":65,"line_end":65,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127178,"byte_end":127189,"line_start":79,"line_end":79,"column_start":8,"column_end":19},"name":"count_zeros","qualname":"::int::PrimInt::count_zeros","value":"pub fn count_zeros(Self) -> u32","parent":{"krate":0,"index":523},"children":[],"decl_id":null,"docs":" Returns the number of zeros in the binary representation of `self`.","sig":null,"attributes":[{"value":"/ Returns the number of zeros in the binary representation of `self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126921,"byte_end":126992,"line_start":68,"line_end":68,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126997,"byte_end":127000,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127005,"byte_end":127019,"line_start":70,"line_end":70,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127024,"byte_end":127027,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127032,"byte_end":127039,"line_start":72,"line_end":72,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127044,"byte_end":127072,"line_start":73,"line_end":73,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127077,"byte_end":127080,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ let n = 0b01001100u8;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127085,"byte_end":127110,"line_start":75,"line_end":75,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127115,"byte_end":127118,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.count_zeros(), 5);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127123,"byte_end":127158,"line_start":77,"line_end":77,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127163,"byte_end":127170,"line_start":78,"line_end":78,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127479,"byte_end":127491,"line_start":93,"line_end":93,"column_start":8,"column_end":20},"name":"leading_ones","qualname":"::int::PrimInt::leading_ones","value":"pub fn leading_ones(Self) -> u32","parent":{"krate":0,"index":523},"children":[],"decl_id":null,"docs":" Returns the number of leading ones in the binary representation\n of `self`.","sig":null,"attributes":[{"value":"/ Returns the number of leading ones in the binary representation","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127209,"byte_end":127276,"line_start":81,"line_end":81,"column_start":5,"column_end":72}},{"value":"/ of `self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127281,"byte_end":127295,"line_start":82,"line_end":82,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127300,"byte_end":127303,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127308,"byte_end":127322,"line_start":84,"line_end":84,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127327,"byte_end":127330,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127335,"byte_end":127342,"line_start":86,"line_end":86,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127347,"byte_end":127375,"line_start":87,"line_end":87,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127380,"byte_end":127383,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ let n = 0xF00Du16;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127388,"byte_end":127410,"line_start":89,"line_end":89,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127415,"byte_end":127418,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.leading_ones(), 4);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127423,"byte_end":127459,"line_start":91,"line_end":91,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127464,"byte_end":127471,"line_start":92,"line_end":92,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127826,"byte_end":127839,"line_start":109,"line_end":109,"column_start":8,"column_end":21},"name":"leading_zeros","qualname":"::int::PrimInt::leading_zeros","value":"pub fn leading_zeros(Self) -> u32","parent":{"krate":0,"index":523},"children":[],"decl_id":null,"docs":" Returns the number of leading zeros in the binary representation\n of `self`.","sig":null,"attributes":[{"value":"/ Returns the number of leading zeros in the binary representation","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127550,"byte_end":127618,"line_start":97,"line_end":97,"column_start":5,"column_end":73}},{"value":"/ of `self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127623,"byte_end":127637,"line_start":98,"line_end":98,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127642,"byte_end":127645,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127650,"byte_end":127664,"line_start":100,"line_end":100,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127669,"byte_end":127672,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127677,"byte_end":127684,"line_start":102,"line_end":102,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127689,"byte_end":127717,"line_start":103,"line_end":103,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127722,"byte_end":127725,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ let n = 0b0101000u16;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127730,"byte_end":127755,"line_start":105,"line_end":105,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127760,"byte_end":127763,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.leading_zeros(), 10);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127768,"byte_end":127806,"line_start":107,"line_end":107,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127811,"byte_end":127818,"line_start":108,"line_end":108,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128131,"byte_end":128144,"line_start":123,"line_end":123,"column_start":8,"column_end":21},"name":"trailing_ones","qualname":"::int::PrimInt::trailing_ones","value":"pub fn trailing_ones(Self) -> u32","parent":{"krate":0,"index":523},"children":[],"decl_id":null,"docs":" Returns the number of trailing ones in the binary representation\n of `self`.","sig":null,"attributes":[{"value":"/ Returns the number of trailing ones in the binary representation","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127859,"byte_end":127927,"line_start":111,"line_end":111,"column_start":5,"column_end":73}},{"value":"/ of `self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127932,"byte_end":127946,"line_start":112,"line_end":112,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127951,"byte_end":127954,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127959,"byte_end":127973,"line_start":114,"line_end":114,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127978,"byte_end":127981,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127986,"byte_end":127993,"line_start":116,"line_end":116,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":127998,"byte_end":128026,"line_start":117,"line_end":117,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128031,"byte_end":128034,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ let n = 0xBEEFu16;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128039,"byte_end":128061,"line_start":119,"line_end":119,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128066,"byte_end":128069,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.trailing_ones(), 4);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128074,"byte_end":128111,"line_start":121,"line_end":121,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128116,"byte_end":128123,"line_start":122,"line_end":122,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128481,"byte_end":128495,"line_start":139,"line_end":139,"column_start":8,"column_end":22},"name":"trailing_zeros","qualname":"::int::PrimInt::trailing_zeros","value":"pub fn trailing_zeros(Self) -> u32","parent":{"krate":0,"index":523},"children":[],"decl_id":null,"docs":" Returns the number of trailing zeros in the binary representation\n of `self`.","sig":null,"attributes":[{"value":"/ Returns the number of trailing zeros in the binary representation","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128204,"byte_end":128273,"line_start":127,"line_end":127,"column_start":5,"column_end":74}},{"value":"/ of `self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128278,"byte_end":128292,"line_start":128,"line_end":128,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128297,"byte_end":128300,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128305,"byte_end":128319,"line_start":130,"line_end":130,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128324,"byte_end":128327,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128332,"byte_end":128339,"line_start":132,"line_end":132,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128344,"byte_end":128372,"line_start":133,"line_end":133,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128377,"byte_end":128380,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ let n = 0b0101000u16;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128385,"byte_end":128410,"line_start":135,"line_end":135,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128415,"byte_end":128418,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.trailing_zeros(), 3);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128423,"byte_end":128461,"line_start":137,"line_end":137,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128466,"byte_end":128473,"line_start":138,"line_end":138,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128883,"byte_end":128894,"line_start":154,"line_end":154,"column_start":8,"column_end":19},"name":"rotate_left","qualname":"::int::PrimInt::rotate_left","value":"pub fn rotate_left(Self, u32) -> Self","parent":{"krate":0,"index":523},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount, `n`, wrapping\n the truncated bits to the end of the resulting integer.","sig":null,"attributes":[{"value":"/ Shifts the bits to the left by a specified amount, `n`, wrapping","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128515,"byte_end":128583,"line_start":141,"line_end":141,"column_start":5,"column_end":73}},{"value":"/ the truncated bits to the end of the resulting integer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128588,"byte_end":128647,"line_start":142,"line_end":142,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128652,"byte_end":128655,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128660,"byte_end":128674,"line_start":144,"line_end":144,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128679,"byte_end":128682,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128687,"byte_end":128694,"line_start":146,"line_end":146,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128699,"byte_end":128727,"line_start":147,"line_end":147,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128732,"byte_end":128735,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128740,"byte_end":128774,"line_start":149,"line_end":149,"column_start":5,"column_end":39}},{"value":"/ let m = 0x3456789ABCDEF012u64;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128779,"byte_end":128813,"line_start":150,"line_end":150,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128818,"byte_end":128821,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.rotate_left(12), m);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128826,"byte_end":128863,"line_start":152,"line_end":152,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128868,"byte_end":128875,"line_start":153,"line_end":153,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129299,"byte_end":129311,"line_start":169,"line_end":169,"column_start":8,"column_end":20},"name":"rotate_right","qualname":"::int::PrimInt::rotate_right","value":"pub fn rotate_right(Self, u32) -> Self","parent":{"krate":0,"index":523},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount, `n`, wrapping\n the truncated bits to the beginning of the resulting integer.","sig":null,"attributes":[{"value":"/ Shifts the bits to the right by a specified amount, `n`, wrapping","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128923,"byte_end":128992,"line_start":156,"line_end":156,"column_start":5,"column_end":74}},{"value":"/ the truncated bits to the beginning of the resulting integer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":128997,"byte_end":129062,"line_start":157,"line_end":157,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129067,"byte_end":129070,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129075,"byte_end":129089,"line_start":159,"line_end":159,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129094,"byte_end":129097,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129102,"byte_end":129109,"line_start":161,"line_end":161,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129114,"byte_end":129142,"line_start":162,"line_end":162,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129147,"byte_end":129150,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129155,"byte_end":129189,"line_start":164,"line_end":164,"column_start":5,"column_end":39}},{"value":"/ let m = 0xDEF0123456789ABCu64;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129194,"byte_end":129228,"line_start":165,"line_end":165,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129233,"byte_end":129236,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.rotate_right(12), m);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129241,"byte_end":129279,"line_start":167,"line_end":167,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129284,"byte_end":129291,"line_start":168,"line_end":168,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129747,"byte_end":129757,"line_start":186,"line_end":186,"column_start":8,"column_end":18},"name":"signed_shl","qualname":"::int::PrimInt::signed_shl","value":"pub fn signed_shl(Self, u32) -> Self","parent":{"krate":0,"index":523},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount, `n`, filling\n zeros in the least significant bits.","sig":null,"attributes":[{"value":"/ Shifts the bits to the left by a specified amount, `n`, filling","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129340,"byte_end":129407,"line_start":171,"line_end":171,"column_start":5,"column_end":72}},{"value":"/ zeros in the least significant bits.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129412,"byte_end":129452,"line_start":172,"line_end":172,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129457,"byte_end":129460,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ This is bitwise equivalent to signed `Shl`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129465,"byte_end":129512,"line_start":174,"line_end":174,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129517,"byte_end":129520,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129525,"byte_end":129539,"line_start":176,"line_end":176,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129544,"byte_end":129547,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129552,"byte_end":129559,"line_start":178,"line_end":178,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129564,"byte_end":129592,"line_start":179,"line_end":179,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129597,"byte_end":129600,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129605,"byte_end":129639,"line_start":181,"line_end":181,"column_start":5,"column_end":39}},{"value":"/ let m = 0x3456789ABCDEF000u64;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129644,"byte_end":129678,"line_start":182,"line_end":182,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129683,"byte_end":129686,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.signed_shl(12), m);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129691,"byte_end":129727,"line_start":184,"line_end":184,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129732,"byte_end":129739,"line_start":185,"line_end":185,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130226,"byte_end":130236,"line_start":203,"line_end":203,"column_start":8,"column_end":18},"name":"signed_shr","qualname":"::int::PrimInt::signed_shr","value":"pub fn signed_shr(Self, u32) -> Self","parent":{"krate":0,"index":523},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount, `n`, copying\n the \"sign bit\" in the most significant bits even for unsigned types.","sig":null,"attributes":[{"value":"/ Shifts the bits to the right by a specified amount, `n`, copying","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129786,"byte_end":129854,"line_start":188,"line_end":188,"column_start":5,"column_end":73}},{"value":"/ the \"sign bit\" in the most significant bits even for unsigned types.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129859,"byte_end":129931,"line_start":189,"line_end":189,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129936,"byte_end":129939,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ This is bitwise equivalent to signed `Shr`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129944,"byte_end":129991,"line_start":191,"line_end":191,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":129996,"byte_end":129999,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130004,"byte_end":130018,"line_start":193,"line_end":193,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130023,"byte_end":130026,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130031,"byte_end":130038,"line_start":195,"line_end":195,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130043,"byte_end":130071,"line_start":196,"line_end":196,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130076,"byte_end":130079,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ let n = 0xFEDCBA9876543210u64;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130084,"byte_end":130118,"line_start":198,"line_end":198,"column_start":5,"column_end":39}},{"value":"/ let m = 0xFFFFEDCBA9876543u64;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130123,"byte_end":130157,"line_start":199,"line_end":199,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130162,"byte_end":130165,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.signed_shr(12), m);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130170,"byte_end":130206,"line_start":201,"line_end":201,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130211,"byte_end":130218,"line_start":202,"line_end":202,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130676,"byte_end":130688,"line_start":220,"line_end":220,"column_start":8,"column_end":20},"name":"unsigned_shl","qualname":"::int::PrimInt::unsigned_shl","value":"pub fn unsigned_shl(Self, u32) -> Self","parent":{"krate":0,"index":523},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount, `n`, filling\n zeros in the least significant bits.","sig":null,"attributes":[{"value":"/ Shifts the bits to the left by a specified amount, `n`, filling","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130265,"byte_end":130332,"line_start":205,"line_end":205,"column_start":5,"column_end":72}},{"value":"/ zeros in the least significant bits.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130337,"byte_end":130377,"line_start":206,"line_end":206,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130382,"byte_end":130385,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ This is bitwise equivalent to unsigned `Shl`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130390,"byte_end":130439,"line_start":208,"line_end":208,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130444,"byte_end":130447,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130452,"byte_end":130466,"line_start":210,"line_end":210,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130471,"byte_end":130474,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130479,"byte_end":130486,"line_start":212,"line_end":212,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130491,"byte_end":130519,"line_start":213,"line_end":213,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130524,"byte_end":130527,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFi64;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130532,"byte_end":130566,"line_start":215,"line_end":215,"column_start":5,"column_end":39}},{"value":"/ let m = 0x3456789ABCDEF000i64;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130571,"byte_end":130605,"line_start":216,"line_end":216,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130610,"byte_end":130613,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.unsigned_shl(12), m);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130618,"byte_end":130656,"line_start":218,"line_end":218,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130661,"byte_end":130668,"line_start":219,"line_end":219,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131121,"byte_end":131133,"line_start":237,"line_end":237,"column_start":8,"column_end":20},"name":"unsigned_shr","qualname":"::int::PrimInt::unsigned_shr","value":"pub fn unsigned_shr(Self, u32) -> Self","parent":{"krate":0,"index":523},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount, `n`, filling\n zeros in the most significant bits.","sig":null,"attributes":[{"value":"/ Shifts the bits to the right by a specified amount, `n`, filling","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130717,"byte_end":130785,"line_start":222,"line_end":222,"column_start":5,"column_end":73}},{"value":"/ zeros in the most significant bits.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130790,"byte_end":130829,"line_start":223,"line_end":223,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130834,"byte_end":130837,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ This is bitwise equivalent to unsigned `Shr`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130842,"byte_end":130891,"line_start":225,"line_end":225,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130896,"byte_end":130899,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130904,"byte_end":130918,"line_start":227,"line_end":227,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130923,"byte_end":130926,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130931,"byte_end":130938,"line_start":229,"line_end":229,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130943,"byte_end":130971,"line_start":230,"line_end":230,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130976,"byte_end":130979,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ let n = -8i8; // 0b11111000","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":130984,"byte_end":131015,"line_start":232,"line_end":232,"column_start":5,"column_end":36}},{"value":"/ let m = 62i8; // 0b00111110","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131020,"byte_end":131051,"line_start":233,"line_end":233,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131056,"byte_end":131059,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.unsigned_shr(2), m);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131064,"byte_end":131101,"line_start":235,"line_end":235,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131106,"byte_end":131113,"line_start":236,"line_end":236,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131438,"byte_end":131448,"line_start":251,"line_end":251,"column_start":8,"column_end":18},"name":"swap_bytes","qualname":"::int::PrimInt::swap_bytes","value":"pub fn swap_bytes(Self) -> Self","parent":{"krate":0,"index":523},"children":[],"decl_id":null,"docs":" Reverses the byte order of the integer.","sig":null,"attributes":[{"value":"/ Reverses the byte order of the integer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131162,"byte_end":131205,"line_start":239,"line_end":239,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131210,"byte_end":131213,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131218,"byte_end":131232,"line_start":241,"line_end":241,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131237,"byte_end":131240,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131245,"byte_end":131252,"line_start":243,"line_end":243,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131257,"byte_end":131285,"line_start":244,"line_end":244,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131290,"byte_end":131293,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131298,"byte_end":131332,"line_start":246,"line_end":246,"column_start":5,"column_end":39}},{"value":"/ let m = 0xEFCDAB8967452301u64;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131337,"byte_end":131371,"line_start":247,"line_end":247,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131376,"byte_end":131379,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.swap_bytes(), m);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131384,"byte_end":131418,"line_start":249,"line_end":249,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131423,"byte_end":131430,"line_start":250,"line_end":250,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131933,"byte_end":131945,"line_start":269,"line_end":269,"column_start":8,"column_end":20},"name":"reverse_bits","qualname":"::int::PrimInt::reverse_bits","value":"pub fn reverse_bits(Self) -> Self","parent":{"krate":0,"index":523},"children":[],"decl_id":null,"docs":" Reverses the order of bits in the integer.","sig":null,"attributes":[{"value":"/ Reverses the order of bits in the integer.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131469,"byte_end":131515,"line_start":253,"line_end":253,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131520,"byte_end":131523,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ The least significant bit becomes the most significant bit, second least-significant bit","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131528,"byte_end":131620,"line_start":255,"line_end":255,"column_start":5,"column_end":97}},{"value":"/ becomes second most-significant bit, etc.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131625,"byte_end":131670,"line_start":256,"line_end":256,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131675,"byte_end":131678,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131683,"byte_end":131697,"line_start":258,"line_end":258,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131702,"byte_end":131705,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131710,"byte_end":131717,"line_start":260,"line_end":260,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131722,"byte_end":131750,"line_start":261,"line_end":261,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131755,"byte_end":131758,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ let n = 0x12345678u32;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131763,"byte_end":131789,"line_start":263,"line_end":263,"column_start":5,"column_end":31}},{"value":"/ let m = 0x1e6a2c48u32;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131794,"byte_end":131820,"line_start":264,"line_end":264,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131825,"byte_end":131828,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.reverse_bits(), m);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131833,"byte_end":131869,"line_start":266,"line_end":266,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(0u32.reverse_bits(), 0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131874,"byte_end":131913,"line_start":267,"line_end":267,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":131918,"byte_end":131925,"line_start":268,"line_end":268,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132484,"byte_end":132491,"line_start":290,"line_end":290,"column_start":8,"column_end":15},"name":"from_be","qualname":"::int::PrimInt::from_be","value":"pub fn from_be(Self) -> Self","parent":{"krate":0,"index":523},"children":[],"decl_id":null,"docs":" Convert an integer from big endian to the target's endianness.","sig":null,"attributes":[{"value":"/ Convert an integer from big endian to the target's endianness.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132009,"byte_end":132075,"line_start":273,"line_end":273,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132080,"byte_end":132083,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ On big endian this is a no-op. On little endian the bytes are swapped.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132088,"byte_end":132162,"line_start":275,"line_end":275,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132167,"byte_end":132170,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132175,"byte_end":132189,"line_start":277,"line_end":277,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132194,"byte_end":132197,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132202,"byte_end":132209,"line_start":279,"line_end":279,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132214,"byte_end":132242,"line_start":280,"line_end":280,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132247,"byte_end":132250,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132255,"byte_end":132289,"line_start":282,"line_end":282,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132294,"byte_end":132297,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ if cfg!(target_endian = \"big\") {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132302,"byte_end":132338,"line_start":284,"line_end":284,"column_start":5,"column_end":41}},{"value":"/     assert_eq!(u64::from_be(n), n)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132343,"byte_end":132381,"line_start":285,"line_end":285,"column_start":5,"column_end":43}},{"value":"/ } else {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132386,"byte_end":132398,"line_start":286,"line_end":286,"column_start":5,"column_end":17}},{"value":"/     assert_eq!(u64::from_be(n), n.swap_bytes())","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132403,"byte_end":132454,"line_start":287,"line_end":287,"column_start":5,"column_end":56}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132459,"byte_end":132464,"line_start":288,"line_end":288,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132469,"byte_end":132476,"line_start":289,"line_end":289,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132996,"byte_end":133003,"line_start":309,"line_end":309,"column_start":8,"column_end":15},"name":"from_le","qualname":"::int::PrimInt::from_le","value":"pub fn from_le(Self) -> Self","parent":{"krate":0,"index":523},"children":[],"decl_id":null,"docs":" Convert an integer from little endian to the target's endianness.","sig":null,"attributes":[{"value":"/ Convert an integer from little endian to the target's endianness.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132515,"byte_end":132584,"line_start":292,"line_end":292,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132589,"byte_end":132592,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ On little endian this is a no-op. On big endian the bytes are swapped.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132597,"byte_end":132671,"line_start":294,"line_end":294,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132676,"byte_end":132679,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132684,"byte_end":132698,"line_start":296,"line_end":296,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132703,"byte_end":132706,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132711,"byte_end":132718,"line_start":298,"line_end":298,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132723,"byte_end":132751,"line_start":299,"line_end":299,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132756,"byte_end":132759,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132764,"byte_end":132798,"line_start":301,"line_end":301,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132803,"byte_end":132806,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ if cfg!(target_endian = \"little\") {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132811,"byte_end":132850,"line_start":303,"line_end":303,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(u64::from_le(n), n)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132855,"byte_end":132893,"line_start":304,"line_end":304,"column_start":5,"column_end":43}},{"value":"/ } else {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132898,"byte_end":132910,"line_start":305,"line_end":305,"column_start":5,"column_end":17}},{"value":"/     assert_eq!(u64::from_le(n), n.swap_bytes())","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132915,"byte_end":132966,"line_start":306,"line_end":306,"column_start":5,"column_end":56}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132971,"byte_end":132976,"line_start":307,"line_end":307,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":132981,"byte_end":132988,"line_start":308,"line_end":308,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133486,"byte_end":133491,"line_start":328,"line_end":328,"column_start":8,"column_end":13},"name":"to_be","qualname":"::int::PrimInt::to_be","value":"pub fn to_be(Self) -> Self","parent":{"krate":0,"index":523},"children":[],"decl_id":null,"docs":" Convert `self` to big endian from the target's endianness.","sig":null,"attributes":[{"value":"/ Convert `self` to big endian from the target's endianness.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133027,"byte_end":133089,"line_start":311,"line_end":311,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133094,"byte_end":133097,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ On big endian this is a no-op. On little endian the bytes are swapped.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133102,"byte_end":133176,"line_start":313,"line_end":313,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133181,"byte_end":133184,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133189,"byte_end":133203,"line_start":315,"line_end":315,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133208,"byte_end":133211,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133216,"byte_end":133223,"line_start":317,"line_end":317,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133228,"byte_end":133256,"line_start":318,"line_end":318,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133261,"byte_end":133264,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133269,"byte_end":133303,"line_start":320,"line_end":320,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133308,"byte_end":133311,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ if cfg!(target_endian = \"big\") {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133316,"byte_end":133352,"line_start":322,"line_end":322,"column_start":5,"column_end":41}},{"value":"/     assert_eq!(n.to_be(), n)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133357,"byte_end":133389,"line_start":323,"line_end":323,"column_start":5,"column_end":37}},{"value":"/ } else {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133394,"byte_end":133406,"line_start":324,"line_end":324,"column_start":5,"column_end":17}},{"value":"/     assert_eq!(n.to_be(), n.swap_bytes())","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133411,"byte_end":133456,"line_start":325,"line_end":325,"column_start":5,"column_end":50}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133461,"byte_end":133466,"line_start":326,"line_end":326,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133471,"byte_end":133478,"line_start":327,"line_end":327,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133977,"byte_end":133982,"line_start":347,"line_end":347,"column_start":8,"column_end":13},"name":"to_le","qualname":"::int::PrimInt::to_le","value":"pub fn to_le(Self) -> Self","parent":{"krate":0,"index":523},"children":[],"decl_id":null,"docs":" Convert `self` to little endian from the target's endianness.","sig":null,"attributes":[{"value":"/ Convert `self` to little endian from the target's endianness.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133512,"byte_end":133577,"line_start":330,"line_end":330,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133582,"byte_end":133585,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ On little endian this is a no-op. On big endian the bytes are swapped.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133590,"byte_end":133664,"line_start":332,"line_end":332,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133669,"byte_end":133672,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133677,"byte_end":133691,"line_start":334,"line_end":334,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133696,"byte_end":133699,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133704,"byte_end":133711,"line_start":336,"line_end":336,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133716,"byte_end":133744,"line_start":337,"line_end":337,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133749,"byte_end":133752,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133757,"byte_end":133791,"line_start":339,"line_end":339,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133796,"byte_end":133799,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ if cfg!(target_endian = \"little\") {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133804,"byte_end":133843,"line_start":341,"line_end":341,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(n.to_le(), n)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133848,"byte_end":133880,"line_start":342,"line_end":342,"column_start":5,"column_end":37}},{"value":"/ } else {","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133885,"byte_end":133897,"line_start":343,"line_end":343,"column_start":5,"column_end":17}},{"value":"/     assert_eq!(n.to_le(), n.swap_bytes())","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133902,"byte_end":133947,"line_start":344,"line_end":344,"column_start":5,"column_end":50}},{"value":"/ }","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133952,"byte_end":133957,"line_start":345,"line_end":345,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":133962,"byte_end":133969,"line_start":346,"line_end":346,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":134220,"byte_end":134223,"line_start":358,"line_end":358,"column_start":8,"column_end":11},"name":"pow","qualname":"::int::PrimInt::pow","value":"pub fn pow(Self, u32) -> Self","parent":{"krate":0,"index":523},"children":[],"decl_id":null,"docs":" Raises self to the power of `exp`, using exponentiation by squaring.","sig":null,"attributes":[{"value":"/ Raises self to the power of `exp`, using exponentiation by squaring.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":134003,"byte_end":134075,"line_start":349,"line_end":349,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":134080,"byte_end":134083,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":134088,"byte_end":134102,"line_start":351,"line_end":351,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":134107,"byte_end":134110,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":134115,"byte_end":134122,"line_start":353,"line_end":353,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":134127,"byte_end":134155,"line_start":354,"line_end":354,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":134160,"byte_end":134163,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(2i32.pow(4), 16);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":134168,"byte_end":134200,"line_start":356,"line_end":356,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":134205,"byte_end":134212,"line_start":357,"line_end":357,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":548},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ops","qualname":"::ops","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mod.rs","parent":null,"children":[{"krate":0,"index":549},{"krate":0,"index":591},{"krate":0,"index":617},{"krate":0,"index":635},{"krate":0,"index":647},{"krate":0,"index":704},{"krate":0,"index":726}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":549},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"checked","qualname":"::ops::checked","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","parent":null,"children":[{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":554},{"krate":0,"index":557},{"krate":0,"index":560},{"krate":0,"index":563},{"krate":0,"index":566},{"krate":0,"index":569},{"krate":0,"index":572},{"krate":0,"index":574},{"krate":0,"index":2616},{"krate":0,"index":2618},{"krate":0,"index":2620},{"krate":0,"index":2622},{"krate":0,"index":2624},{"krate":0,"index":2626},{"krate":0,"index":2628},{"krate":0,"index":2630},{"krate":0,"index":2632},{"krate":0,"index":2634},{"krate":0,"index":2636},{"krate":0,"index":2638},{"krate":0,"index":575},{"krate":0,"index":2640},{"krate":0,"index":2642},{"krate":0,"index":2644},{"krate":0,"index":2646},{"krate":0,"index":2648},{"krate":0,"index":2650},{"krate":0,"index":2652},{"krate":0,"index":2654},{"krate":0,"index":2656},{"krate":0,"index":2658},{"krate":0,"index":2660},{"krate":0,"index":2662},{"krate":0,"index":577},{"krate":0,"index":2664},{"krate":0,"index":2666},{"krate":0,"index":2668},{"krate":0,"index":2670},{"krate":0,"index":2672},{"krate":0,"index":2674},{"krate":0,"index":2676},{"krate":0,"index":2678},{"krate":0,"index":2680},{"krate":0,"index":2682},{"krate":0,"index":2684},{"krate":0,"index":2686},{"krate":0,"index":579},{"krate":0,"index":2688},{"krate":0,"index":2690},{"krate":0,"index":2692},{"krate":0,"index":2694},{"krate":0,"index":2696},{"krate":0,"index":2698},{"krate":0,"index":2700},{"krate":0,"index":2702},{"krate":0,"index":2704},{"krate":0,"index":2706},{"krate":0,"index":2708},{"krate":0,"index":2710},{"krate":0,"index":581},{"krate":0,"index":2712},{"krate":0,"index":2714},{"krate":0,"index":2716},{"krate":0,"index":2718},{"krate":0,"index":2720},{"krate":0,"index":2722},{"krate":0,"index":2724},{"krate":0,"index":2726},{"krate":0,"index":2728},{"krate":0,"index":2730},{"krate":0,"index":2732},{"krate":0,"index":2734},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":2736},{"krate":0,"index":2738},{"krate":0,"index":2740},{"krate":0,"index":2742},{"krate":0,"index":2744},{"krate":0,"index":2746},{"krate":0,"index":2748},{"krate":0,"index":2750},{"krate":0,"index":2752},{"krate":0,"index":2754},{"krate":0,"index":2756},{"krate":0,"index":2758},{"krate":0,"index":586},{"krate":0,"index":588},{"krate":0,"index":2760},{"krate":0,"index":2762},{"krate":0,"index":2764},{"krate":0,"index":2766},{"krate":0,"index":2768},{"krate":0,"index":2770},{"krate":0,"index":2772},{"krate":0,"index":2774},{"krate":0,"index":2776},{"krate":0,"index":2778},{"krate":0,"index":2780},{"krate":0,"index":2782},{"krate":0,"index":589},{"krate":0,"index":2784},{"krate":0,"index":2786},{"krate":0,"index":2788},{"krate":0,"index":2790},{"krate":0,"index":2792},{"krate":0,"index":2794},{"krate":0,"index":2796},{"krate":0,"index":2798},{"krate":0,"index":2800},{"krate":0,"index":2802},{"krate":0,"index":2804},{"krate":0,"index":2806}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":572},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":140609,"byte_end":140619,"line_start":5,"line_end":5,"column_start":11,"column_end":21},"name":"CheckedAdd","qualname":"::ops::checked::CheckedAdd","value":"CheckedAdd: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":573}],"decl_id":null,"docs":" Performs addition that returns `None` instead of wrapping around on\n overflow.\n","sig":null,"attributes":[{"value":"/ Performs addition that returns `None` instead of wrapping around on","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":140513,"byte_end":140584,"line_start":3,"line_end":3,"column_start":1,"column_end":72}},{"value":"/ overflow.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":140585,"byte_end":140598,"line_start":4,"line_end":4,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":140761,"byte_end":140772,"line_start":8,"line_end":8,"column_start":8,"column_end":19},"name":"checked_add","qualname":"::ops::checked::CheckedAdd::checked_add","value":"pub fn checked_add(&Self, &Self) -> Option<Self>","parent":{"krate":0,"index":572},"children":[],"decl_id":null,"docs":" Adds two numbers, checking for overflow. If overflow happens, `None` is\n returned.\n","sig":null,"attributes":[{"value":"/ Adds two numbers, checking for overflow. If overflow happens, `None` is","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":140660,"byte_end":140735,"line_start":6,"line_end":6,"column_start":5,"column_end":80}},{"value":"/ returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":140740,"byte_end":140753,"line_start":7,"line_end":7,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":575},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":141750,"byte_end":141760,"line_start":39,"line_end":39,"column_start":11,"column_end":21},"name":"CheckedSub","qualname":"::ops::checked::CheckedSub","value":"CheckedSub: Sized + Sub<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":576}],"decl_id":null,"docs":" Performs subtraction that returns `None` instead of wrapping around on underflow.\n","sig":null,"attributes":[{"value":"/ Performs subtraction that returns `None` instead of wrapping around on underflow.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":141654,"byte_end":141739,"line_start":38,"line_end":38,"column_start":1,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":141909,"byte_end":141920,"line_start":42,"line_end":42,"column_start":8,"column_end":19},"name":"checked_sub","qualname":"::ops::checked::CheckedSub::checked_sub","value":"pub fn checked_sub(&Self, &Self) -> Option<Self>","parent":{"krate":0,"index":575},"children":[],"decl_id":null,"docs":" Subtracts two numbers, checking for underflow. If underflow happens,\n `None` is returned.\n","sig":null,"attributes":[{"value":"/ Subtracts two numbers, checking for underflow. If underflow happens,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":141801,"byte_end":141873,"line_start":40,"line_end":40,"column_start":5,"column_end":77}},{"value":"/ `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":141878,"byte_end":141901,"line_start":41,"line_end":41,"column_start":5,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":577},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":142653,"byte_end":142663,"line_start":63,"line_end":63,"column_start":11,"column_end":21},"name":"CheckedMul","qualname":"::ops::checked::CheckedMul","value":"CheckedMul: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":578}],"decl_id":null,"docs":" Performs multiplication that returns `None` instead of wrapping around on underflow or\n overflow.\n","sig":null,"attributes":[{"value":"/ Performs multiplication that returns `None` instead of wrapping around on underflow or","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":142538,"byte_end":142628,"line_start":61,"line_end":61,"column_start":1,"column_end":91}},{"value":"/ overflow.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":142629,"byte_end":142642,"line_start":62,"line_end":62,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":142837,"byte_end":142848,"line_start":66,"line_end":66,"column_start":8,"column_end":19},"name":"checked_mul","qualname":"::ops::checked::CheckedMul::checked_mul","value":"pub fn checked_mul(&Self, &Self) -> Option<Self>","parent":{"krate":0,"index":577},"children":[],"decl_id":null,"docs":" Multiplies two numbers, checking for underflow or overflow. If underflow\n or overflow happens, `None` is returned.\n","sig":null,"attributes":[{"value":"/ Multiplies two numbers, checking for underflow or overflow. If underflow","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":142704,"byte_end":142780,"line_start":64,"line_end":64,"column_start":5,"column_end":81}},{"value":"/ or overflow happens, `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":142785,"byte_end":142829,"line_start":65,"line_end":65,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":579},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":143621,"byte_end":143631,"line_start":87,"line_end":87,"column_start":11,"column_end":21},"name":"CheckedDiv","qualname":"::ops::checked::CheckedDiv","value":"CheckedDiv: Sized + Div<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":580}],"decl_id":null,"docs":" Performs division that returns `None` instead of panicking on division by zero and instead of\n wrapping around on underflow and overflow.\n","sig":null,"attributes":[{"value":"/ Performs division that returns `None` instead of panicking on division by zero and instead of","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":143466,"byte_end":143563,"line_start":85,"line_end":85,"column_start":1,"column_end":98}},{"value":"/ wrapping around on underflow and overflow.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":143564,"byte_end":143610,"line_start":86,"line_end":86,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":143811,"byte_end":143822,"line_start":90,"line_end":90,"column_start":8,"column_end":19},"name":"checked_div","qualname":"::ops::checked::CheckedDiv::checked_div","value":"pub fn checked_div(&Self, &Self) -> Option<Self>","parent":{"krate":0,"index":579},"children":[],"decl_id":null,"docs":" Divides two numbers, checking for underflow, overflow and division by\n zero. If any of that happens, `None` is returned.\n","sig":null,"attributes":[{"value":"/ Divides two numbers, checking for underflow, overflow and division by","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":143672,"byte_end":143745,"line_start":88,"line_end":88,"column_start":5,"column_end":78}},{"value":"/ zero. If any of that happens, `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":143750,"byte_end":143803,"line_start":89,"line_end":89,"column_start":5,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":581},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":144608,"byte_end":144618,"line_start":111,"line_end":111,"column_start":11,"column_end":21},"name":"CheckedRem","qualname":"::ops::checked::CheckedRem","value":"CheckedRem: Sized + Rem<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":582}],"decl_id":null,"docs":" Performs an integral remainder that returns `None` instead of panicking on division by zero and\n instead of wrapping around on underflow and overflow.\n","sig":null,"attributes":[{"value":"/ Performs an integral remainder that returns `None` instead of panicking on division by zero and","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":144440,"byte_end":144539,"line_start":109,"line_end":109,"column_start":1,"column_end":100}},{"value":"/ instead of wrapping around on underflow and overflow.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":144540,"byte_end":144597,"line_start":110,"line_end":110,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":145412,"byte_end":145423,"line_start":131,"line_end":131,"column_start":8,"column_end":19},"name":"checked_rem","qualname":"::ops::checked::CheckedRem::checked_rem","value":"pub fn checked_rem(&Self, &Self) -> Option<Self>","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":" Finds the remainder of dividing two numbers, checking for underflow, overflow and division\n by zero. If any of that happens, `None` is returned.","sig":null,"attributes":[{"value":"/ Finds the remainder of dividing two numbers, checking for underflow, overflow and division","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":144659,"byte_end":144753,"line_start":112,"line_end":112,"column_start":5,"column_end":99}},{"value":"/ by zero. If any of that happens, `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":144758,"byte_end":144814,"line_start":113,"line_end":113,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":144819,"byte_end":144822,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":144827,"byte_end":144841,"line_start":115,"line_end":115,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":144846,"byte_end":144849,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":144854,"byte_end":144861,"line_start":117,"line_end":117,"column_start":5,"column_end":12}},{"value":"/ use num_traits::CheckedRem;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":144866,"byte_end":144897,"line_start":118,"line_end":118,"column_start":5,"column_end":36}},{"value":"/ use std::i32::MIN;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":144902,"byte_end":144924,"line_start":119,"line_end":119,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":144929,"byte_end":144932,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(CheckedRem::checked_rem(&10, &7), Some(3));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":144937,"byte_end":144995,"line_start":121,"line_end":121,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(CheckedRem::checked_rem(&10, &-7), Some(3));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":145000,"byte_end":145059,"line_start":122,"line_end":122,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(CheckedRem::checked_rem(&-10, &7), Some(-3));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":145064,"byte_end":145124,"line_start":123,"line_end":123,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(CheckedRem::checked_rem(&-10, &-7), Some(-3));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":145129,"byte_end":145190,"line_start":124,"line_end":124,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":145195,"byte_end":145198,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(CheckedRem::checked_rem(&10, &0), None);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":145203,"byte_end":145258,"line_start":126,"line_end":126,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":145263,"byte_end":145266,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(CheckedRem::checked_rem(&MIN, &1), Some(0));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":145271,"byte_end":145330,"line_start":128,"line_end":128,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(CheckedRem::checked_rem(&MIN, &-1), None);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":145335,"byte_end":145392,"line_start":129,"line_end":129,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":145397,"byte_end":145404,"line_start":130,"line_end":130,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":584},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":146387,"byte_end":146397,"line_start":162,"line_end":162,"column_start":11,"column_end":21},"name":"CheckedNeg","qualname":"::ops::checked::CheckedNeg","value":"CheckedNeg: Sized","parent":null,"children":[{"krate":0,"index":585}],"decl_id":null,"docs":" Performs negation that returns `None` if the result can't be represented.\n","sig":null,"attributes":[{"value":"/ Performs negation that returns `None` if the result can't be represented.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":146299,"byte_end":146376,"line_start":161,"line_end":161,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":147047,"byte_end":147058,"line_start":179,"line_end":179,"column_start":8,"column_end":19},"name":"checked_neg","qualname":"::ops::checked::CheckedNeg::checked_neg","value":"pub fn checked_neg(&Self) -> Option<Self>","parent":{"krate":0,"index":584},"children":[],"decl_id":null,"docs":" Negates a number, returning `None` for results that can't be represented, like signed `MIN`\n values that can't be positive, or non-zero unsigned values that can't be negative.","sig":null,"attributes":[{"value":"/ Negates a number, returning `None` for results that can't be represented, like signed `MIN`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":146411,"byte_end":146506,"line_start":163,"line_end":163,"column_start":5,"column_end":100}},{"value":"/ values that can't be positive, or non-zero unsigned values that can't be negative.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":146511,"byte_end":146597,"line_start":164,"line_end":164,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":146602,"byte_end":146605,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":146610,"byte_end":146624,"line_start":166,"line_end":166,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":146629,"byte_end":146632,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":146637,"byte_end":146644,"line_start":168,"line_end":168,"column_start":5,"column_end":12}},{"value":"/ use num_traits::CheckedNeg;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":146649,"byte_end":146680,"line_start":169,"line_end":169,"column_start":5,"column_end":36}},{"value":"/ use std::i32::MIN;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":146685,"byte_end":146707,"line_start":170,"line_end":170,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":146712,"byte_end":146715,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(CheckedNeg::checked_neg(&1_i32), Some(-1));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":146720,"byte_end":146778,"line_start":172,"line_end":172,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(CheckedNeg::checked_neg(&-1_i32), Some(1));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":146783,"byte_end":146841,"line_start":173,"line_end":173,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(CheckedNeg::checked_neg(&MIN), None);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":146846,"byte_end":146898,"line_start":174,"line_end":174,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":146903,"byte_end":146906,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(CheckedNeg::checked_neg(&0_u32), Some(0));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":146911,"byte_end":146968,"line_start":176,"line_end":176,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(CheckedNeg::checked_neg(&1_u32), None);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":146973,"byte_end":147027,"line_start":177,"line_end":177,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":147032,"byte_end":147039,"line_start":178,"line_end":178,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":586},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":147836,"byte_end":147846,"line_start":200,"line_end":200,"column_start":11,"column_end":21},"name":"CheckedShl","qualname":"::ops::checked::CheckedShl","value":"CheckedShl: Sized + Shl<u32, Output = Self>","parent":null,"children":[{"krate":0,"index":587}],"decl_id":null,"docs":" Performs a left shift that returns `None` on shifts larger than\n the type width.\n","sig":null,"attributes":[{"value":"/ Performs a left shift that returns `None` on shifts larger than","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":147738,"byte_end":147805,"line_start":198,"line_end":198,"column_start":1,"column_end":68}},{"value":"/ the type width.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":147806,"byte_end":147825,"line_start":199,"line_end":199,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":148405,"byte_end":148416,"line_start":214,"line_end":214,"column_start":8,"column_end":19},"name":"checked_shl","qualname":"::ops::checked::CheckedShl::checked_shl","value":"pub fn checked_shl(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":586},"children":[],"decl_id":null,"docs":" Checked shift left. Computes `self << rhs`, returning `None`\n if `rhs` is larger than or equal to the number of bits in `self`.","sig":null,"attributes":[{"value":"/ Checked shift left. Computes `self << rhs`, returning `None`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":147886,"byte_end":147950,"line_start":201,"line_end":201,"column_start":5,"column_end":69}},{"value":"/ if `rhs` is larger than or equal to the number of bits in `self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":147955,"byte_end":148024,"line_start":202,"line_end":202,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":148029,"byte_end":148032,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":148037,"byte_end":148044,"line_start":204,"line_end":204,"column_start":5,"column_end":12}},{"value":"/ use num_traits::CheckedShl;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":148049,"byte_end":148080,"line_start":205,"line_end":205,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":148085,"byte_end":148088,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ let x: u16 = 0x0001;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":148093,"byte_end":148117,"line_start":207,"line_end":207,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":148122,"byte_end":148125,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(CheckedShl::checked_shl(&x, 0),  Some(0x0001));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":148130,"byte_end":148192,"line_start":209,"line_end":209,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(CheckedShl::checked_shl(&x, 1),  Some(0x0002));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":148197,"byte_end":148259,"line_start":210,"line_end":210,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(CheckedShl::checked_shl(&x, 15), Some(0x8000));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":148264,"byte_end":148326,"line_start":211,"line_end":211,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(CheckedShl::checked_shl(&x, 16), None);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":148331,"byte_end":148385,"line_start":212,"line_end":212,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":148390,"byte_end":148397,"line_start":213,"line_end":213,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":589},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":149478,"byte_end":149488,"line_start":246,"line_end":246,"column_start":11,"column_end":21},"name":"CheckedShr","qualname":"::ops::checked::CheckedShr","value":"CheckedShr: Sized + Shr<u32, Output = Self>","parent":null,"children":[{"krate":0,"index":590}],"decl_id":null,"docs":" Performs a right shift that returns `None` on shifts larger than\n the type width.\n","sig":null,"attributes":[{"value":"/ Performs a right shift that returns `None` on shifts larger than","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":149379,"byte_end":149447,"line_start":244,"line_end":244,"column_start":1,"column_end":69}},{"value":"/ the type width.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":149448,"byte_end":149467,"line_start":245,"line_end":245,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":150048,"byte_end":150059,"line_start":260,"line_end":260,"column_start":8,"column_end":19},"name":"checked_shr","qualname":"::ops::checked::CheckedShr::checked_shr","value":"pub fn checked_shr(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":589},"children":[],"decl_id":null,"docs":" Checked shift right. Computes `self >> rhs`, returning `None`\n if `rhs` is larger than or equal to the number of bits in `self`.","sig":null,"attributes":[{"value":"/ Checked shift right. Computes `self >> rhs`, returning `None`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":149528,"byte_end":149593,"line_start":247,"line_end":247,"column_start":5,"column_end":70}},{"value":"/ if `rhs` is larger than or equal to the number of bits in `self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":149598,"byte_end":149667,"line_start":248,"line_end":248,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":149672,"byte_end":149675,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":149680,"byte_end":149687,"line_start":250,"line_end":250,"column_start":5,"column_end":12}},{"value":"/ use num_traits::CheckedShr;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":149692,"byte_end":149723,"line_start":251,"line_end":251,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":149728,"byte_end":149731,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ let x: u16 = 0x8000;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":149736,"byte_end":149760,"line_start":253,"line_end":253,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":149765,"byte_end":149768,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(CheckedShr::checked_shr(&x, 0),  Some(0x8000));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":149773,"byte_end":149835,"line_start":255,"line_end":255,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(CheckedShr::checked_shr(&x, 1),  Some(0x4000));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":149840,"byte_end":149902,"line_start":256,"line_end":256,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(CheckedShr::checked_shr(&x, 15), Some(0x0001));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":149907,"byte_end":149969,"line_start":257,"line_end":257,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(CheckedShr::checked_shr(&x, 16), None);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":149974,"byte_end":150028,"line_start":258,"line_end":258,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":150033,"byte_end":150040,"line_start":259,"line_end":259,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":591},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"euclid","qualname":"::ops::euclid","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","parent":null,"children":[{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":596},{"krate":0,"index":599},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":2808},{"krate":0,"index":2811},{"krate":0,"index":2814},{"krate":0,"index":2817},{"krate":0,"index":2820},{"krate":0,"index":2823},{"krate":0,"index":2826},{"krate":0,"index":2829},{"krate":0,"index":2832},{"krate":0,"index":2835},{"krate":0,"index":2838},{"krate":0,"index":2841},{"krate":0,"index":605},{"krate":0,"index":608},{"krate":0,"index":611},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":2844},{"krate":0,"index":2847},{"krate":0,"index":2850},{"krate":0,"index":2853},{"krate":0,"index":2856},{"krate":0,"index":2859},{"krate":0,"index":2862},{"krate":0,"index":2865},{"krate":0,"index":2868},{"krate":0,"index":2871},{"krate":0,"index":2874},{"krate":0,"index":2877}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":599},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":150787,"byte_end":150793,"line_start":3,"line_end":3,"column_start":11,"column_end":17},"name":"Euclid","qualname":"::ops::euclid::Euclid","value":"Euclid: Sized + Div<Self, Output = Self> + Rem<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":600},{"krate":0,"index":601}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":151571,"byte_end":151581,"line_start":23,"line_end":23,"column_start":8,"column_end":18},"name":"div_euclid","qualname":"::ops::euclid::Euclid::div_euclid","value":"pub fn div_euclid(&Self, &Self) -> Self","parent":{"krate":0,"index":599},"children":[],"decl_id":null,"docs":" Calculates Euclidean division, the matching method for `rem_euclid`.","sig":null,"attributes":[{"value":"/ Calculates Euclidean division, the matching method for `rem_euclid`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":150861,"byte_end":150933,"line_start":4,"line_end":4,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":150938,"byte_end":150941,"line_start":5,"line_end":5,"column_start":5,"column_end":8}},{"value":"/ This computes the integer `n` such that","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":150946,"byte_end":150989,"line_start":6,"line_end":6,"column_start":5,"column_end":48}},{"value":"/ `self = n * v + self.rem_euclid(v)`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":150994,"byte_end":151034,"line_start":7,"line_end":7,"column_start":5,"column_end":45}},{"value":"/ In other words, the result is `self / v` rounded to the integer `n`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":151039,"byte_end":151110,"line_start":8,"line_end":8,"column_start":5,"column_end":76}},{"value":"/ such that `self >= n * v`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":151115,"byte_end":151145,"line_start":9,"line_end":9,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":151150,"byte_end":151153,"line_start":10,"line_end":10,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":151158,"byte_end":151172,"line_start":11,"line_end":11,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":151177,"byte_end":151180,"line_start":12,"line_end":12,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":151185,"byte_end":151192,"line_start":13,"line_end":13,"column_start":5,"column_end":12}},{"value":"/ use num_traits::Euclid;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":151197,"byte_end":151224,"line_start":14,"line_end":14,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":151229,"byte_end":151232,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ let a: i32 = 7;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":151237,"byte_end":151256,"line_start":16,"line_end":16,"column_start":5,"column_end":24}},{"value":"/ let b: i32 = 4;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":151261,"byte_end":151280,"line_start":17,"line_end":17,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(Euclid::div_euclid(&a, &b), 1); // 7 > 4 * 1","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":151285,"byte_end":151344,"line_start":18,"line_end":18,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(Euclid::div_euclid(&-a, &b), -2); // -7 >= 4 * -2","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":151349,"byte_end":151413,"line_start":19,"line_end":19,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(Euclid::div_euclid(&a, &-b), -1); // 7 >= -4 * -1","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":151418,"byte_end":151482,"line_start":20,"line_end":20,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(Euclid::div_euclid(&-a, &-b), 2); // -7 >= -4 * 2","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":151487,"byte_end":151551,"line_start":21,"line_end":21,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":151556,"byte_end":151563,"line_start":22,"line_end":22,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":152612,"byte_end":152622,"line_start":48,"line_end":48,"column_start":8,"column_end":18},"name":"rem_euclid","qualname":"::ops::euclid::Euclid::rem_euclid","value":"pub fn rem_euclid(&Self, &Self) -> Self","parent":{"krate":0,"index":599},"children":[],"decl_id":null,"docs":" Calculates the least nonnegative remainder of `self (mod v)`.","sig":null,"attributes":[{"value":"/ Calculates the least nonnegative remainder of `self (mod v)`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":151613,"byte_end":151678,"line_start":25,"line_end":25,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":151683,"byte_end":151686,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ In particular, the return value `r` satisfies `0.0 <= r < v.abs()` in","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":151691,"byte_end":151764,"line_start":27,"line_end":27,"column_start":5,"column_end":78}},{"value":"/ most cases. However, due to a floating point round-off error it can","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":151769,"byte_end":151840,"line_start":28,"line_end":28,"column_start":5,"column_end":76}},{"value":"/ result in `r == v.abs()`, violating the mathematical definition, if","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":151845,"byte_end":151916,"line_start":29,"line_end":29,"column_start":5,"column_end":76}},{"value":"/ `self` is much smaller than `v.abs()` in magnitude and `self < 0.0`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":151921,"byte_end":151993,"line_start":30,"line_end":30,"column_start":5,"column_end":77}},{"value":"/ This result is not an element of the function's codomain, but it is the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":151998,"byte_end":152073,"line_start":31,"line_end":31,"column_start":5,"column_end":80}},{"value":"/ closest floating point number in the real numbers and thus fulfills the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":152078,"byte_end":152153,"line_start":32,"line_end":32,"column_start":5,"column_end":80}},{"value":"/ property `self == self.div_euclid(v) * v + self.rem_euclid(v)`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":152158,"byte_end":152224,"line_start":33,"line_end":33,"column_start":5,"column_end":71}},{"value":"/ approximatively.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":152229,"byte_end":152249,"line_start":34,"line_end":34,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":152254,"byte_end":152257,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":152262,"byte_end":152276,"line_start":36,"line_end":36,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":152281,"byte_end":152284,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":152289,"byte_end":152296,"line_start":38,"line_end":38,"column_start":5,"column_end":12}},{"value":"/ use num_traits::Euclid;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":152301,"byte_end":152328,"line_start":39,"line_end":39,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":152333,"byte_end":152336,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ let a: i32 = 7;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":152341,"byte_end":152360,"line_start":41,"line_end":41,"column_start":5,"column_end":24}},{"value":"/ let b: i32 = 4;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":152365,"byte_end":152384,"line_start":42,"line_end":42,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(Euclid::rem_euclid(&a, &b), 3);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":152389,"byte_end":152435,"line_start":43,"line_end":43,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(Euclid::rem_euclid(&-a, &b), 1);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":152440,"byte_end":152487,"line_start":44,"line_end":44,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(Euclid::rem_euclid(&a, &-b), 3);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":152492,"byte_end":152539,"line_start":45,"line_end":45,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(Euclid::rem_euclid(&-a, &-b), 1);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":152544,"byte_end":152592,"line_start":46,"line_end":46,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":152597,"byte_end":152604,"line_start":47,"line_end":47,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":611},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":155520,"byte_end":155533,"line_start":173,"line_end":173,"column_start":11,"column_end":24},"name":"CheckedEuclid","qualname":"::ops::euclid::CheckedEuclid","value":"CheckedEuclid: Euclid","parent":null,"children":[{"krate":0,"index":612},{"krate":0,"index":613}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":155711,"byte_end":155729,"line_start":176,"line_end":176,"column_start":8,"column_end":26},"name":"checked_div_euclid","qualname":"::ops::euclid::CheckedEuclid::checked_div_euclid","value":"pub fn checked_div_euclid(&Self, &Self) -> Option<Self>","parent":{"krate":0,"index":611},"children":[],"decl_id":null,"docs":" Performs euclid division that returns `None` instead of panicking on division by zero\n and instead of wrapping around on underflow and overflow.\n","sig":null,"attributes":[{"value":"/ Performs euclid division that returns `None` instead of panicking on division by zero","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":155548,"byte_end":155637,"line_start":174,"line_end":174,"column_start":5,"column_end":94}},{"value":"/ and instead of wrapping around on underflow and overflow.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":155642,"byte_end":155703,"line_start":175,"line_end":175,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":613},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":155939,"byte_end":155957,"line_start":180,"line_end":180,"column_start":8,"column_end":26},"name":"checked_rem_euclid","qualname":"::ops::euclid::CheckedEuclid::checked_rem_euclid","value":"pub fn checked_rem_euclid(&Self, &Self) -> Option<Self>","parent":{"krate":0,"index":611},"children":[],"decl_id":null,"docs":" Finds the euclid remainder of dividing two numbers, checking for underflow, overflow and\n division by zero. If any of that happens, `None` is returned.\n","sig":null,"attributes":[{"value":"/ Finds the euclid remainder of dividing two numbers, checking for underflow, overflow and","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":155769,"byte_end":155861,"line_start":178,"line_end":178,"column_start":5,"column_end":97}},{"value":"/ division by zero. If any of that happens, `None` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":155866,"byte_end":155931,"line_start":179,"line_end":179,"column_start":5,"column_end":70}}]},{"kind":"Mod","id":{"krate":0,"index":617},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/inv.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"inv","qualname":"::ops::inv","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/inv.rs","parent":null,"children":[{"krate":0,"index":618},{"krate":0,"index":621},{"krate":0,"index":624},{"krate":0,"index":627},{"krate":0,"index":631}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":618},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/inv.rs","byte_start":161239,"byte_end":161242,"line_start":2,"line_end":2,"column_start":11,"column_end":14},"name":"Inv","qualname":"::ops::inv::Inv","value":"Inv","parent":null,"children":[{"krate":0,"index":619},{"krate":0,"index":620}],"decl_id":null,"docs":" Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.\n","sig":null,"attributes":[{"value":"/ Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/inv.rs","byte_start":161140,"byte_end":161228,"line_start":1,"line_end":1,"column_start":1,"column_end":89}}]},{"kind":"Type","id":{"krate":0,"index":619},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/inv.rs","byte_start":161302,"byte_end":161308,"line_start":4,"line_end":4,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::inv::Inv::Output","value":"type Output;","parent":{"krate":0,"index":618},"children":[],"decl_id":null,"docs":" The result after applying the operator.\n","sig":null,"attributes":[{"value":"/ The result after applying the operator.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/inv.rs","byte_start":161249,"byte_end":161292,"line_start":3,"line_end":3,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/inv.rs","byte_start":161587,"byte_end":161590,"line_start":17,"line_end":17,"column_start":8,"column_end":11},"name":"inv","qualname":"::ops::inv::Inv::inv","value":"pub fn inv(Self) -> Self::Output","parent":{"krate":0,"index":618},"children":[],"decl_id":null,"docs":" Returns the multiplicative inverse of `self`.","sig":null,"attributes":[{"value":"/ Returns the multiplicative inverse of `self`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/inv.rs","byte_start":161315,"byte_end":161364,"line_start":6,"line_end":6,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/inv.rs","byte_start":161369,"byte_end":161372,"line_start":7,"line_end":7,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/inv.rs","byte_start":161377,"byte_end":161391,"line_start":8,"line_end":8,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/inv.rs","byte_start":161396,"byte_end":161399,"line_start":9,"line_end":9,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/inv.rs","byte_start":161404,"byte_end":161411,"line_start":10,"line_end":10,"column_start":5,"column_end":12}},{"value":"/ use std::f64::INFINITY;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/inv.rs","byte_start":161416,"byte_end":161443,"line_start":11,"line_end":11,"column_start":5,"column_end":32}},{"value":"/ use num_traits::Inv;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/inv.rs","byte_start":161448,"byte_end":161472,"line_start":12,"line_end":12,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/inv.rs","byte_start":161477,"byte_end":161480,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(7.0.inv() * 7.0, 1.0);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/inv.rs","byte_start":161485,"byte_end":161522,"line_start":14,"line_end":14,"column_start":5,"column_end":42}},{"value":"/ assert_eq!((-0.0).inv(), -INFINITY);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/inv.rs","byte_start":161527,"byte_end":161567,"line_start":15,"line_end":15,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/inv.rs","byte_start":161572,"byte_end":161579,"line_start":16,"line_end":16,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":635},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mul_add","qualname":"::ops::mul_add","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","parent":null,"children":[{"krate":0,"index":636},{"krate":0,"index":641},{"krate":0,"index":645},{"krate":0,"index":2880},{"krate":0,"index":2883},{"krate":0,"index":2886},{"krate":0,"index":2889},{"krate":0,"index":2892},{"krate":0,"index":2895},{"krate":0,"index":2898},{"krate":0,"index":2901},{"krate":0,"index":2904},{"krate":0,"index":2907},{"krate":0,"index":2910},{"krate":0,"index":2913},{"krate":0,"index":646},{"krate":0,"index":2916},{"krate":0,"index":2918},{"krate":0,"index":2920},{"krate":0,"index":2922},{"krate":0,"index":2924},{"krate":0,"index":2926},{"krate":0,"index":2928},{"krate":0,"index":2930},{"krate":0,"index":2932},{"krate":0,"index":2934},{"krate":0,"index":2936},{"krate":0,"index":2938}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":636},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":162715,"byte_end":162721,"line_start":23,"line_end":23,"column_start":11,"column_end":17},"name":"MulAdd","qualname":"::ops::mul_add::MulAdd","value":"MulAdd<A = Self, B = Self>","parent":null,"children":[{"krate":0,"index":639},{"krate":0,"index":640}],"decl_id":null,"docs":" Fused multiply-add. Computes `(self * a) + b` with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.","sig":null,"attributes":[{"value":"/ Fused multiply-add. Computes `(self * a) + b` with only one rounding","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":162072,"byte_end":162144,"line_start":1,"line_end":1,"column_start":1,"column_end":73}},{"value":"/ error, yielding a more accurate result than an unfused multiply-add.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":162145,"byte_end":162217,"line_start":2,"line_end":2,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":162218,"byte_end":162221,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ Using `mul_add` can be more performant than an unfused multiply-add if","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":162222,"byte_end":162296,"line_start":4,"line_end":4,"column_start":1,"column_end":75}},{"value":"/ the target architecture has a dedicated `fma` CPU instruction.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":162297,"byte_end":162363,"line_start":5,"line_end":5,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":162364,"byte_end":162367,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Note that `A` and `B` are `Self` by default, but this is not mandatory.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":162368,"byte_end":162443,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":162444,"byte_end":162447,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":162448,"byte_end":162461,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":162462,"byte_end":162465,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":162466,"byte_end":162473,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"/ use std::f32;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":162474,"byte_end":162491,"line_start":12,"line_end":12,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":162492,"byte_end":162495,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ let m = 10.0_f32;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":162496,"byte_end":162517,"line_start":14,"line_end":14,"column_start":1,"column_end":22}},{"value":"/ let x = 4.0_f32;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":162518,"byte_end":162538,"line_start":15,"line_end":15,"column_start":1,"column_end":21}},{"value":"/ let b = 60.0_f32;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":162539,"byte_end":162560,"line_start":16,"line_end":16,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":162561,"byte_end":162564,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ // 100.0","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":162565,"byte_end":162577,"line_start":18,"line_end":18,"column_start":1,"column_end":13}},{"value":"/ let abs_difference = (m.mul_add(x, b) - (m*x + b)).abs();","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":162578,"byte_end":162639,"line_start":19,"line_end":19,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":162640,"byte_end":162643,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ assert!(abs_difference <= 100.0 * f32::EPSILON);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":162644,"byte_end":162696,"line_start":21,"line_end":21,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":162697,"byte_end":162704,"line_start":22,"line_end":22,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":639},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":162819,"byte_end":162825,"line_start":25,"line_end":25,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::mul_add::MulAdd::Output","value":"type Output;","parent":{"krate":0,"index":636},"children":[],"decl_id":null,"docs":" The resulting type after applying the fused multiply-add.\n","sig":null,"attributes":[{"value":"/ The resulting type after applying the fused multiply-add.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":162748,"byte_end":162809,"line_start":24,"line_end":24,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":162886,"byte_end":162893,"line_start":28,"line_end":28,"column_start":8,"column_end":15},"name":"mul_add","qualname":"::ops::mul_add::MulAdd::mul_add","value":"pub fn mul_add(Self, A, B) -> Self::Output","parent":{"krate":0,"index":636},"children":[],"decl_id":null,"docs":" Performs the fused multiply-add operation.\n","sig":null,"attributes":[{"value":"/ Performs the fused multiply-add operation.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":162832,"byte_end":162878,"line_start":27,"line_end":27,"column_start":5,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":641},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":162991,"byte_end":163003,"line_start":32,"line_end":32,"column_start":11,"column_end":23},"name":"MulAddAssign","qualname":"::ops::mul_add::MulAddAssign","value":"MulAddAssign<A = Self, B = Self>","parent":null,"children":[{"krate":0,"index":644}],"decl_id":null,"docs":" The fused multiply-add assignment operation.\n","sig":null,"attributes":[{"value":"/ The fused multiply-add assignment operation.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":162932,"byte_end":162980,"line_start":31,"line_end":31,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":163084,"byte_end":163098,"line_start":34,"line_end":34,"column_start":8,"column_end":22},"name":"mul_add_assign","qualname":"::ops::mul_add::MulAddAssign::mul_add_assign","value":"pub fn mul_add_assign(&mut Self, A, B)","parent":{"krate":0,"index":641},"children":[],"decl_id":null,"docs":" Performs the fused multiply-add operation.\n","sig":null,"attributes":[{"value":"/ Performs the fused multiply-add operation.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mul_add.rs","byte_start":163030,"byte_end":163076,"line_start":33,"line_end":33,"column_start":5,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":647},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/overflowing.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"overflowing","qualname":"::ops::overflowing","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/overflowing.rs","parent":null,"children":[{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":652},{"krate":0,"index":655},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":662},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":669},{"krate":0,"index":672},{"krate":0,"index":675},{"krate":0,"index":678},{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":685},{"krate":0,"index":688},{"krate":0,"index":691},{"krate":0,"index":694},{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":2940},{"krate":0,"index":2942},{"krate":0,"index":2944},{"krate":0,"index":2946},{"krate":0,"index":2948},{"krate":0,"index":2950},{"krate":0,"index":2952},{"krate":0,"index":2954},{"krate":0,"index":2956},{"krate":0,"index":2958},{"krate":0,"index":2960},{"krate":0,"index":2962},{"krate":0,"index":700},{"krate":0,"index":2964},{"krate":0,"index":2966},{"krate":0,"index":2968},{"krate":0,"index":2970},{"krate":0,"index":2972},{"krate":0,"index":2974},{"krate":0,"index":2976},{"krate":0,"index":2978},{"krate":0,"index":2980},{"krate":0,"index":2982},{"krate":0,"index":2984},{"krate":0,"index":2986},{"krate":0,"index":702},{"krate":0,"index":2988},{"krate":0,"index":2990},{"krate":0,"index":2992},{"krate":0,"index":2994},{"krate":0,"index":2996},{"krate":0,"index":2998},{"krate":0,"index":3000},{"krate":0,"index":3002},{"krate":0,"index":3004},{"krate":0,"index":3006},{"krate":0,"index":3008},{"krate":0,"index":3010}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":698},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/overflowing.rs","byte_start":166473,"byte_end":166487,"line_start":19,"line_end":19,"column_start":11,"column_end":25},"name":"OverflowingAdd","qualname":"::ops::overflowing::OverflowingAdd","value":"OverflowingAdd: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":699}],"decl_id":null,"docs":" Performs addition with a flag for overflow.\n","sig":null,"attributes":[{"value":"/ Performs addition with a flag for overflow.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/overflowing.rs","byte_start":166415,"byte_end":166462,"line_start":18,"line_end":18,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":699},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/overflowing.rs","byte_start":166721,"byte_end":166736,"line_start":22,"line_end":22,"column_start":8,"column_end":23},"name":"overflowing_add","qualname":"::ops::overflowing::OverflowingAdd::overflowing_add","value":"pub fn overflowing_add(&Self, &Self) -> (Self, bool)","parent":{"krate":0,"index":698},"children":[],"decl_id":null,"docs":" Returns a tuple of the sum along with a boolean indicating whether an arithmetic overflow would occur.\n If an overflow would have occurred then the wrapped value is returned.\n","sig":null,"attributes":[{"value":"/ Returns a tuple of the sum along with a boolean indicating whether an arithmetic overflow would occur.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/overflowing.rs","byte_start":166528,"byte_end":166634,"line_start":20,"line_end":20,"column_start":5,"column_end":111}},{"value":"/ If an overflow would have occurred then the wrapped value is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/overflowing.rs","byte_start":166639,"byte_end":166713,"line_start":21,"line_end":21,"column_start":5,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":700},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/overflowing.rs","byte_start":167560,"byte_end":167574,"line_start":42,"line_end":42,"column_start":11,"column_end":25},"name":"OverflowingSub","qualname":"::ops::overflowing::OverflowingSub","value":"OverflowingSub: Sized + Sub<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":701}],"decl_id":null,"docs":" Performs substraction with a flag for overflow.\n","sig":null,"attributes":[{"value":"/ Performs substraction with a flag for overflow.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/overflowing.rs","byte_start":167498,"byte_end":167549,"line_start":41,"line_end":41,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/overflowing.rs","byte_start":167815,"byte_end":167830,"line_start":45,"line_end":45,"column_start":8,"column_end":23},"name":"overflowing_sub","qualname":"::ops::overflowing::OverflowingSub::overflowing_sub","value":"pub fn overflowing_sub(&Self, &Self) -> (Self, bool)","parent":{"krate":0,"index":700},"children":[],"decl_id":null,"docs":" Returns a tuple of the difference along with a boolean indicating whether an arithmetic overflow would occur.\n If an overflow would have occurred then the wrapped value is returned.\n","sig":null,"attributes":[{"value":"/ Returns a tuple of the difference along with a boolean indicating whether an arithmetic overflow would occur.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/overflowing.rs","byte_start":167615,"byte_end":167728,"line_start":43,"line_end":43,"column_start":5,"column_end":118}},{"value":"/ If an overflow would have occurred then the wrapped value is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/overflowing.rs","byte_start":167733,"byte_end":167807,"line_start":44,"line_end":44,"column_start":5,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":702},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/overflowing.rs","byte_start":168656,"byte_end":168670,"line_start":65,"line_end":65,"column_start":11,"column_end":25},"name":"OverflowingMul","qualname":"::ops::overflowing::OverflowingMul","value":"OverflowingMul: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":703}],"decl_id":null,"docs":" Performs multiplication with a flag for overflow.\n","sig":null,"attributes":[{"value":"/ Performs multiplication with a flag for overflow.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/overflowing.rs","byte_start":168592,"byte_end":168645,"line_start":64,"line_end":64,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":703},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/overflowing.rs","byte_start":168908,"byte_end":168923,"line_start":68,"line_end":68,"column_start":8,"column_end":23},"name":"overflowing_mul","qualname":"::ops::overflowing::OverflowingMul::overflowing_mul","value":"pub fn overflowing_mul(&Self, &Self) -> (Self, bool)","parent":{"krate":0,"index":702},"children":[],"decl_id":null,"docs":" Returns a tuple of the product along with a boolean indicating whether an arithmetic overflow would occur.\n If an overflow would have occurred then the wrapped value is returned.\n","sig":null,"attributes":[{"value":"/ Returns a tuple of the product along with a boolean indicating whether an arithmetic overflow would occur.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/overflowing.rs","byte_start":168711,"byte_end":168821,"line_start":66,"line_end":66,"column_start":5,"column_end":115}},{"value":"/ If an overflow would have occurred then the wrapped value is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/overflowing.rs","byte_start":168826,"byte_end":168900,"line_start":67,"line_end":67,"column_start":5,"column_end":79}}]},{"kind":"Mod","id":{"krate":0,"index":704},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"saturating","qualname":"::ops::saturating","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","parent":null,"children":[{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":709},{"krate":0,"index":712},{"krate":0,"index":715},{"krate":0,"index":718},{"krate":0,"index":3012},{"krate":0,"index":3015},{"krate":0,"index":3018},{"krate":0,"index":3021},{"krate":0,"index":3024},{"krate":0,"index":3027},{"krate":0,"index":3030},{"krate":0,"index":3033},{"krate":0,"index":3036},{"krate":0,"index":3039},{"krate":0,"index":3042},{"krate":0,"index":3045},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":3048},{"krate":0,"index":3050},{"krate":0,"index":3052},{"krate":0,"index":3054},{"krate":0,"index":3056},{"krate":0,"index":3058},{"krate":0,"index":3060},{"krate":0,"index":3062},{"krate":0,"index":3064},{"krate":0,"index":3066},{"krate":0,"index":3068},{"krate":0,"index":3070},{"krate":0,"index":722},{"krate":0,"index":3072},{"krate":0,"index":3074},{"krate":0,"index":3076},{"krate":0,"index":3078},{"krate":0,"index":3080},{"krate":0,"index":3082},{"krate":0,"index":3084},{"krate":0,"index":3086},{"krate":0,"index":3088},{"krate":0,"index":3090},{"krate":0,"index":3092},{"krate":0,"index":3094},{"krate":0,"index":724},{"krate":0,"index":3096},{"krate":0,"index":3098},{"krate":0,"index":3100},{"krate":0,"index":3102},{"krate":0,"index":3104},{"krate":0,"index":3106},{"krate":0,"index":3108},{"krate":0,"index":3110},{"krate":0,"index":3112},{"krate":0,"index":3114},{"krate":0,"index":3116},{"krate":0,"index":3118}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":715},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":170565,"byte_end":170575,"line_start":5,"line_end":5,"column_start":11,"column_end":21},"name":"Saturating","qualname":"::ops::saturating::Saturating","value":"Saturating","parent":null,"children":[{"krate":0,"index":716},{"krate":0,"index":717}],"decl_id":null,"docs":" Saturating math operations. Deprecated, use `SaturatingAdd`, `SaturatingSub` and\n `SaturatingMul` instead.\n","sig":null,"attributes":[{"value":"/ Saturating math operations. Deprecated, use `SaturatingAdd`, `SaturatingSub` and","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":170441,"byte_end":170525,"line_start":3,"line_end":3,"column_start":1,"column_end":85}},{"value":"/ `SaturatingMul` instead.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":170526,"byte_end":170554,"line_start":4,"line_end":4,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":170701,"byte_end":170715,"line_start":8,"line_end":8,"column_start":8,"column_end":22},"name":"saturating_add","qualname":"::ops::saturating::Saturating::saturating_add","value":"pub fn saturating_add(Self, Self) -> Self","parent":{"krate":0,"index":715},"children":[],"decl_id":null,"docs":" Saturating addition operator.\n Returns a+b, saturating at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating addition operator.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":170582,"byte_end":170615,"line_start":6,"line_end":6,"column_start":5,"column_end":38}},{"value":"/ Returns a+b, saturating at the numeric bounds instead of overflowing.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":170620,"byte_end":170693,"line_start":7,"line_end":7,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":717},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":170867,"byte_end":170881,"line_start":12,"line_end":12,"column_start":8,"column_end":22},"name":"saturating_sub","qualname":"::ops::saturating::Saturating::saturating_sub","value":"pub fn saturating_sub(Self, Self) -> Self","parent":{"krate":0,"index":715},"children":[],"decl_id":null,"docs":" Saturating subtraction operator.\n Returns a-b, saturating at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating subtraction operator.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":170745,"byte_end":170781,"line_start":10,"line_end":10,"column_start":5,"column_end":41}},{"value":"/ Returns a-b, saturating at the numeric bounds instead of overflowing.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":170786,"byte_end":170859,"line_start":11,"line_end":11,"column_start":5,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":720},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":171842,"byte_end":171855,"line_start":47,"line_end":47,"column_start":11,"column_end":24},"name":"SaturatingAdd","qualname":"::ops::saturating::SaturatingAdd","value":"SaturatingAdd: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":721}],"decl_id":null,"docs":" Performs addition that saturates at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Performs addition that saturates at the numeric bounds instead of overflowing.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":171749,"byte_end":171831,"line_start":46,"line_end":46,"column_start":1,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":721},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":172022,"byte_end":172036,"line_start":50,"line_end":50,"column_start":8,"column_end":22},"name":"saturating_add","qualname":"::ops::saturating::SaturatingAdd::saturating_add","value":"pub fn saturating_add(&Self, &Self) -> Self","parent":{"krate":0,"index":720},"children":[],"decl_id":null,"docs":" Saturating addition. Computes `self + other`, saturating at the relevant high or low boundary of\n the type.\n","sig":null,"attributes":[{"value":"/ Saturating addition. Computes `self + other`, saturating at the relevant high or low boundary of","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":171896,"byte_end":171996,"line_start":48,"line_end":48,"column_start":5,"column_end":105}},{"value":"/ the type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":172001,"byte_end":172014,"line_start":49,"line_end":49,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":722},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":172850,"byte_end":172863,"line_start":70,"line_end":70,"column_start":11,"column_end":24},"name":"SaturatingSub","qualname":"::ops::saturating::SaturatingSub","value":"SaturatingSub: Sized + Sub<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":723}],"decl_id":null,"docs":" Performs subtraction that saturates at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Performs subtraction that saturates at the numeric bounds instead of overflowing.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":172754,"byte_end":172839,"line_start":69,"line_end":69,"column_start":1,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":723},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":173033,"byte_end":173047,"line_start":73,"line_end":73,"column_start":8,"column_end":22},"name":"saturating_sub","qualname":"::ops::saturating::SaturatingSub::saturating_sub","value":"pub fn saturating_sub(&Self, &Self) -> Self","parent":{"krate":0,"index":722},"children":[],"decl_id":null,"docs":" Saturating subtraction. Computes `self - other`, saturating at the relevant high or low boundary of\n the type.\n","sig":null,"attributes":[{"value":"/ Saturating subtraction. Computes `self - other`, saturating at the relevant high or low boundary of","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":172904,"byte_end":173007,"line_start":71,"line_end":71,"column_start":5,"column_end":108}},{"value":"/ the type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":173012,"byte_end":173025,"line_start":72,"line_end":72,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":724},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":173864,"byte_end":173877,"line_start":93,"line_end":93,"column_start":11,"column_end":24},"name":"SaturatingMul","qualname":"::ops::saturating::SaturatingMul","value":"SaturatingMul: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":725}],"decl_id":null,"docs":" Performs multiplication that saturates at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Performs multiplication that saturates at the numeric bounds instead of overflowing.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":173765,"byte_end":173853,"line_start":92,"line_end":92,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":725},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":174050,"byte_end":174064,"line_start":96,"line_end":96,"column_start":8,"column_end":22},"name":"saturating_mul","qualname":"::ops::saturating::SaturatingMul::saturating_mul","value":"pub fn saturating_mul(&Self, &Self) -> Self","parent":{"krate":0,"index":724},"children":[],"decl_id":null,"docs":" Saturating multiplication. Computes `self * other`, saturating at the relevant high or low boundary of\n the type.\n","sig":null,"attributes":[{"value":"/ Saturating multiplication. Computes `self * other`, saturating at the relevant high or low boundary of","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":173918,"byte_end":174024,"line_start":94,"line_end":94,"column_start":5,"column_end":111}},{"value":"/ the type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":174029,"byte_end":174042,"line_start":95,"line_end":95,"column_start":5,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":726},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"wrapping","qualname":"::ops::wrapping","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","parent":null,"children":[{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":734},{"krate":0,"index":737},{"krate":0,"index":740},{"krate":0,"index":743},{"krate":0,"index":746},{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":3120},{"krate":0,"index":3122},{"krate":0,"index":3124},{"krate":0,"index":3126},{"krate":0,"index":3128},{"krate":0,"index":3130},{"krate":0,"index":3132},{"krate":0,"index":3134},{"krate":0,"index":3136},{"krate":0,"index":3138},{"krate":0,"index":3140},{"krate":0,"index":3142},{"krate":0,"index":752},{"krate":0,"index":3144},{"krate":0,"index":3146},{"krate":0,"index":3148},{"krate":0,"index":3150},{"krate":0,"index":3152},{"krate":0,"index":3154},{"krate":0,"index":3156},{"krate":0,"index":3158},{"krate":0,"index":3160},{"krate":0,"index":3162},{"krate":0,"index":3164},{"krate":0,"index":3166},{"krate":0,"index":754},{"krate":0,"index":3168},{"krate":0,"index":3170},{"krate":0,"index":3172},{"krate":0,"index":3174},{"krate":0,"index":3176},{"krate":0,"index":3178},{"krate":0,"index":3180},{"krate":0,"index":3182},{"krate":0,"index":3184},{"krate":0,"index":3186},{"krate":0,"index":3188},{"krate":0,"index":3190},{"krate":0,"index":756},{"krate":0,"index":757},{"krate":0,"index":3192},{"krate":0,"index":3194},{"krate":0,"index":3196},{"krate":0,"index":3198},{"krate":0,"index":3200},{"krate":0,"index":3202},{"krate":0,"index":3204},{"krate":0,"index":3206},{"krate":0,"index":3208},{"krate":0,"index":3210},{"krate":0,"index":3212},{"krate":0,"index":3214},{"krate":0,"index":759},{"krate":0,"index":760},{"krate":0,"index":3216},{"krate":0,"index":3218},{"krate":0,"index":3220},{"krate":0,"index":3222},{"krate":0,"index":3224},{"krate":0,"index":3226},{"krate":0,"index":3228},{"krate":0,"index":3230},{"krate":0,"index":3232},{"krate":0,"index":3234},{"krate":0,"index":3236},{"krate":0,"index":3238},{"krate":0,"index":762},{"krate":0,"index":3240},{"krate":0,"index":3242},{"krate":0,"index":3244},{"krate":0,"index":3246},{"krate":0,"index":3248},{"krate":0,"index":3250},{"krate":0,"index":3252},{"krate":0,"index":3254},{"krate":0,"index":3256},{"krate":0,"index":3258},{"krate":0,"index":3260},{"krate":0,"index":3262},{"krate":0,"index":764},{"krate":0,"index":767},{"krate":0,"index":770},{"krate":0,"index":773},{"krate":0,"index":776},{"krate":0,"index":779}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":750},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":176272,"byte_end":176283,"line_start":24,"line_end":24,"column_start":11,"column_end":22},"name":"WrappingAdd","qualname":"::ops::wrapping::WrappingAdd","value":"WrappingAdd: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":751}],"decl_id":null,"docs":" Performs addition that wraps around on overflow.\n","sig":null,"attributes":[{"value":"/ Performs addition that wraps around on overflow.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":176209,"byte_end":176261,"line_start":23,"line_end":23,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":751},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":176442,"byte_end":176454,"line_start":27,"line_end":27,"column_start":8,"column_end":20},"name":"wrapping_add","qualname":"::ops::wrapping::WrappingAdd::wrapping_add","value":"pub fn wrapping_add(&Self, &Self) -> Self","parent":{"krate":0,"index":750},"children":[],"decl_id":null,"docs":" Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of\n the type.\n","sig":null,"attributes":[{"value":"/ Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":176324,"byte_end":176416,"line_start":25,"line_end":25,"column_start":5,"column_end":97}},{"value":"/ the type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":176421,"byte_end":176434,"line_start":26,"line_end":26,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":752},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":177166,"byte_end":177177,"line_start":47,"line_end":47,"column_start":11,"column_end":22},"name":"WrappingSub","qualname":"::ops::wrapping::WrappingSub","value":"WrappingSub: Sized + Sub<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":753}],"decl_id":null,"docs":" Performs subtraction that wraps around on overflow.\n","sig":null,"attributes":[{"value":"/ Performs subtraction that wraps around on overflow.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":177100,"byte_end":177155,"line_start":46,"line_end":46,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":753},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":177339,"byte_end":177351,"line_start":50,"line_end":50,"column_start":8,"column_end":20},"name":"wrapping_sub","qualname":"::ops::wrapping::WrappingSub::wrapping_sub","value":"pub fn wrapping_sub(&Self, &Self) -> Self","parent":{"krate":0,"index":752},"children":[],"decl_id":null,"docs":" Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary\n of the type.\n","sig":null,"attributes":[{"value":"/ Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":177218,"byte_end":177310,"line_start":48,"line_end":48,"column_start":5,"column_end":97}},{"value":"/ of the type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":177315,"byte_end":177331,"line_start":49,"line_end":49,"column_start":5,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":754},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":178066,"byte_end":178077,"line_start":70,"line_end":70,"column_start":11,"column_end":22},"name":"WrappingMul","qualname":"::ops::wrapping::WrappingMul","value":"WrappingMul: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":755}],"decl_id":null,"docs":" Performs multiplication that wraps around on overflow.\n","sig":null,"attributes":[{"value":"/ Performs multiplication that wraps around on overflow.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":177997,"byte_end":178055,"line_start":69,"line_end":69,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":755},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":178242,"byte_end":178254,"line_start":73,"line_end":73,"column_start":8,"column_end":20},"name":"wrapping_mul","qualname":"::ops::wrapping::WrappingMul::wrapping_mul","value":"pub fn wrapping_mul(&Self, &Self) -> Self","parent":{"krate":0,"index":754},"children":[],"decl_id":null,"docs":" Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary\n of the type.\n","sig":null,"attributes":[{"value":"/ Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":178118,"byte_end":178213,"line_start":71,"line_end":71,"column_start":5,"column_end":100}},{"value":"/ of the type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":178218,"byte_end":178234,"line_start":72,"line_end":72,"column_start":5,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":757},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":179206,"byte_end":179217,"line_start":104,"line_end":104,"column_start":11,"column_end":22},"name":"WrappingNeg","qualname":"::ops::wrapping::WrappingNeg","value":"WrappingNeg: Sized","parent":null,"children":[{"krate":0,"index":758}],"decl_id":null,"docs":" Performs a negation that does not panic.\n","sig":null,"attributes":[{"value":"/ Performs a negation that does not panic.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":179151,"byte_end":179195,"line_start":103,"line_end":103,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":180003,"byte_end":180015,"line_start":122,"line_end":122,"column_start":8,"column_end":20},"name":"wrapping_neg","qualname":"::ops::wrapping::WrappingNeg::wrapping_neg","value":"pub fn wrapping_neg(&Self) -> Self","parent":{"krate":0,"index":757},"children":[],"decl_id":null,"docs":" Wrapping (modular) negation. Computes `-self`,\n wrapping around at the boundary of the type.","sig":null,"attributes":[{"value":"/ Wrapping (modular) negation. Computes `-self`,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":179231,"byte_end":179281,"line_start":105,"line_end":105,"column_start":5,"column_end":55}},{"value":"/ wrapping around at the boundary of the type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":179286,"byte_end":179334,"line_start":106,"line_end":106,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":179339,"byte_end":179342,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ Since unsigned types do not have negative equivalents","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":179347,"byte_end":179404,"line_start":108,"line_end":108,"column_start":5,"column_end":62}},{"value":"/ all applications of this function will wrap (except for `-0`).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":179409,"byte_end":179475,"line_start":109,"line_end":109,"column_start":5,"column_end":71}},{"value":"/ For values smaller than the corresponding signed type's maximum","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":179480,"byte_end":179547,"line_start":110,"line_end":110,"column_start":5,"column_end":72}},{"value":"/ the result is the same as casting the corresponding signed value.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":179552,"byte_end":179621,"line_start":111,"line_end":111,"column_start":5,"column_end":74}},{"value":"/ Any larger values are equivalent to `MAX + 1 - (val - MAX - 1)` where","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":179626,"byte_end":179699,"line_start":112,"line_end":112,"column_start":5,"column_end":78}},{"value":"/ `MAX` is the corresponding signed type's maximum.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":179704,"byte_end":179757,"line_start":113,"line_end":113,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":179762,"byte_end":179765,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":179770,"byte_end":179777,"line_start":115,"line_end":115,"column_start":5,"column_end":12}},{"value":"/ use num_traits::WrappingNeg;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":179782,"byte_end":179814,"line_start":116,"line_end":116,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":179819,"byte_end":179822,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(100i8.wrapping_neg(), -100);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":179827,"byte_end":179870,"line_start":118,"line_end":118,"column_start":5,"column_end":48}},{"value":"/ assert_eq!((-100i8).wrapping_neg(), 100);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":179875,"byte_end":179920,"line_start":119,"line_end":119,"column_start":5,"column_end":50}},{"value":"/ assert_eq!((-128i8).wrapping_neg(), -128); // wrapped!","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":179925,"byte_end":179983,"line_start":120,"line_end":120,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":179988,"byte_end":179995,"line_start":121,"line_end":121,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":760},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":181045,"byte_end":181056,"line_start":152,"line_end":152,"column_start":11,"column_end":22},"name":"WrappingShl","qualname":"::ops::wrapping::WrappingShl","value":"WrappingShl: Sized + Shl<usize, Output = Self>","parent":null,"children":[{"krate":0,"index":761}],"decl_id":null,"docs":" Performs a left shift that does not panic.\n","sig":null,"attributes":[{"value":"/ Performs a left shift that does not panic.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":180988,"byte_end":181034,"line_start":151,"line_end":151,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":761},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":181663,"byte_end":181675,"line_start":167,"line_end":167,"column_start":8,"column_end":20},"name":"wrapping_shl","qualname":"::ops::wrapping::WrappingShl::wrapping_shl","value":"pub fn wrapping_shl(&Self, u32) -> Self","parent":{"krate":0,"index":760},"children":[],"decl_id":null,"docs":" Panic-free bitwise shift-left; yields `self << mask(rhs)`,\n where `mask` removes any high order bits of `rhs` that would\n cause the shift to exceed the bitwidth of the type.","sig":null,"attributes":[{"value":"/ Panic-free bitwise shift-left; yields `self << mask(rhs)`,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":181098,"byte_end":181160,"line_start":153,"line_end":153,"column_start":5,"column_end":67}},{"value":"/ where `mask` removes any high order bits of `rhs` that would","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":181165,"byte_end":181229,"line_start":154,"line_end":154,"column_start":5,"column_end":69}},{"value":"/ cause the shift to exceed the bitwidth of the type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":181234,"byte_end":181289,"line_start":155,"line_end":155,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":181294,"byte_end":181297,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":181302,"byte_end":181309,"line_start":157,"line_end":157,"column_start":5,"column_end":12}},{"value":"/ use num_traits::WrappingShl;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":181314,"byte_end":181346,"line_start":158,"line_end":158,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":181351,"byte_end":181354,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ let x: u16 = 0x0001;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":181359,"byte_end":181383,"line_start":160,"line_end":160,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":181388,"byte_end":181391,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(WrappingShl::wrapping_shl(&x, 0),  0x0001);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":181396,"byte_end":181454,"line_start":162,"line_end":162,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(WrappingShl::wrapping_shl(&x, 1),  0x0002);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":181459,"byte_end":181517,"line_start":163,"line_end":163,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(WrappingShl::wrapping_shl(&x, 15), 0x8000);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":181522,"byte_end":181580,"line_start":164,"line_end":164,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(WrappingShl::wrapping_shl(&x, 16), 0x0001);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":181585,"byte_end":181643,"line_start":165,"line_end":165,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":181648,"byte_end":181655,"line_start":166,"line_end":166,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":762},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":182451,"byte_end":182462,"line_start":187,"line_end":187,"column_start":11,"column_end":22},"name":"WrappingShr","qualname":"::ops::wrapping::WrappingShr","value":"WrappingShr: Sized + Shr<usize, Output = Self>","parent":null,"children":[{"krate":0,"index":763}],"decl_id":null,"docs":" Performs a right shift that does not panic.\n","sig":null,"attributes":[{"value":"/ Performs a right shift that does not panic.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":182393,"byte_end":182440,"line_start":186,"line_end":186,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":763},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":183070,"byte_end":183082,"line_start":202,"line_end":202,"column_start":8,"column_end":20},"name":"wrapping_shr","qualname":"::ops::wrapping::WrappingShr::wrapping_shr","value":"pub fn wrapping_shr(&Self, u32) -> Self","parent":{"krate":0,"index":762},"children":[],"decl_id":null,"docs":" Panic-free bitwise shift-right; yields `self >> mask(rhs)`,\n where `mask` removes any high order bits of `rhs` that would\n cause the shift to exceed the bitwidth of the type.","sig":null,"attributes":[{"value":"/ Panic-free bitwise shift-right; yields `self >> mask(rhs)`,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":182504,"byte_end":182567,"line_start":188,"line_end":188,"column_start":5,"column_end":68}},{"value":"/ where `mask` removes any high order bits of `rhs` that would","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":182572,"byte_end":182636,"line_start":189,"line_end":189,"column_start":5,"column_end":69}},{"value":"/ cause the shift to exceed the bitwidth of the type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":182641,"byte_end":182696,"line_start":190,"line_end":190,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":182701,"byte_end":182704,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":182709,"byte_end":182716,"line_start":192,"line_end":192,"column_start":5,"column_end":12}},{"value":"/ use num_traits::WrappingShr;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":182721,"byte_end":182753,"line_start":193,"line_end":193,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":182758,"byte_end":182761,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ let x: u16 = 0x8000;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":182766,"byte_end":182790,"line_start":195,"line_end":195,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":182795,"byte_end":182798,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(WrappingShr::wrapping_shr(&x, 0),  0x8000);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":182803,"byte_end":182861,"line_start":197,"line_end":197,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(WrappingShr::wrapping_shr(&x, 1),  0x4000);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":182866,"byte_end":182924,"line_start":198,"line_end":198,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(WrappingShr::wrapping_shr(&x, 15), 0x0001);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":182929,"byte_end":182987,"line_start":199,"line_end":199,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(WrappingShr::wrapping_shr(&x, 16), 0x8000);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":182992,"byte_end":183050,"line_start":200,"line_end":200,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":183055,"byte_end":183062,"line_start":201,"line_end":201,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":782},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pow","qualname":"::pow","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","parent":null,"children":[{"krate":0,"index":783},{"krate":0,"index":784},{"krate":0,"index":786},{"krate":0,"index":789},{"krate":0,"index":790},{"krate":0,"index":793},{"krate":0,"index":796},{"krate":0,"index":800},{"krate":0,"index":3264},{"krate":0,"index":3267},{"krate":0,"index":3271},{"krate":0,"index":3275},{"krate":0,"index":3280},{"krate":0,"index":3283},{"krate":0,"index":3287},{"krate":0,"index":3291},{"krate":0,"index":3296},{"krate":0,"index":3299},{"krate":0,"index":3303},{"krate":0,"index":3307},{"krate":0,"index":3312},{"krate":0,"index":3315},{"krate":0,"index":3319},{"krate":0,"index":3323},{"krate":0,"index":3328},{"krate":0,"index":3331},{"krate":0,"index":3335},{"krate":0,"index":3339},{"krate":0,"index":3344},{"krate":0,"index":3347},{"krate":0,"index":3351},{"krate":0,"index":3355},{"krate":0,"index":3360},{"krate":0,"index":3363},{"krate":0,"index":3367},{"krate":0,"index":3371},{"krate":0,"index":3376},{"krate":0,"index":3379},{"krate":0,"index":3383},{"krate":0,"index":3387},{"krate":0,"index":3392},{"krate":0,"index":3395},{"krate":0,"index":3399},{"krate":0,"index":3403},{"krate":0,"index":3408},{"krate":0,"index":3411},{"krate":0,"index":3415},{"krate":0,"index":3419},{"krate":0,"index":3424},{"krate":0,"index":3427},{"krate":0,"index":3431},{"krate":0,"index":3435},{"krate":0,"index":3440},{"krate":0,"index":3443},{"krate":0,"index":3447},{"krate":0,"index":3451},{"krate":0,"index":3456},{"krate":0,"index":3459},{"krate":0,"index":3463},{"krate":0,"index":3467},{"krate":0,"index":3472},{"krate":0,"index":3475},{"krate":0,"index":3479},{"krate":0,"index":3483},{"krate":0,"index":3488},{"krate":0,"index":3491},{"krate":0,"index":3495},{"krate":0,"index":3499},{"krate":0,"index":3504},{"krate":0,"index":3507},{"krate":0,"index":3511},{"krate":0,"index":3515},{"krate":0,"index":3520},{"krate":0,"index":3523},{"krate":0,"index":3527},{"krate":0,"index":3531},{"krate":0,"index":3536},{"krate":0,"index":3539},{"krate":0,"index":3543},{"krate":0,"index":3547},{"krate":0,"index":3552},{"krate":0,"index":3555},{"krate":0,"index":3559},{"krate":0,"index":3563},{"krate":0,"index":3568},{"krate":0,"index":3571},{"krate":0,"index":3575},{"krate":0,"index":3579},{"krate":0,"index":3584},{"krate":0,"index":3587},{"krate":0,"index":3591},{"krate":0,"index":3595},{"krate":0,"index":3600},{"krate":0,"index":3603},{"krate":0,"index":3607},{"krate":0,"index":3611},{"krate":0,"index":3616},{"krate":0,"index":3619},{"krate":0,"index":3623},{"krate":0,"index":3627},{"krate":0,"index":3632},{"krate":0,"index":3635},{"krate":0,"index":3639},{"krate":0,"index":3643},{"krate":0,"index":3648},{"krate":0,"index":3651},{"krate":0,"index":3655},{"krate":0,"index":3659},{"krate":0,"index":3664},{"krate":0,"index":3667},{"krate":0,"index":3671},{"krate":0,"index":3675},{"krate":0,"index":3680},{"krate":0,"index":3683},{"krate":0,"index":3687},{"krate":0,"index":3691},{"krate":0,"index":3696},{"krate":0,"index":3699},{"krate":0,"index":3703},{"krate":0,"index":3707},{"krate":0,"index":3712},{"krate":0,"index":3715},{"krate":0,"index":3719},{"krate":0,"index":3723},{"krate":0,"index":3728},{"krate":0,"index":3731},{"krate":0,"index":3735},{"krate":0,"index":3739},{"krate":0,"index":3744},{"krate":0,"index":3747},{"krate":0,"index":3751},{"krate":0,"index":3755},{"krate":0,"index":3760},{"krate":0,"index":3763},{"krate":0,"index":3767},{"krate":0,"index":3771},{"krate":0,"index":3776},{"krate":0,"index":3779},{"krate":0,"index":3783},{"krate":0,"index":3787},{"krate":0,"index":3792},{"krate":0,"index":3795},{"krate":0,"index":3799},{"krate":0,"index":3803},{"krate":0,"index":3808},{"krate":0,"index":3811},{"krate":0,"index":3815},{"krate":0,"index":3819},{"krate":0,"index":3824},{"krate":0,"index":3827},{"krate":0,"index":3831},{"krate":0,"index":3835},{"krate":0,"index":3840},{"krate":0,"index":3843},{"krate":0,"index":3847},{"krate":0,"index":3851},{"krate":0,"index":3856},{"krate":0,"index":3859},{"krate":0,"index":3863},{"krate":0,"index":3867},{"krate":0,"index":3872},{"krate":0,"index":3875},{"krate":0,"index":3879},{"krate":0,"index":3883},{"krate":0,"index":3888},{"krate":0,"index":3891},{"krate":0,"index":3895},{"krate":0,"index":3899},{"krate":0,"index":3904},{"krate":0,"index":3907},{"krate":0,"index":3911},{"krate":0,"index":3915},{"krate":0,"index":3920},{"krate":0,"index":3923},{"krate":0,"index":3927},{"krate":0,"index":3931},{"krate":0,"index":3936},{"krate":0,"index":3939},{"krate":0,"index":3943},{"krate":0,"index":3947},{"krate":0,"index":3952},{"krate":0,"index":3955},{"krate":0,"index":3959},{"krate":0,"index":3963},{"krate":0,"index":3968},{"krate":0,"index":3971},{"krate":0,"index":3975},{"krate":0,"index":3979},{"krate":0,"index":3984},{"krate":0,"index":3987},{"krate":0,"index":3991},{"krate":0,"index":3995},{"krate":0,"index":4000},{"krate":0,"index":4003},{"krate":0,"index":4007},{"krate":0,"index":4011},{"krate":0,"index":4016},{"krate":0,"index":4019},{"krate":0,"index":4023},{"krate":0,"index":4027},{"krate":0,"index":4032},{"krate":0,"index":4035},{"krate":0,"index":4039},{"krate":0,"index":4043},{"krate":0,"index":4048},{"krate":0,"index":4051},{"krate":0,"index":4055},{"krate":0,"index":4059},{"krate":0,"index":4064},{"krate":0,"index":4067},{"krate":0,"index":4071},{"krate":0,"index":4075},{"krate":0,"index":4080},{"krate":0,"index":4083},{"krate":0,"index":4087},{"krate":0,"index":4091},{"krate":0,"index":4096},{"krate":0,"index":4099},{"krate":0,"index":4103},{"krate":0,"index":4107},{"krate":0,"index":4112},{"krate":0,"index":4115},{"krate":0,"index":4119},{"krate":0,"index":4123},{"krate":0,"index":4128},{"krate":0,"index":4131},{"krate":0,"index":4135},{"krate":0,"index":4139},{"krate":0,"index":4144},{"krate":0,"index":4147},{"krate":0,"index":4151},{"krate":0,"index":4155},{"krate":0,"index":4160},{"krate":0,"index":4163},{"krate":0,"index":4167},{"krate":0,"index":4171},{"krate":0,"index":4176},{"krate":0,"index":4179},{"krate":0,"index":4183},{"krate":0,"index":4187},{"krate":0,"index":4192},{"krate":0,"index":4195},{"krate":0,"index":4199},{"krate":0,"index":4203},{"krate":0,"index":4208},{"krate":0,"index":4211},{"krate":0,"index":4215},{"krate":0,"index":4219},{"krate":0,"index":4224},{"krate":0,"index":4227},{"krate":0,"index":4231},{"krate":0,"index":4235},{"krate":0,"index":4240},{"krate":0,"index":4243},{"krate":0,"index":4247},{"krate":0,"index":4251},{"krate":0,"index":4256},{"krate":0,"index":4259},{"krate":0,"index":4263},{"krate":0,"index":4267},{"krate":0,"index":4272},{"krate":0,"index":4275},{"krate":0,"index":4279},{"krate":0,"index":4283},{"krate":0,"index":4288},{"krate":0,"index":4291},{"krate":0,"index":4295},{"krate":0,"index":4299},{"krate":0,"index":4304},{"krate":0,"index":4307},{"krate":0,"index":4311},{"krate":0,"index":4315},{"krate":0,"index":4320},{"krate":0,"index":4323},{"krate":0,"index":4327},{"krate":0,"index":4331},{"krate":0,"index":4336},{"krate":0,"index":4339},{"krate":0,"index":4343},{"krate":0,"index":4347},{"krate":0,"index":4352},{"krate":0,"index":4355},{"krate":0,"index":4359},{"krate":0,"index":4363},{"krate":0,"index":4368},{"krate":0,"index":4371},{"krate":0,"index":4375},{"krate":0,"index":4379},{"krate":0,"index":4384},{"krate":0,"index":4387},{"krate":0,"index":4391},{"krate":0,"index":4395},{"krate":0,"index":4400},{"krate":0,"index":4403},{"krate":0,"index":4407},{"krate":0,"index":4411},{"krate":0,"index":801},{"krate":0,"index":803}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":796},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":187302,"byte_end":187305,"line_start":6,"line_end":6,"column_start":11,"column_end":14},"name":"Pow","qualname":"::pow::Pow","value":"Pow<RHS>","parent":null,"children":[{"krate":0,"index":798},{"krate":0,"index":799}],"decl_id":null,"docs":" Binary operator for raising a value to a power.\n","sig":null,"attributes":[{"value":"/ Binary operator for raising a value to a power.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":187240,"byte_end":187291,"line_start":5,"line_end":5,"column_start":1,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":798},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":187370,"byte_end":187376,"line_start":8,"line_end":8,"column_start":10,"column_end":16},"name":"Output","qualname":"::pow::Pow::Output","value":"type Output;","parent":{"krate":0,"index":796},"children":[],"decl_id":null,"docs":" The result after applying the operator.\n","sig":null,"attributes":[{"value":"/ The result after applying the operator.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":187317,"byte_end":187360,"line_start":7,"line_end":7,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":799},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":187565,"byte_end":187568,"line_start":18,"line_end":18,"column_start":8,"column_end":11},"name":"pow","qualname":"::pow::Pow::pow","value":"pub fn pow(Self, RHS) -> Self::Output","parent":{"krate":0,"index":796},"children":[],"decl_id":null,"docs":" Returns `self` to the power `rhs`.","sig":null,"attributes":[{"value":"/ Returns `self` to the power `rhs`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":187383,"byte_end":187421,"line_start":10,"line_end":10,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":187426,"byte_end":187429,"line_start":11,"line_end":11,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":187434,"byte_end":187448,"line_start":12,"line_end":12,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":187453,"byte_end":187456,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":187461,"byte_end":187468,"line_start":14,"line_end":14,"column_start":5,"column_end":12}},{"value":"/ use num_traits::Pow;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":187473,"byte_end":187497,"line_start":15,"line_end":15,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(Pow::pow(10u32, 2u32), 100);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":187502,"byte_end":187545,"line_start":16,"line_end":16,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":187550,"byte_end":187557,"line_start":17,"line_end":17,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":801},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":192395,"byte_end":192398,"line_start":189,"line_end":189,"column_start":8,"column_end":11},"name":"pow","qualname":"::pow::pow","value":"pub fn pow<T: Clone + One + Mul<T, Output = T>>(T, usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Raises a value to the power of exp, using exponentiation by squaring.","sig":null,"attributes":[{"value":"/ Raises a value to the power of exp, using exponentiation by squaring.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":192011,"byte_end":192084,"line_start":175,"line_end":175,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":192085,"byte_end":192088,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ Note that `0⁰` (`pow(0, 0)`) returns `1`. Mathematically this is undefined.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":192089,"byte_end":192170,"line_start":177,"line_end":177,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":192171,"byte_end":192174,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":192175,"byte_end":192188,"line_start":179,"line_end":179,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":192189,"byte_end":192192,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":192193,"byte_end":192204,"line_start":181,"line_end":181,"column_start":1,"column_end":12}},{"value":"/ use num_traits::pow;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":192205,"byte_end":192229,"line_start":182,"line_end":182,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":192230,"byte_end":192233,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(pow(2i8, 4), 16);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":192234,"byte_end":192266,"line_start":184,"line_end":184,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(pow(6u8, 3), 216);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":192267,"byte_end":192300,"line_start":185,"line_end":185,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(pow(0u8, 0), 1); // Be aware if this case affects you","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":192301,"byte_end":192369,"line_start":186,"line_end":186,"column_start":1,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":192370,"byte_end":192377,"line_start":187,"line_end":187,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":192378,"byte_end":192387,"line_start":188,"line_end":188,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":803},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":193404,"byte_end":193415,"line_start":230,"line_end":230,"column_start":8,"column_end":19},"name":"checked_pow","qualname":"::pow::checked_pow","value":"pub fn checked_pow<T: Clone + One + CheckedMul>(T, usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Raises a value to the power of exp, returning `None` if an overflow occurred.","sig":null,"attributes":[{"value":"/ Raises a value to the power of exp, returning `None` if an overflow occurred.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":192852,"byte_end":192933,"line_start":213,"line_end":213,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":192934,"byte_end":192937,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ Note that `0⁰` (`checked_pow(0, 0)`) returns `Some(1)`. Mathematically this is undefined.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":192938,"byte_end":193033,"line_start":215,"line_end":215,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":193034,"byte_end":193037,"line_start":216,"line_end":216,"column_start":1,"column_end":4}},{"value":"/ Otherwise same as the `pow` function.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":193038,"byte_end":193079,"line_start":217,"line_end":217,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":193080,"byte_end":193083,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":193084,"byte_end":193097,"line_start":219,"line_end":219,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":193098,"byte_end":193101,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":193102,"byte_end":193113,"line_start":221,"line_end":221,"column_start":1,"column_end":12}},{"value":"/ use num_traits::checked_pow;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":193114,"byte_end":193146,"line_start":222,"line_end":222,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":193147,"byte_end":193150,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(checked_pow(2i8, 4), Some(16));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":193151,"byte_end":193197,"line_start":224,"line_end":224,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(checked_pow(7i8, 8), None);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":193198,"byte_end":193240,"line_start":225,"line_end":225,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(checked_pow(7u32, 8), Some(5_764_801));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":193241,"byte_end":193295,"line_start":226,"line_end":226,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(checked_pow(0u32, 0), Some(1)); // Be aware if this case affect you","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":193296,"byte_end":193378,"line_start":227,"line_end":227,"column_start":1,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":193379,"byte_end":193386,"line_start":228,"line_end":228,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/pow.rs","byte_start":193387,"byte_end":193396,"line_start":229,"line_end":229,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":806},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sign","qualname":"::sign","value":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","parent":null,"children":[{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":810},{"krate":0,"index":813},{"krate":0,"index":816},{"krate":0,"index":819},{"krate":0,"index":825},{"krate":0,"index":4416},{"krate":0,"index":4422},{"krate":0,"index":4428},{"krate":0,"index":4434},{"krate":0,"index":4440},{"krate":0,"index":4446},{"krate":0,"index":826},{"krate":0,"index":833},{"krate":0,"index":4452},{"krate":0,"index":4458},{"krate":0,"index":834},{"krate":0,"index":836},{"krate":0,"index":838},{"krate":0,"index":840},{"krate":0,"index":841},{"krate":0,"index":4464},{"krate":0,"index":4465},{"krate":0,"index":4466},{"krate":0,"index":4467},{"krate":0,"index":4468},{"krate":0,"index":4469},{"krate":0,"index":842}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":819},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":216432,"byte_end":216438,"line_start":8,"line_end":8,"column_start":11,"column_end":17},"name":"Signed","qualname":"::sign::Signed","value":"Signed: Sized + Num + Neg<Output = Self>","parent":null,"children":[{"krate":0,"index":820},{"krate":0,"index":821},{"krate":0,"index":822},{"krate":0,"index":823},{"krate":0,"index":824}],"decl_id":null,"docs":" Useful functions for signed numbers (i.e. numbers that can be negative).\n","sig":null,"attributes":[{"value":"/ Useful functions for signed numbers (i.e. numbers that can be negative).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":216345,"byte_end":216421,"line_start":7,"line_end":7,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":216691,"byte_end":216694,"line_start":14,"line_end":14,"column_start":8,"column_end":11},"name":"abs","qualname":"::sign::Signed::abs","value":"pub fn abs(&Self) -> Self","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Computes the absolute value.","sig":null,"attributes":[{"value":"/ Computes the absolute value.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":216479,"byte_end":216511,"line_start":9,"line_end":9,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":216516,"byte_end":216519,"line_start":10,"line_end":10,"column_start":5,"column_end":8}},{"value":"/ For `f32` and `f64`, `NaN` will be returned if the number is `NaN`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":216524,"byte_end":216595,"line_start":11,"line_end":11,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":216600,"byte_end":216603,"line_start":12,"line_end":12,"column_start":5,"column_end":8}},{"value":"/ For signed integers, `::MIN` will be returned if the number is `::MIN`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":216608,"byte_end":216683,"line_start":13,"line_end":13,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":821},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":216919,"byte_end":216926,"line_start":20,"line_end":20,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"::sign::Signed::abs_sub","value":"pub fn abs_sub(&Self, &Self) -> Self","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" The positive difference of two numbers.","sig":null,"attributes":[{"value":"/ The positive difference of two numbers.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":216716,"byte_end":216759,"line_start":16,"line_end":16,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":216764,"byte_end":216767,"line_start":17,"line_end":17,"column_start":5,"column_end":8}},{"value":"/ Returns `zero` if the number is less than or equal to `other`, otherwise the difference","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":216772,"byte_end":216863,"line_start":18,"line_end":18,"column_start":5,"column_end":96}},{"value":"/ between `self` and `other` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":216868,"byte_end":216911,"line_start":19,"line_end":19,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":217384,"byte_end":217390,"line_start":35,"line_end":35,"column_start":8,"column_end":14},"name":"signum","qualname":"::sign::Signed::signum","value":"pub fn signum(&Self) -> Self","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Returns the sign of the number.","sig":null,"attributes":[{"value":"/ Returns the sign of the number.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":216962,"byte_end":216997,"line_start":22,"line_end":22,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":217002,"byte_end":217005,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ For `f32` and `f64`:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":217010,"byte_end":217034,"line_start":24,"line_end":24,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":217039,"byte_end":217042,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ * `1.0` if the number is positive, `+0.0` or `INFINITY`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":217047,"byte_end":217106,"line_start":26,"line_end":26,"column_start":5,"column_end":64}},{"value":"/ * `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":217111,"byte_end":217175,"line_start":27,"line_end":27,"column_start":5,"column_end":69}},{"value":"/ * `NaN` if the number is `NaN`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":217180,"byte_end":217214,"line_start":28,"line_end":28,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":217219,"byte_end":217222,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ For signed integers:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":217227,"byte_end":217251,"line_start":30,"line_end":30,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":217256,"byte_end":217259,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ * `0` if the number is zero","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":217264,"byte_end":217295,"line_start":32,"line_end":32,"column_start":5,"column_end":36}},{"value":"/ * `1` if the number is positive","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":217300,"byte_end":217335,"line_start":33,"line_end":33,"column_start":5,"column_end":40}},{"value":"/ * `-1` if the number is negative","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":217340,"byte_end":217376,"line_start":34,"line_end":34,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":823},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":217507,"byte_end":217518,"line_start":38,"line_end":38,"column_start":8,"column_end":19},"name":"is_positive","qualname":"::sign::Signed::is_positive","value":"pub fn is_positive(&Self) -> bool","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Returns true if the number is positive and false if the number is zero or negative.\n","sig":null,"attributes":[{"value":"/ Returns true if the number is positive and false if the number is zero or negative.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":217412,"byte_end":217499,"line_start":37,"line_end":37,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":217635,"byte_end":217646,"line_start":41,"line_end":41,"column_start":8,"column_end":19},"name":"is_negative","qualname":"::sign::Signed::is_negative","value":"pub fn is_negative(&Self) -> bool","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Returns true if the number is negative and false if the number is zero or positive.\n","sig":null,"attributes":[{"value":"/ Returns true if the number is negative and false if the number is zero or positive.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":217540,"byte_end":217627,"line_start":40,"line_end":40,"column_start":5,"column_end":92}}]},{"kind":"Function","id":{"krate":0,"index":834},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":220840,"byte_end":220843,"line_start":165,"line_end":165,"column_start":8,"column_end":11},"name":"abs","qualname":"::sign::abs","value":"pub fn abs<T: Signed>(T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Computes the absolute value.","sig":null,"attributes":[{"value":"/ Computes the absolute value.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":220627,"byte_end":220659,"line_start":159,"line_end":159,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":220660,"byte_end":220663,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ For `f32` and `f64`, `NaN` will be returned if the number is `NaN`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":220664,"byte_end":220734,"line_start":161,"line_end":161,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":220735,"byte_end":220738,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ For signed integers, `::MIN` will be returned if the number is `::MIN`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":220739,"byte_end":220814,"line_start":163,"line_end":163,"column_start":1,"column_end":76}},{"value":"inline(always)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":220815,"byte_end":220832,"line_start":164,"line_end":164,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":836},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":221080,"byte_end":221087,"line_start":174,"line_end":174,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"::sign::abs_sub","value":"pub fn abs_sub<T: Signed>(T, T) -> T","parent":null,"children":[],"decl_id":null,"docs":" The positive difference of two numbers.","sig":null,"attributes":[{"value":"/ The positive difference of two numbers.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":220891,"byte_end":220934,"line_start":169,"line_end":169,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":220935,"byte_end":220938,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ Returns zero if `x` is less than or equal to `y`, otherwise the difference","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":220939,"byte_end":221017,"line_start":171,"line_end":171,"column_start":1,"column_end":79}},{"value":"/ between `x` and `y` is returned.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":221018,"byte_end":221054,"line_start":172,"line_end":172,"column_start":1,"column_end":37}},{"value":"inline(always)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":221055,"byte_end":221072,"line_start":173,"line_end":173,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":838},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":221531,"byte_end":221537,"line_start":192,"line_end":192,"column_start":8,"column_end":14},"name":"signum","qualname":"::sign::signum","value":"pub fn signum<T: Signed>(T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the sign of the number.","sig":null,"attributes":[{"value":"/ Returns the sign of the number.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":221139,"byte_end":221174,"line_start":178,"line_end":178,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":221175,"byte_end":221178,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ For `f32` and `f64`:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":221179,"byte_end":221203,"line_start":180,"line_end":180,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":221204,"byte_end":221207,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ * `1.0` if the number is positive, `+0.0` or `INFINITY`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":221208,"byte_end":221267,"line_start":182,"line_end":182,"column_start":1,"column_end":60}},{"value":"/ * `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":221268,"byte_end":221332,"line_start":183,"line_end":183,"column_start":1,"column_end":65}},{"value":"/ * `NaN` if the number is `NaN`","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":221333,"byte_end":221367,"line_start":184,"line_end":184,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":221368,"byte_end":221371,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ For signed integers:","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":221372,"byte_end":221396,"line_start":186,"line_end":186,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":221397,"byte_end":221400,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ * `0` if the number is zero","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":221401,"byte_end":221432,"line_start":188,"line_end":188,"column_start":1,"column_end":32}},{"value":"/ * `1` if the number is positive","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":221433,"byte_end":221468,"line_start":189,"line_end":189,"column_start":1,"column_end":36}},{"value":"/ * `-1` if the number is negative","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":221469,"byte_end":221505,"line_start":190,"line_end":190,"column_start":1,"column_end":37}},{"value":"inline(always)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":221506,"byte_end":221523,"line_start":191,"line_end":191,"column_start":1,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":840},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":221646,"byte_end":221654,"line_start":197,"line_end":197,"column_start":11,"column_end":19},"name":"Unsigned","qualname":"::sign::Unsigned","value":"Unsigned: Num","parent":null,"children":[],"decl_id":null,"docs":" A trait for values which cannot be negative\n","sig":null,"attributes":[{"value":"/ A trait for values which cannot be negative","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":221588,"byte_end":221635,"line_start":196,"line_end":196,"column_start":1,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":844},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2211,"byte_end":2214,"line_start":68,"line_end":68,"column_start":11,"column_end":14},"name":"Num","qualname":"::Num","value":"Num: PartialEq + Zero + One + NumOps","parent":null,"children":[{"krate":0,"index":845},{"krate":0,"index":846}],"decl_id":null,"docs":" The base trait for numeric types, covering `0` and `1` values,\n comparisons, basic numeric operations, and string conversion.\n","sig":null,"attributes":[{"value":"/ The base trait for numeric types, covering `0` and `1` values,","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2068,"byte_end":2134,"line_start":66,"line_end":66,"column_start":1,"column_end":67}},{"value":"/ comparisons, basic numeric operations, and string conversion.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2135,"byte_end":2200,"line_start":67,"line_end":67,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":845},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2259,"byte_end":2274,"line_start":69,"line_end":69,"column_start":10,"column_end":25},"name":"FromStrRadixErr","qualname":"::Num::FromStrRadixErr","value":"type FromStrRadixErr;","parent":{"krate":0,"index":844},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":3403,"byte_end":3417,"line_start":96,"line_end":96,"column_start":8,"column_end":22},"name":"from_str_radix","qualname":"::Num::from_str_radix","value":"pub fn from_str_radix(&str, u32) -> Result<Self, Self::FromStrRadixErr>","parent":{"krate":0,"index":844},"children":[],"decl_id":null,"docs":" Convert from a string and radix (typically `2..=36`).","sig":null,"attributes":[{"value":"/ Convert from a string and radix (typically `2..=36`).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2281,"byte_end":2338,"line_start":71,"line_end":71,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2343,"byte_end":2346,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2351,"byte_end":2365,"line_start":73,"line_end":73,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2370,"byte_end":2373,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2378,"byte_end":2389,"line_start":75,"line_end":75,"column_start":5,"column_end":16}},{"value":"/ use num_traits::Num;","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2394,"byte_end":2418,"line_start":76,"line_end":76,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2423,"byte_end":2426,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ let result = <i32 as Num>::from_str_radix(\"27\", 10);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2431,"byte_end":2487,"line_start":78,"line_end":78,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(result, Ok(27));","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2492,"byte_end":2523,"line_start":79,"line_end":79,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2528,"byte_end":2531,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ let result = <i32 as Num>::from_str_radix(\"foo\", 10);","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2536,"byte_end":2593,"line_start":81,"line_end":81,"column_start":5,"column_end":62}},{"value":"/ assert!(result.is_err());","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2598,"byte_end":2627,"line_start":82,"line_end":82,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2632,"byte_end":2639,"line_start":83,"line_end":83,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2644,"byte_end":2647,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ # Supported radices","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2652,"byte_end":2675,"line_start":85,"line_end":85,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2680,"byte_end":2683,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ The exact range of supported radices is at the discretion of each type implementation. For","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2688,"byte_end":2782,"line_start":87,"line_end":87,"column_start":5,"column_end":99}},{"value":"/ primitive integers, this is implemented by the inherent `from_str_radix` methods in the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2787,"byte_end":2878,"line_start":88,"line_end":88,"column_start":5,"column_end":96}},{"value":"/ standard library, which **panic** if the radix is not in the range from 2 to 36. The","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2883,"byte_end":2971,"line_start":89,"line_end":89,"column_start":5,"column_end":93}},{"value":"/ implementation in this crate for primitive floats is similar.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2976,"byte_end":3041,"line_start":90,"line_end":90,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":3046,"byte_end":3049,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ For third-party types, it is suggested that implementations should follow suit and at least","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":3054,"byte_end":3149,"line_start":92,"line_end":92,"column_start":5,"column_end":100}},{"value":"/ accept `2..=36` without panicking, but an `Err` may be returned for any unsupported radix.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":3154,"byte_end":3248,"line_start":93,"line_end":93,"column_start":5,"column_end":99}},{"value":"/ It's possible that a type might not even support the common radix 10, nor any, if string","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":3253,"byte_end":3345,"line_start":94,"line_end":94,"column_start":5,"column_end":97}},{"value":"/ parsing doesn't make sense for that type.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":3350,"byte_end":3395,"line_start":95,"line_end":95,"column_start":5,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":847},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":3643,"byte_end":3649,"line_start":102,"line_end":102,"column_start":11,"column_end":17},"name":"NumOps","qualname":"::NumOps","value":"NumOps<Rhs = Self, Output = Self>: Add<Rhs, Output = Output> + Sub<Rhs, Output = Output> + Mul<Rhs, Output =\nOutput> + Div<Rhs, Output = Output> + Rem<Rhs, Output = Output>","parent":null,"children":[],"decl_id":null,"docs":" Generic trait for types implementing basic numeric operations","sig":null,"attributes":[{"value":"/ Generic trait for types implementing basic numeric operations","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":3484,"byte_end":3549,"line_start":99,"line_end":99,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":3550,"byte_end":3553,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ This is automatically implemented for types which implement the operators.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":3554,"byte_end":3632,"line_start":101,"line_end":101,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":854},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":4283,"byte_end":4289,"line_start":124,"line_end":124,"column_start":11,"column_end":17},"name":"NumRef","qualname":"::NumRef","value":"NumRef: Num + for<'r> NumOps<&'r Self>","parent":null,"children":[],"decl_id":null,"docs":" The trait for `Num` types which also implement numeric operations taking\n the second operand by reference.","sig":null,"attributes":[{"value":"/ The trait for `Num` types which also implement numeric operations taking","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":4076,"byte_end":4152,"line_start":120,"line_end":120,"column_start":1,"column_end":77}},{"value":"/ the second operand by reference.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":4153,"byte_end":4189,"line_start":121,"line_end":121,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":4190,"byte_end":4193,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ This is automatically implemented for types which implement the operators.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":4194,"byte_end":4272,"line_start":123,"line_end":123,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":859},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":4739,"byte_end":4745,"line_start":133,"line_end":133,"column_start":11,"column_end":17},"name":"RefNum","qualname":"::RefNum","value":"RefNum<Base>: NumOps<Base, Base> + for<'r> NumOps<&'r Base, Base>","parent":null,"children":[],"decl_id":null,"docs":" The trait for `Num` references which implement numeric operations, taking the\n second operand either by value or by reference.","sig":null,"attributes":[{"value":"/ The trait for `Num` references which implement numeric operations, taking the","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":4387,"byte_end":4468,"line_start":127,"line_end":127,"column_start":1,"column_end":82}},{"value":"/ second operand either by value or by reference.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":4469,"byte_end":4520,"line_start":128,"line_end":128,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":4521,"byte_end":4524,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ This is automatically implemented for all types which implement the operators. It covers","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":4525,"byte_end":4617,"line_start":130,"line_end":130,"column_start":1,"column_end":93}},{"value":"/ every type implementing the operations though, regardless of it being a reference or","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":4618,"byte_end":4706,"line_start":131,"line_end":131,"column_start":1,"column_end":89}},{"value":"/ related to `Num`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":4707,"byte_end":4728,"line_start":132,"line_end":132,"column_start":1,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":866},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":5082,"byte_end":5094,"line_start":139,"line_end":139,"column_start":11,"column_end":23},"name":"NumAssignOps","qualname":"::NumAssignOps","value":"NumAssignOps<Rhs = Self>: AddAssign<Rhs> + SubAssign<Rhs> + MulAssign<Rhs> + DivAssign<Rhs> +\nRemAssign<Rhs>","parent":null,"children":[],"decl_id":null,"docs":" Generic trait for types implementing numeric assignment operators (like `+=`).","sig":null,"attributes":[{"value":"/ Generic trait for types implementing numeric assignment operators (like `+=`).","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":4906,"byte_end":4988,"line_start":136,"line_end":136,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":4989,"byte_end":4992,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ This is automatically implemented for types which implement the operators.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":4993,"byte_end":5071,"line_start":138,"line_end":138,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":871},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":5504,"byte_end":5513,"line_start":152,"line_end":152,"column_start":11,"column_end":20},"name":"NumAssign","qualname":"::NumAssign","value":"NumAssign: Num + NumAssignOps","parent":null,"children":[],"decl_id":null,"docs":" The trait for `Num` types which also implement assignment operators.","sig":null,"attributes":[{"value":"/ The trait for `Num` types which also implement assignment operators.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":5338,"byte_end":5410,"line_start":149,"line_end":149,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":5411,"byte_end":5414,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ This is automatically implemented for types which implement the operators.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":5415,"byte_end":5493,"line_start":151,"line_end":151,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":874},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":5809,"byte_end":5821,"line_start":159,"line_end":159,"column_start":11,"column_end":23},"name":"NumAssignRef","qualname":"::NumAssignRef","value":"NumAssignRef: NumAssign + for<'r> NumAssignOps<&'r Self>","parent":null,"children":[],"decl_id":null,"docs":" The trait for `NumAssign` types which also implement assignment operations\n taking the second operand by reference.","sig":null,"attributes":[{"value":"/ The trait for `NumAssign` types which also implement assignment operations","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":5593,"byte_end":5671,"line_start":155,"line_end":155,"column_start":1,"column_end":79}},{"value":"/ taking the second operand by reference.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":5672,"byte_end":5715,"line_start":156,"line_end":156,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":5716,"byte_end":5719,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ This is automatically implemented for types which implement the operators.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":5720,"byte_end":5798,"line_start":158,"line_end":158,"column_start":1,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4507},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":6780,"byte_end":6785,"line_start":191,"line_end":191,"column_start":5,"column_end":10},"name":"Empty","qualname":"::FloatErrorKind::Empty","value":"FloatErrorKind::Empty","parent":{"krate":0,"index":4506},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4509},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":6791,"byte_end":6798,"line_start":192,"line_end":192,"column_start":5,"column_end":12},"name":"Invalid","qualname":"::FloatErrorKind::Invalid","value":"FloatErrorKind::Invalid","parent":{"krate":0,"index":4506},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4506},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":6759,"byte_end":6773,"line_start":190,"line_end":190,"column_start":10,"column_end":24},"name":"FloatErrorKind","qualname":"::FloatErrorKind","value":"pub enum FloatErrorKind { Empty, Invalid, }","parent":null,"children":[{"krate":0,"index":4507},{"krate":0,"index":4509}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4513},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":6956,"byte_end":6971,"line_start":197,"line_end":197,"column_start":12,"column_end":27},"name":"ParseFloatError","qualname":"::ParseFloatError","value":"ParseFloatError { kind }","parent":null,"children":[{"krate":0,"index":4514}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4514},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":6982,"byte_end":6986,"line_start":198,"line_end":198,"column_start":9,"column_end":13},"name":"kind","qualname":"::ParseFloatError::kind","value":"FloatErrorKind","parent":{"krate":0,"index":4513},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":889},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":16195,"byte_end":16200,"line_start":408,"line_end":408,"column_start":8,"column_end":13},"name":"clamp","qualname":"::clamp","value":"pub fn clamp<T: PartialOrd>(T, T, T) -> T","parent":null,"children":[],"decl_id":null,"docs":" A value bounded by a minimum and a maximum","sig":null,"attributes":[{"value":"/ A value bounded by a minimum and a maximum","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":15928,"byte_end":15974,"line_start":400,"line_end":400,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":15975,"byte_end":15978,"line_start":401,"line_end":401,"column_start":1,"column_end":4}},{"value":"/  If input is less than min then this returns min.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":15979,"byte_end":16032,"line_start":402,"line_end":402,"column_start":1,"column_end":54}},{"value":"/  If input is greater than max then this returns max.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":16033,"byte_end":16089,"line_start":403,"line_end":403,"column_start":1,"column_end":57}},{"value":"/  Otherwise this returns input.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":16090,"byte_end":16124,"line_start":404,"line_end":404,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":16125,"byte_end":16128,"line_start":405,"line_end":405,"column_start":1,"column_end":4}},{"value":"/ **Panics** in debug mode if `!(min <= max)`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":16129,"byte_end":16177,"line_start":406,"line_end":406,"column_start":1,"column_end":49}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":16178,"byte_end":16187,"line_start":407,"line_end":407,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":891},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":16765,"byte_end":16774,"line_start":427,"line_end":427,"column_start":8,"column_end":17},"name":"clamp_min","qualname":"::clamp_min","value":"pub fn clamp_min<T: PartialOrd>(T, T) -> T","parent":null,"children":[],"decl_id":null,"docs":" A value bounded by a minimum value","sig":null,"attributes":[{"value":"/ A value bounded by a minimum value","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":16430,"byte_end":16468,"line_start":419,"line_end":419,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":16469,"byte_end":16472,"line_start":420,"line_end":420,"column_start":1,"column_end":4}},{"value":"/  If input is less than min then this returns min.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":16473,"byte_end":16526,"line_start":421,"line_end":421,"column_start":1,"column_end":54}},{"value":"/  Otherwise this returns input.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":16527,"byte_end":16561,"line_start":422,"line_end":422,"column_start":1,"column_end":35}},{"value":"/  `clamp_min(std::f32::NAN, 1.0)` preserves `NAN` different from `f32::min(std::f32::NAN, 1.0)`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":16562,"byte_end":16661,"line_start":423,"line_end":423,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":16662,"byte_end":16665,"line_start":424,"line_end":424,"column_start":1,"column_end":4}},{"value":"/ **Panics** in debug mode if `!(min == min)`. (This occurs if `min` is `NAN`.)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":16666,"byte_end":16747,"line_start":425,"line_end":425,"column_start":1,"column_end":82}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":16748,"byte_end":16757,"line_start":426,"line_end":426,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":893},"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":17276,"byte_end":17285,"line_start":444,"line_end":444,"column_start":8,"column_end":17},"name":"clamp_max","qualname":"::clamp_max","value":"pub fn clamp_max<T: PartialOrd>(T, T) -> T","parent":null,"children":[],"decl_id":null,"docs":" A value bounded by a maximum value","sig":null,"attributes":[{"value":"/ A value bounded by a maximum value","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":16938,"byte_end":16976,"line_start":436,"line_end":436,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":16977,"byte_end":16980,"line_start":437,"line_end":437,"column_start":1,"column_end":4}},{"value":"/  If input is greater than max then this returns max.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":16981,"byte_end":17037,"line_start":438,"line_end":438,"column_start":1,"column_end":57}},{"value":"/  Otherwise this returns input.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":17038,"byte_end":17072,"line_start":439,"line_end":439,"column_start":1,"column_end":35}},{"value":"/  `clamp_max(std::f32::NAN, 1.0)` preserves `NAN` different from `f32::max(std::f32::NAN, 1.0)`.","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":17073,"byte_end":17172,"line_start":440,"line_end":440,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":17173,"byte_end":17176,"line_start":441,"line_end":441,"column_start":1,"column_end":4}},{"value":"/ **Panics** in debug mode if `!(max == max)`. (This occurs if `max` is `NAN`.)","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":17177,"byte_end":17258,"line_start":442,"line_end":442,"column_start":1,"column_end":82}},{"value":"inline","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":17259,"byte_end":17268,"line_start":443,"line_end":443,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/bounds.rs","byte_start":23952,"byte_end":23953,"line_start":24,"line_end":24,"column_start":35,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/bounds.rs","byte_start":24285,"byte_end":24286,"line_start":37,"line_end":37,"column_start":35,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/bounds.rs","byte_start":25212,"byte_end":25220,"line_start":75,"line_end":75,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":249},{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":48479,"byte_end":48487,"line_start":619,"line_end":619,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1702},{"krate":0,"index":1703},{"krate":0,"index":1704},{"krate":0,"index":1705},{"krate":0,"index":1706},{"krate":0,"index":1707},{"krate":0,"index":1708},{"krate":0,"index":1709},{"krate":0,"index":1710},{"krate":0,"index":1711},{"krate":0,"index":1712},{"krate":0,"index":1713},{"krate":0,"index":1714},{"krate":0,"index":1715}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":49255,"byte_end":49263,"line_start":652,"line_end":652,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1716},{"krate":0,"index":1717},{"krate":0,"index":1718},{"krate":0,"index":1719},{"krate":0,"index":1720},{"krate":0,"index":1721},{"krate":0,"index":1722},{"krate":0,"index":1723},{"krate":0,"index":1724},{"krate":0,"index":1725},{"krate":0,"index":1726},{"krate":0,"index":1727},{"krate":0,"index":1728},{"krate":0,"index":1729}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":51810,"byte_end":51818,"line_start":738,"line_end":738,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":121222,"byte_end":121230,"line_start":65,"line_end":65,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":123207,"byte_end":123215,"line_start":154,"line_end":154,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":618,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":183896,"byte_end":183904,"line_start":222,"line_end":222,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":766}],"docs":"","sig":null,"attributes":[]},{"id":619,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":184096,"byte_end":184104,"line_start":230,"line_end":230,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":769}],"docs":"","sig":null,"attributes":[]},{"id":620,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":184296,"byte_end":184304,"line_start":238,"line_end":238,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":772}],"docs":"","sig":null,"attributes":[]},{"id":621,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":184496,"byte_end":184504,"line_start":246,"line_end":246,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":775}],"docs":"","sig":null,"attributes":[]},{"id":622,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":184682,"byte_end":184690,"line_start":254,"line_end":254,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":778}],"docs":"","sig":null,"attributes":[]},{"id":623,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":184888,"byte_end":184896,"line_start":262,"line_end":262,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":781}],"docs":"","sig":null,"attributes":[]},{"id":774,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":218528,"byte_end":218536,"line_start":80,"line_end":80,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":828},{"krate":0,"index":829},{"krate":0,"index":830},{"krate":0,"index":831},{"krate":0,"index":832}],"docs":"","sig":null,"attributes":[]},{"id":783,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":221916,"byte_end":221924,"line_start":209,"line_end":209,"column_start":32,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":784,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":3886,"byte_end":3887,"line_start":111,"line_end":111,"column_start":46,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":785,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":4344,"byte_end":4345,"line_start":125,"line_end":125,"column_start":20,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":786,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":4839,"byte_end":4840,"line_start":134,"line_end":134,"column_start":32,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":787,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":5235,"byte_end":5236,"line_start":144,"line_end":144,"column_start":36,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":788,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":5559,"byte_end":5560,"line_start":153,"line_end":153,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":789,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":5894,"byte_end":5895,"line_start":160,"line_end":160,"column_start":26,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":802,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":6494,"byte_end":6502,"line_start":179,"line_end":179,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":882},{"krate":0,"index":883}],"docs":"","sig":null,"attributes":[]},{"id":803,"kind":"Direct","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":7029,"byte_end":7044,"line_start":201,"line_end":201,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":885}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1943,"byte_end":1949,"line_start":56,"line_end":56,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":183}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1959,"byte_end":1963,"line_start":57,"line_end":57,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":254}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1973,"byte_end":1978,"line_start":58,"line_end":58,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":370}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":1988,"byte_end":1998,"line_start":59,"line_end":59,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":455}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2008,"byte_end":2011,"line_start":60,"line_end":60,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":489}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2021,"byte_end":2024,"line_start":61,"line_end":61,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":548}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mod.rs","byte_start":140345,"byte_end":140352,"line_start":1,"line_end":1,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":549}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mod.rs","byte_start":140362,"byte_end":140368,"line_start":2,"line_end":2,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":591}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mod.rs","byte_start":140378,"byte_end":140381,"line_start":3,"line_end":3,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":617}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mod.rs","byte_start":140391,"byte_end":140398,"line_start":4,"line_end":4,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":635}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mod.rs","byte_start":140408,"byte_end":140419,"line_start":5,"line_end":5,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":647}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mod.rs","byte_start":140429,"byte_end":140439,"line_start":6,"line_end":6,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":704}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/mod.rs","byte_start":140449,"byte_end":140457,"line_start":7,"line_end":7,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":726}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2034,"byte_end":2037,"line_start":62,"line_end":62,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":782}},{"kind":"Mod","span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2061,"byte_end":2065,"line_start":64,"line_end":64,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":806}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/bounds.rs","byte_start":23952,"byte_end":23953,"line_start":24,"line_end":24,"column_start":35,"column_end":36},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":239},"to":{"krate":0,"index":236}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/bounds.rs","byte_start":24285,"byte_end":24286,"line_start":37,"line_end":37,"column_start":35,"column_end":36},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":244},"to":{"krate":0,"index":241}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/bounds.rs","byte_start":25212,"byte_end":25220,"line_start":75,"line_end":75,"column_start":30,"column_end":38},"kind":{"Impl":{"id":14}},"from":{"krate":1,"index":27306},"to":{"krate":0,"index":233}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":41425,"byte_end":41430,"line_start":411,"line_end":411,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":333}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":48479,"byte_end":48487,"line_start":619,"line_end":619,"column_start":38,"column_end":46},"kind":{"Impl":{"id":31}},"from":{"krate":1,"index":27306},"to":{"krate":0,"index":307}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":49255,"byte_end":49263,"line_start":652,"line_end":652,"column_start":42,"column_end":50},"kind":{"Impl":{"id":32}},"from":{"krate":1,"index":27306},"to":{"krate":0,"index":333}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":50098,"byte_end":50103,"line_start":691,"line_end":691,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":358}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":50106,"byte_end":50117,"line_start":691,"line_end":691,"column_start":28,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":307},"to":{"krate":0,"index":358}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":51810,"byte_end":51818,"line_start":738,"line_end":738,"column_start":30,"column_end":38},"kind":{"Impl":{"id":47}},"from":{"krate":1,"index":27306},"to":{"krate":0,"index":358}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/cast.rs","byte_start":52825,"byte_end":52829,"line_start":770,"line_end":770,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":3067},"to":{"krate":0,"index":366}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":54669,"byte_end":54672,"line_start":16,"line_end":16,"column_start":22,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":844},"to":{"krate":0,"index":403}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":54675,"byte_end":54682,"line_start":16,"line_end":16,"column_start":28,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":358},"to":{"krate":0,"index":403}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":54685,"byte_end":54688,"line_start":16,"line_end":16,"column_start":38,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":3152},"to":{"krate":0,"index":403}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":54706,"byte_end":54716,"line_start":16,"line_end":16,"column_start":59,"column_end":69},"kind":"SuperTrait","from":{"krate":1,"index":2755},"to":{"krate":0,"index":403}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/float.rs","byte_start":54719,"byte_end":54723,"line_start":16,"line_end":16,"column_start":72,"column_end":76},"kind":"SuperTrait","from":{"krate":1,"index":3067},"to":{"krate":0,"index":403}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":119965,"byte_end":119970,"line_start":12,"line_end":12,"column_start":17,"column_end":22},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":466}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":119973,"byte_end":119976,"line_start":12,"line_end":12,"column_start":25,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":3125},"to":{"krate":0,"index":466}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":121222,"byte_end":121230,"line_start":65,"line_end":65,"column_start":24,"column_end":32},"kind":{"Impl":{"id":286}},"from":{"krate":1,"index":27306},"to":{"krate":0,"index":466}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":121659,"byte_end":121664,"line_start":90,"line_end":90,"column_start":16,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":476}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":121667,"byte_end":121670,"line_start":90,"line_end":90,"column_start":24,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":3135},"to":{"krate":0,"index":476}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/identities.rs","byte_start":123207,"byte_end":123215,"line_start":154,"line_end":154,"column_start":22,"column_end":30},"kind":{"Impl":{"id":301}},"from":{"krate":1,"index":27306},"to":{"krate":0,"index":476}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126222,"byte_end":126227,"line_start":35,"line_end":35,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":523}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126234,"byte_end":126238,"line_start":36,"line_end":36,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":3067},"to":{"krate":0,"index":523}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126245,"byte_end":126248,"line_start":37,"line_end":37,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":0,"index":844},"to":{"krate":0,"index":523}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126255,"byte_end":126262,"line_start":38,"line_end":38,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":0,"index":358},"to":{"krate":0,"index":523}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126269,"byte_end":126276,"line_start":39,"line_end":39,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":0,"index":233},"to":{"krate":0,"index":523}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126283,"byte_end":126293,"line_start":40,"line_end":40,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":2755},"to":{"krate":0,"index":523}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126300,"byte_end":126303,"line_start":41,"line_end":41,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2745},"to":{"krate":0,"index":523}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126310,"byte_end":126312,"line_start":42,"line_end":42,"column_start":7,"column_end":9},"kind":"SuperTrait","from":{"krate":1,"index":2714},"to":{"krate":0,"index":523}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126319,"byte_end":126322,"line_start":43,"line_end":43,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3177},"to":{"krate":0,"index":523}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126344,"byte_end":126350,"line_start":44,"line_end":44,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3184},"to":{"krate":0,"index":523}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126372,"byte_end":126377,"line_start":45,"line_end":45,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":3189},"to":{"krate":0,"index":523}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126399,"byte_end":126405,"line_start":46,"line_end":46,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3194},"to":{"krate":0,"index":523}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126427,"byte_end":126430,"line_start":47,"line_end":47,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3199},"to":{"krate":0,"index":523}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126459,"byte_end":126462,"line_start":48,"line_end":48,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3205},"to":{"krate":0,"index":523}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126491,"byte_end":126501,"line_start":49,"line_end":49,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":572},"to":{"krate":0,"index":523}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126523,"byte_end":126533,"line_start":50,"line_end":50,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":575},"to":{"krate":0,"index":523}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126555,"byte_end":126565,"line_start":51,"line_end":51,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":577},"to":{"krate":0,"index":523}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126587,"byte_end":126597,"line_start":52,"line_end":52,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":579},"to":{"krate":0,"index":523}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/int.rs","byte_start":126619,"byte_end":126629,"line_start":53,"line_end":53,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":715},"to":{"krate":0,"index":523}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":140621,"byte_end":140626,"line_start":5,"line_end":5,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":572}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":140629,"byte_end":140632,"line_start":5,"line_end":5,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":3125},"to":{"krate":0,"index":572}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":141762,"byte_end":141767,"line_start":39,"line_end":39,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":575}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":141770,"byte_end":141773,"line_start":39,"line_end":39,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":3130},"to":{"krate":0,"index":575}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":142665,"byte_end":142670,"line_start":63,"line_end":63,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":577}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":142673,"byte_end":142676,"line_start":63,"line_end":63,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":3135},"to":{"krate":0,"index":577}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":143633,"byte_end":143638,"line_start":87,"line_end":87,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":579}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":143641,"byte_end":143644,"line_start":87,"line_end":87,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":3140},"to":{"krate":0,"index":579}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":144620,"byte_end":144625,"line_start":111,"line_end":111,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":581}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":144628,"byte_end":144631,"line_start":111,"line_end":111,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":3146},"to":{"krate":0,"index":581}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":146399,"byte_end":146404,"line_start":162,"line_end":162,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":584}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":147848,"byte_end":147853,"line_start":200,"line_end":200,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":586}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":147856,"byte_end":147859,"line_start":200,"line_end":200,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":3199},"to":{"krate":0,"index":586}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":149490,"byte_end":149495,"line_start":246,"line_end":246,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":589}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/checked.rs","byte_start":149498,"byte_end":149501,"line_start":246,"line_end":246,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":3205},"to":{"krate":0,"index":589}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":150795,"byte_end":150800,"line_start":3,"line_end":3,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":599}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":150803,"byte_end":150806,"line_start":3,"line_end":3,"column_start":27,"column_end":30},"kind":"SuperTrait","from":{"krate":1,"index":3140},"to":{"krate":0,"index":599}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":150830,"byte_end":150833,"line_start":3,"line_end":3,"column_start":54,"column_end":57},"kind":"SuperTrait","from":{"krate":1,"index":3146},"to":{"krate":0,"index":599}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/euclid.rs","byte_start":155535,"byte_end":155541,"line_start":173,"line_end":173,"column_start":26,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":599},"to":{"krate":0,"index":611}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/overflowing.rs","byte_start":166489,"byte_end":166494,"line_start":19,"line_end":19,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":698}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/overflowing.rs","byte_start":166497,"byte_end":166500,"line_start":19,"line_end":19,"column_start":35,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":3125},"to":{"krate":0,"index":698}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/overflowing.rs","byte_start":167576,"byte_end":167581,"line_start":42,"line_end":42,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":700}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/overflowing.rs","byte_start":167584,"byte_end":167587,"line_start":42,"line_end":42,"column_start":35,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":3130},"to":{"krate":0,"index":700}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/overflowing.rs","byte_start":168672,"byte_end":168677,"line_start":65,"line_end":65,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":702}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/overflowing.rs","byte_start":168680,"byte_end":168683,"line_start":65,"line_end":65,"column_start":35,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":3135},"to":{"krate":0,"index":702}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":171857,"byte_end":171862,"line_start":47,"line_end":47,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":720}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":171865,"byte_end":171868,"line_start":47,"line_end":47,"column_start":34,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":3125},"to":{"krate":0,"index":720}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":172865,"byte_end":172870,"line_start":70,"line_end":70,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":722}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":172873,"byte_end":172876,"line_start":70,"line_end":70,"column_start":34,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":3130},"to":{"krate":0,"index":722}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":173879,"byte_end":173884,"line_start":93,"line_end":93,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":724}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/saturating.rs","byte_start":173887,"byte_end":173890,"line_start":93,"line_end":93,"column_start":34,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":3135},"to":{"krate":0,"index":724}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":176285,"byte_end":176290,"line_start":24,"line_end":24,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":750}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":176293,"byte_end":176296,"line_start":24,"line_end":24,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":3125},"to":{"krate":0,"index":750}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":177179,"byte_end":177184,"line_start":47,"line_end":47,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":752}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":177187,"byte_end":177190,"line_start":47,"line_end":47,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":3130},"to":{"krate":0,"index":752}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":178079,"byte_end":178084,"line_start":70,"line_end":70,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":754}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":178087,"byte_end":178090,"line_start":70,"line_end":70,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":3135},"to":{"krate":0,"index":754}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":179219,"byte_end":179224,"line_start":104,"line_end":104,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":757}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":181058,"byte_end":181063,"line_start":152,"line_end":152,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":760}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":181066,"byte_end":181069,"line_start":152,"line_end":152,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":3199},"to":{"krate":0,"index":760}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":182464,"byte_end":182469,"line_start":187,"line_end":187,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":762}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":182472,"byte_end":182475,"line_start":187,"line_end":187,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":3205},"to":{"krate":0,"index":762}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":183896,"byte_end":183904,"line_start":222,"line_end":222,"column_start":38,"column_end":46},"kind":{"Impl":{"id":618}},"from":{"krate":1,"index":27306},"to":{"krate":0,"index":750}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":184096,"byte_end":184104,"line_start":230,"line_end":230,"column_start":38,"column_end":46},"kind":{"Impl":{"id":619}},"from":{"krate":1,"index":27306},"to":{"krate":0,"index":752}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":184296,"byte_end":184304,"line_start":238,"line_end":238,"column_start":38,"column_end":46},"kind":{"Impl":{"id":620}},"from":{"krate":1,"index":27306},"to":{"krate":0,"index":754}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":184496,"byte_end":184504,"line_start":246,"line_end":246,"column_start":38,"column_end":46},"kind":{"Impl":{"id":621}},"from":{"krate":1,"index":27306},"to":{"krate":0,"index":757}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":184682,"byte_end":184690,"line_start":254,"line_end":254,"column_start":38,"column_end":46},"kind":{"Impl":{"id":622}},"from":{"krate":1,"index":27306},"to":{"krate":0,"index":760}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/ops/wrapping.rs","byte_start":184888,"byte_end":184896,"line_start":262,"line_end":262,"column_start":38,"column_end":46},"kind":{"Impl":{"id":623}},"from":{"krate":1,"index":27306},"to":{"krate":0,"index":762}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":216440,"byte_end":216445,"line_start":8,"line_end":8,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":819}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":216448,"byte_end":216451,"line_start":8,"line_end":8,"column_start":27,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":844},"to":{"krate":0,"index":819}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":216454,"byte_end":216457,"line_start":8,"line_end":8,"column_start":33,"column_end":36},"kind":"SuperTrait","from":{"krate":1,"index":3152},"to":{"krate":0,"index":819}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":218528,"byte_end":218536,"line_start":80,"line_end":80,"column_start":28,"column_end":36},"kind":{"Impl":{"id":774}},"from":{"krate":1,"index":27306},"to":{"krate":0,"index":819}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":221656,"byte_end":221659,"line_start":197,"line_end":197,"column_start":21,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":844},"to":{"krate":0,"index":840}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/sign.rs","byte_start":221916,"byte_end":221924,"line_start":209,"line_end":209,"column_start":32,"column_end":40},"kind":{"Impl":{"id":783}},"from":{"krate":1,"index":27306},"to":{"krate":0,"index":840}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2216,"byte_end":2225,"line_start":68,"line_end":68,"column_start":16,"column_end":25},"kind":"SuperTrait","from":{"krate":1,"index":2709},"to":{"krate":0,"index":844}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2228,"byte_end":2232,"line_start":68,"line_end":68,"column_start":28,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":466},"to":{"krate":0,"index":844}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2235,"byte_end":2238,"line_start":68,"line_end":68,"column_start":35,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":476},"to":{"krate":0,"index":844}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":2241,"byte_end":2247,"line_start":68,"line_end":68,"column_start":41,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":847},"to":{"krate":0,"index":844}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":3682,"byte_end":3685,"line_start":103,"line_end":103,"column_start":5,"column_end":8},"kind":"SuperTrait","from":{"krate":1,"index":3125},"to":{"krate":0,"index":847}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":3714,"byte_end":3717,"line_start":104,"line_end":104,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3130},"to":{"krate":0,"index":847}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":3746,"byte_end":3749,"line_start":105,"line_end":105,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3135},"to":{"krate":0,"index":847}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":3778,"byte_end":3781,"line_start":106,"line_end":106,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3140},"to":{"krate":0,"index":847}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":3810,"byte_end":3813,"line_start":107,"line_end":107,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3146},"to":{"krate":0,"index":847}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":3886,"byte_end":3887,"line_start":111,"line_end":111,"column_start":46,"column_end":47},"kind":{"Impl":{"id":784}},"from":{"krate":0,"index":851},"to":{"krate":0,"index":847}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":4291,"byte_end":4294,"line_start":124,"line_end":124,"column_start":19,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":844},"to":{"krate":0,"index":854}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":4305,"byte_end":4311,"line_start":124,"line_end":124,"column_start":33,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":847},"to":{"krate":0,"index":854}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":4344,"byte_end":4345,"line_start":125,"line_end":125,"column_start":20,"column_end":21},"kind":{"Impl":{"id":785}},"from":{"krate":0,"index":857},"to":{"krate":0,"index":854}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":4753,"byte_end":4759,"line_start":133,"line_end":133,"column_start":25,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":847},"to":{"krate":0,"index":859}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":4782,"byte_end":4788,"line_start":133,"line_end":133,"column_start":54,"column_end":60},"kind":"SuperTrait","from":{"krate":0,"index":847},"to":{"krate":0,"index":859}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":4839,"byte_end":4840,"line_start":134,"line_end":134,"column_start":32,"column_end":33},"kind":{"Impl":{"id":786}},"from":{"krate":0,"index":863},"to":{"krate":0,"index":859}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":5112,"byte_end":5121,"line_start":140,"line_end":140,"column_start":5,"column_end":14},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":866}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":5129,"byte_end":5138,"line_start":140,"line_end":140,"column_start":22,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":3160},"to":{"krate":0,"index":866}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":5146,"byte_end":5155,"line_start":140,"line_end":140,"column_start":39,"column_end":48},"kind":"SuperTrait","from":{"krate":1,"index":3164},"to":{"krate":0,"index":866}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":5163,"byte_end":5172,"line_start":140,"line_end":140,"column_start":56,"column_end":65},"kind":"SuperTrait","from":{"krate":1,"index":3168},"to":{"krate":0,"index":866}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":5180,"byte_end":5189,"line_start":140,"line_end":140,"column_start":73,"column_end":82},"kind":"SuperTrait","from":{"krate":1,"index":3172},"to":{"krate":0,"index":866}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":5235,"byte_end":5236,"line_start":144,"line_end":144,"column_start":36,"column_end":37},"kind":{"Impl":{"id":787}},"from":{"krate":0,"index":869},"to":{"krate":0,"index":866}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":5515,"byte_end":5518,"line_start":152,"line_end":152,"column_start":22,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":844},"to":{"krate":0,"index":871}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":5521,"byte_end":5533,"line_start":152,"line_end":152,"column_start":28,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":866},"to":{"krate":0,"index":871}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":5559,"byte_end":5560,"line_start":153,"line_end":153,"column_start":23,"column_end":24},"kind":{"Impl":{"id":788}},"from":{"krate":0,"index":873},"to":{"krate":0,"index":871}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":5823,"byte_end":5832,"line_start":159,"line_end":159,"column_start":25,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":871},"to":{"krate":0,"index":874}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":5843,"byte_end":5855,"line_start":159,"line_end":159,"column_start":45,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":866},"to":{"krate":0,"index":874}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":5894,"byte_end":5895,"line_start":160,"line_end":160,"column_start":26,"column_end":27},"kind":{"Impl":{"id":789}},"from":{"krate":0,"index":877},"to":{"krate":0,"index":874}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":6494,"byte_end":6502,"line_start":179,"line_end":179,"column_start":22,"column_end":30},"kind":{"Impl":{"id":802}},"from":{"krate":1,"index":27306},"to":{"krate":0,"index":844}},{"span":{"file_name":"/home/johnmorrisett/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.15/src/lib.rs","byte_start":7029,"byte_end":7044,"line_start":201,"line_end":201,"column_start":23,"column_end":38},"kind":{"Impl":{"id":803}},"from":{"krate":0,"index":4513},"to":{"krate":1,"index":9685}}]}